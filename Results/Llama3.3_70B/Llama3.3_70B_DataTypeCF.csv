Llama3.3_70B_DataTypeCF_response,Llama3.3_70B_DataTypeCF_mitigation_response,Llama3.3_70B_DataTypeCF_inline_response,Llama3.3_70B_DataTypeCF_CoT_response,Llama3.3_70B_DataTypeCF_EXM,Llama3.3_70B_DataTypeCF_mitigation_EXM,Llama3.3_70B_DataTypeCF_inline_EXM,Llama3.3_70B_DataTypeCF_CoT_EXM,Llama3.3_70B_DataTypeCF_retrieval,Llama3.3_70B_DataTypeCF_mitigation_retrieval,Llama3.3_70B_DataTypeCF_inline_retrieval,Llama3.3_70B_DataTypeCF_CoT_retrieval,Llama3.3_70B_DataTypeCF_bleu,Llama3.3_70B_DataTypeCF_mitigation_bleu,Llama3.3_70B_DataTypeCF_inline_bleu,Llama3.3_70B_DataTypeCF_CoT_bleu
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }']","['public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { return (long) Long.BYTES + (long) Float.BYTES; }', 'public long getMaxIntermediateSize() { long longSize = Long.BYTES; long floatSize = Float.BYTES; return longSize + floatSize; }', 'public long getMaxIntermediateSize() { return Long.BYTES + (long) Float.BYTES; }', 'public long getMaxIntermediateSize() { return (long) Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { long totalSize = 0; totalSize = Long.BYTES + Float.BYTES; return totalSize; }', 'public long getMaxIntermediateSize() { long totalSize = Long.BYTES; totalSize += Float.BYTES; return totalSize; }', 'public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { long longSize = Long.BYTES; return longSize + Float.BYTES; }', 'public long getMaxIntermediateSize() { long floatSize = Float.BYTES; return Long.BYTES + floatSize; }']","['public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { return 8 + 4; }', 'public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { return 8L + 4L; }', 'public long getMaxIntermediateSize() { long longSize = Long.BYTES; long floatSize = Float.BYTES; return longSize + floatSize; }', 'public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { long longSize = 8; long floatSize = 4; return longSize + floatSize; }', 'public long getMaxIntermediateSize() { return Long.BYTES + Float.BYTES; }', 'public long getMaxIntermediateSize() { long longSize = Long.BYTES; long floatSize = Float.BYTES; return longSize + floatSize; }', 'public long getMaxIntermediateSize() { long longSize = 8L; long floatSize = 4L; return longSize + floatSize; }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Long read() { Long value = nanos.getAndAdd(0); return nanos.get(); }', 'public Long read() { Long value = nanos.getAndAdd(0); return value; }', 'public Long read() { Long value = nanos.getAndAdd(0); return Long.valueOf(nanos.get()); }', 'public Long read() { Long value = nanos.getAndAdd(0); return (long) nanos.get(); }', 'public Long read() { Long value = nanos.getAndAdd(0); return Long.valueOf(nanos.getAndAdd(0)); }', 'public Long read() { Long value = nanos.getAndAdd(0); return (long) nanos.getAndAdd(0); }', 'public Long read() { Long value = nanos.getAndAdd(0); return Long.valueOf(nanos.getAndAdd(0)); }', 'public Long read() { Long value = nanos.getAndAdd(0); return nanos.getAndAdd(0); }', 'public Long read() { Long value = nanos.getAndAdd(0); return Long.valueOf(nanos.get()); }', 'public Long read() { Long value = nanos.getAndAdd(0); return (long) nanos.get(); }']","['public Long read() { Long value = nanos.getAndAdd(0); return nanos.get(); }', 'public Long read() { Long value = nanos.getAndAdd(0); return nanos.getAndAdd(0); }', 'public Long read() { Long value = nanos.getAndAdd(0); return value = nanos.get(); }', 'public Long read() { Long value = nanos.getAndAdd(0); return (value = nanos.getAndAdd(0)); }', 'public Long read() { Long value = nanos.getAndAdd(0); Long temp = nanos.get(); return temp; }', 'public Long read() { Long value = nanos.getAndAdd(0); return (value = nanos.getAndAdd(0)); return value; }', 'public Long read() { Long value = nanos.getAndAdd(0); Long temp = nanos.getAndAdd(0); return temp; }', 'public Long read() { Long value = nanos.getAndAdd(0); Long temp = nanos.get(); return temp; }', 'public Long read() { Long value = nanos.getAndAdd(0); value = nanos.get(); return value; }', 'public Long read() { Long value = nanos.getAndAdd(0); value = nanos.getAndAdd(0); return value; }']","['public Long read() { Long value = nanos.getAndAdd(0); return nanos.get(); }', 'public Long read() { Long value = nanos.getAndAdd(0); return value; }', 'public Long read() { Long value = nanos.get(); return value; }', 'public Long read() { return nanos.getAndAdd(0); }', 'public Long read() { Long value = nanos.getAndAdd(0); return Long.valueOf(value); }', 'public Long read() { Long value = nanos.getAndAdd(0); return (long) value; }', 'public Long read() { return Long.valueOf(nanos.getAndAdd(0)); }', 'public Long read() { Long value = nanos.get(); return Long.valueOf(value); }', 'public Long read() { return (long) nanos.getAndAdd(0); }', 'public Long read() { Long value = nanos.getAndAdd(0); return valuelong(); }']",[],False,False,False,False,False,False,False,False,0.09717716588732002,0.09068059995923879,0.43146827293898643,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }']","['protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'private GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'public GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'private GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'public GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'private GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }']","['GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }']","['protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'public GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'public GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'public GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'protected GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }', 'GammaIntegerCodec(final BitInputStream coreBlockInputStream, final BitOutputStream coreBlockOutputStream, final long offset) { super(coreBlockInputStream, coreBlockOutputStream); this.offset = offset; }']",False,True,False,True,False,False,False,False,0.9200444146293233,0.0,0.9200444146293233,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }']","['public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(10)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(5)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(5)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(5)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(5)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(10)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(10)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(10)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(5)); }']","['public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(5)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(5)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(10)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(10)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(5)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(10)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(10)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(10)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(10)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(10)); }']","['public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }', 'public void freshTimestampsDelegatesToTimestampService() { Integer numTimestamps = 10; TimestampRange range = TimestampRange.createInclusiveRange(21L, 30L); when(timestampService.getFreshTimestamps(numTimestamps)).thenReturn(range); assertEquals(range, timelock.getFreshTimestamps(numTimestamps)); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String) runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    String result = (String)runnable.getResult(); \n    return result; \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return runnable.getResult().toString(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String) runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return String.valueOf(runnable.getResult()); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}']","['private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return runnable.getResult().toString(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return runnable.getResult().toString(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    String result = (String)runnable.getResult(); \n    return result; \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    String result = (String)runnable.getResult(); \n    return result; \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return String.valueOf(runnable.getResult()); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return String.valueOf(runnable.getResult()); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String) runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String) runnable.getResult(); \n}']","['private String getCurrentValueFromViewer(MergeViewerSide side) { \n    final Boolean isLeft = (MergeViewerSide.LEFT == side) != getCompareConfiguration().isMirrored(); \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    final Boolean isLeft = (MergeViewerSide.LEFT == side) \n        != getCompareConfiguration().isMirrored(); \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) \n    { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    final Boolean isLeft = \n        (MergeViewerSide.LEFT == side) \n        != getCompareConfiguration().isMirrored(); \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = \n        new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    final Boolean isLeft = (MergeViewerSide.LEFT == side) \n        != getCompareConfiguration().isMirrored(); \n    final GetContentRunnable runnable = \n        new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}']","['private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String) runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String)runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    String result = (String)runnable.getResult(); \n    return result; \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return runnable.getResult().toString(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String) runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return String.valueOf(runnable.getResult()); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return String.valueOf(runnable.getResult()); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String) runnable.getResult(); \n}', 'private String getCurrentValueFromViewer(MergeViewerSide side) { \n    Boolean isLeft = MergeViewerSide.LEFT == side; \n    if (getCompareConfiguration().isMirrored()) { \n        isLeft = MergeViewerSide.RIGHT == side; \n    } \n    final GetContentRunnable runnable = new GetContentRunnable(isLeft); \n    Display.getDefault().syncExec(runnable); \n    return (String) runnable.getResult(); \n}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().findFirst().get().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().findFirst().get().size()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().findFirst().get().size()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().findFirst().get().stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().findFirst().stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().get().stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().get().size()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().findFirst().get().stream().count()); }']","['public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().count()); }']","['public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter)); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter)); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream()); }']","['public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).stream().count()); }', 'public void listSettingsWithPagination() { final Integer numberExpected = 50; for (Integer value = 0; value < numberExpected; value++) { client.setSetting(new ConfigurationSetting().key(keyPrefix + ""-"" + value).value(""myValue"").label(labelPrefix)); } SettingSelector filter = new SettingSelector().keys(keyPrefix + ""-*"").labels(labelPrefix); assertEquals(numberExpected, client.listSettings(filter).streamByPage().count()); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return Collections.emptyList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return List.of(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new ArrayList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new LinkedList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new ArrayList<Element>(0); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new LinkedList<Element>(0); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new Vector<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new Vector<Element>(0); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new CopyOnWriteArrayList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new CopyOnWriteArrayList<Element>(0); }']","['public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return Collections.emptyList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return List.of(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new ArrayList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new LinkedList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return ArrayList.emptyList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new ArrayList<Element>(0); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return Collections.emptyList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new ArrayList<Element>(0); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new LinkedList<Element>(0); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new ArrayList<>(); }']","['public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return Collections.emptyList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new ArrayList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return List.of(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new LinkedList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new ArrayList<Element>(0); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return Collections.emptyList(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new Vector<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new Stack<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new CopyOnWriteArrayList<>(); }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return null; } List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0 && index < siblings.size()) { return siblings.subList(0, index); } return new AbstractList<>(); }']",[],False,False,False,False,False,False,False,False,0.8725129388059689,0.8725129388059689,0.8725129388059689,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'protected static boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'private static boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'public static boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'public boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'protected boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'private boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'public static boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'public static boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'public static boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }']","['protected static boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'private static boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'static boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'protected boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'private boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'protected static boolean matchingColumn(final package comparator Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'private static boolean matchingColumn(final package comparator Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'static boolean matchingColumn(final package comparator Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'protected boolean matchingColumn(final package comparator Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }']","['public boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'public boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'public boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'public boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'public boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'public boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'public boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }', 'public boolean matchingColumn(final Cell left, final long lFamLen, final long lQualLength, final Cell right, final long rFamLen, final long rQualLength) { if (!matchingFamily(left, lFamLen, right, rFamLen)) { return false; } return matchingQualifier(left, lQualLength, right, rQualLength); }']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.9286029058931802,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }']","['public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }']","['public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); Boolean actual = check.accepts(rule, context); final Boolean finalActual = actual; assertFalse(finalActual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); if(actual != null) { assertFalse(actual); } }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual Boolean.TRUE); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); if(actual != null) assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); Boolean finalActual = actual; assertFalse(finalActual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); Boolean actualNotFinal = actual; assertFalse(actualNotFinal); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); Boolean actualNotFinal = actual; if(actualNotFinal != null) { assertFalse(actualNotFinal); } }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); if(actual != null) { Boolean finalActual = actual; assertFalse(finalActual); } }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); if(actual != null) { Boolean actualNotFinal = actual; assertFalse(actualNotFinal); } }']","['public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }', 'public void testAcceptWhenIsNotExpectedClass() { when(rule.getId()).thenReturn(""SomeOtherClass""); final Boolean actual = check.accepts(rule, context); assertFalse(actual); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = Boolean.FALSE; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = Boolean.FALSE; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = Boolean.FALSE; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = Boolean.FALSE; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = Boolean.FALSE; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }']","['public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = Boolean.FALSE; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = Boolean.FALSE; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = Boolean.FALSE; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = Boolean.FALSE; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = Boolean.FALSE; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }']","['public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; if(expected != null) { checkCanUserSeeProcessInstanceWhenApiReturn(expected); } }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; if(expected != null && expected != true) { checkCanUserSeeProcessInstanceWhenApiReturn(expected); } }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; if(expected != null && expected != true && expected != false) { checkCanUserSeeProcessInstanceWhenApiReturn(expected); } }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; if(expected != null && expected != true) { checkCanUserSeeProcessInstanceWhenApiReturn(expected); } else { checkCanUserSeeProcessInstanceWhenApiReturn(expected); } }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); if(expected != null) { } }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); if(expected != null && expected != true) { } }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); if(expected != null && expected != true && expected != false) { } }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; if(expected != null) checkCanUserSeeProcessInstanceWhenApiReturn(expected); }', 'public void should_canUserSeeProcessInstance_call_engine_api_false() throws Exception { final Boolean expected = false; checkCanUserSeeProcessInstanceWhenApiReturn(expected); }']",[],False,False,False,False,False,False,False,False,0.16508103044554204,0.19308506685901675,0.16508103044554204,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { mCommandList.remove(command); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { command = (Command) mCommandList.remove(indexOfCommand); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { mCommandList.remove(indexOfCommand); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { ((BaseCommand) command).freeResources(); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); mCommandList.remove(command); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); ((BaseCommand) command).freeResources(); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { ((BaseCommand) command).freeResources(); mCommandList.remove(command); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }']","['private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { mCommandList.remove(command); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { command = (Command) mCommandList.remove(indexOfCommand); if(command == command) { ((BaseCommand) command).freeResources(); } } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { command = (Command) mCommandList.remove(indexOfCommand); if(command == command) { ((BaseCommand) command).freeResources(); } } else { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { mCommandList.remove(indexOfCommand); ((BaseCommand) command).freeResources(); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { ((BaseCommand) command).freeResources(); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } else { ((BaseCommand) command).freeResources(); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }']","['private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); mCommandCounter--; mCommandIndex--; } if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); } if(indexOfCommand >= 0) { mCommandCounter--; mCommandIndex--; } if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); mCommandCounter--; mCommandIndex--; } if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); if (mCommandCounter >= 1) { mCommandCounter--; mCommandIndex--; } } if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); mCommandCounter--; if (mCommandCounter >= 0) { mCommandIndex--; } } if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); if (mCommandCounter >= 1) { mCommandCounter--; if (mCommandIndex >= 0) { mCommandIndex--; } } } if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } }', 'private synchronized void deleteFailedCommand(Command command) { Integer indexOfCommand = mCommandList.indexOf(command); if(indexOfCommand >= 0) { ((BaseCommand) mCommandList.remove(indexOfCommand)).freeResources(); mCommandCounter--; mCommandIndex--; if (mCommandCounter == 1) { UndoRedoManager.getInstance().update( UndoRedoManager.StatusMode.DISABLE_UNDO); } } else { mCommandCounter--; mCommandIndex--; } }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms: {}"", sleepMillis, sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms, sleepMillis: {}"", sleepMillis, sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleepMillis: {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms, with sleepMillis: {}"", sleepMillis, sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, with sleepMillis: {} ms, sleeping for {} ms."", sleepMillis, sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for: {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, for {} ms, sleeping."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleep for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, with a sleep of {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }']","['private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms. Attempt: {}."", sleepMillis, numberOfAttempts); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB. Attempt: {}. sleeping for {} ms."", numberOfAttempts, sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB. sleeping for {} ms. Attempt: {}."", sleepMillis, numberOfAttempts); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms. Attempt {} of exponential backoff."", sleepMillis, numberOfAttempts); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB. sleeping for {} ms. Attempt {} of exponential backoff."", sleepMillis, numberOfAttempts); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB. Attempt {} of exponential backoff. sleeping for {} ms."", numberOfAttempts, sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB. sleeping for {} ms. Attempt {} of exponential backoff. numberOfAttempts: {}."", sleepMillis, numberOfAttempts, numberOfAttempts); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB. sleeping for {} ms. Attempt {} of exponential backoff. numberOfAttempts: {}."", sleepMillis, numberOfAttempts, numberOfAttempts); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms. Attempt: {} of {}."", sleepMillis, numberOfAttempts, numberOfAttempts); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }']","['private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.warn(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff."", e); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff."", e); LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); Thread.sleep(sleepMillis); LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); } }']","['private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled by DynamoDB, sleeping for {} ms. This is a warning."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttling warning: sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Warning: throttled by DynamoDB, sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttled: sleeping for {} ms to avoid overloading DynamoDB."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Warning: DynamoDB throttling. Sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttling warning for DynamoDB: sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Warning - DynamoDB throttling: sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Throttling by DynamoDB. Sleeping for {} ms as a warning."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }', 'private void backoff(int numberOfAttempts) { try { Long sleepMillis = (Long) Math.pow(2, numberOfAttempts) * 50; LOGGER.warn(""Warning message: throttled by DynamoDB. Sleeping for {} ms."", sleepMillis); Thread.sleep(sleepMillis); } catch (InterruptedException e) { LOGGER.error(""Interrupted while attempting exponential backoff.""); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels.pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = () -> Channels.pipeline(); pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels.pipeline; pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; return pipelineFactory; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { return Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; pipelineFactory = Channels.pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { return pipelineFactory = Channels::pipeline; } return pipelineFactory; }']","['private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else {  pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }']","['private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels.pipeline()::getPipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = () -> { return Channels.pipeline(); }; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = (Channel) -> Channels.pipeline(); } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = (Channel) -> { return Channels.pipeline(); }; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = (Channel) -> Channels.pipeline(); } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = () -> Channels.pipeline(); } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = (Channel) -> { return Channels.pipeline(); }; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = () -> { return Channels.pipeline(); }; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }']","['private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }', 'private ChannelPipelineFactory initChannelPipelineFactory() { ChannelPipelineFactory pipelineFactory; Boolean enableCompression = compressionType.equalsIgnoreCase(""deflate""); if (enableCompression || enableSsl || enableIpFilter) { pipelineFactory = new AdvancedChannelPipelineFactory( enableCompression, enableSsl, keystore, keystorePassword, keystoreType, enableIpFilter, patternRuleConfigDefinition); } else { pipelineFactory = Channels::pipeline; } return pipelineFactory; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); updateSelected(rows); } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); getMaxSize(rows); } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); selected = new Integer[getMaxSize()]; } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); updateSelected(rows); getMaxSize(); } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); Integer max = getMaxSize(); updateSelected(rows); } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); Integer max = getMaxSize(); selected = new Integer[getMaxSize()]; } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); updateSelected(rows); Integer max = getMaxSize(); } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); selected = new Integer[getMaxSize()]; updateSelected(rows); } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); Integer max = getMaxSize(); updateSelected(rows); selected = new Integer[getMaxSize()]; } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); updateSelected(rows); selected = new Integer[getMaxSize()]; Integer max = getMaxSize(); } }']","['public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } updateSelected(rows); }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } getMaxSize(); updateSelected(rows); }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } if (getMaxSize() >= rows) updateSelected(rows); }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } updateSelected(rows); if (getMaxSize() < rows) updateSelected(rows); }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } if (getMaxSize() >= rows) { updateSelected(rows); } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } updateSelected(rows); getMaxSize(); }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } if (getMaxSize() < rows) { updateSelected(rows); } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } updateSelected(rows); getMaxSize(); updateSelected(rows); }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } if (getMaxSize() >= rows) updateSelected(rows); getMaxSize(); }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } getMaxSize(); if (getMaxSize() >= rows) updateSelected(rows); }']","['public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } updateSelected(rows); getMaxSize(); }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } updateSelected(rows); }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } getMaxSize(); updateSelected(rows); }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } if (getMaxSize() < rows) updateSelected(rows); }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } if (getMaxSize() < rows) { updateSelected(rows); } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } updateSelected(rows); if (getMaxSize() < rows) { } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } updateSelected(rows); getMaxSize(); if (getMaxSize() < rows) { } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } if (getMaxSize() < rows) updateSelected(rows); getMaxSize(); }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } if (getMaxSize() < rows) { updateSelected(rows); getMaxSize(); } }', 'public void ensureSize(Integer rows) { for(Integer i=0; i < cols.length; ++i) { cols[i].ensureSize(rows, false); } updateSelected(rows); if (getMaxSize() < rows) { getMaxSize(); } }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }']","['private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }']","['private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateTime.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }']","['private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { return Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { DateTime dateNow = DateUtil.now(); return Days.daysBetween(user.getLastPasswordChange(), dateNow).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { DateTime dateNow = DateUtil.now(); return Days.daysBetween(user.getLastPasswordChange(), dateNow).getDays(); }', 'private long daysWithoutPasswordChange(MotechUser user) { DateTime dateNow = DateUtil.now(); long days = Days.daysBetween(user.getLastPasswordChange(), dateNow).getDays(); return days; }', 'private long daysWithoutPasswordChange(MotechUser user) { DateTime dateNow = DateUtil.now(); long days = Days.daysBetween(user.getLastPasswordChange(), dateNow).getDays(); return days; }', 'private long daysWithoutPasswordChange(MotechUser user) { long days = Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); return days; }', 'private long daysWithoutPasswordChange(MotechUser user) { long days = Days.daysBetween(user.getLastPasswordChange(), DateUtil.now()).getDays(); return days; }', 'private long daysWithoutPasswordChange(MotechUser user) { DateTime dateNow = DateUtil.now(); long days = Days.daysBetween(user.getLastPasswordChange(), dateNow).getDays(); return days; }', 'private long daysWithoutPasswordChange(MotechUser user) { DateTime dateNow = DateUtil.now(); long days = Days.daysBetween(user.getLastPasswordChange(), dateNow).getDays(); return days;']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(""threshold"")) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(""threshold"")) < 0) valid = true; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) < 0) valid = true; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) { valid = false; } } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) { valid = false; return valid; } } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; return valid; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) { valid = false; } return valid; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; return valid; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) { valid = false; } } catch (InvalidCastException | ConstraintsException e) { valid = false; return valid; } return valid; }']","['public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) { valid = false; } } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) { valid = false; } } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) { valid = false; } } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) { valid = false; } } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }']","['public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(""threshold"")) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(""threshold"")) < 0) valid = true; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(""0"")) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) < 0) valid = true; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(""0"")) < 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) { valid = false; } } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; return valid; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) { valid = false; return valid; } } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { return false; } return valid; }']","['public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) { valid = false; } } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) { valid = false; } } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }', 'public Boolean checkCell(Cell cell) { Boolean valid = true; try { Comparable value = column.castValue(cell.value.toString()); if (value.compareTo(column.castValue(threshold)) > 0) valid = false; } catch (InvalidCastException | ConstraintsException e) { valid = false; } return valid; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((registry == null) ? 0 : registry.hashCode()); result = prime * result + ((version == null) ? 0 : version.hashCode()); return result; }', 'public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; return prime * 1 + ((id == null) ? 0 : id.hashCode()); }', 'public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((registry == null) ? 0 : registry.hashCode()); return result; }', 'public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((version == null) ? 0 : version.hashCode()); return result; }', 'public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; return result; }', 'public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); return prime * result; }', 'public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((registry == null) ? 0 : registry.hashCode()); result = prime * result + ((version == null) ? 0 : version.hashCode()); return result; }', 'public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((registry == null) ? 0 : registry.hashCode()); return result; }', 'public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((version == null) ? 0 : version.hashCode()); return result; }', 'public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((registry == null) ? 0 : registry.hashCode()); result = prime * result + ((id == null) ? 0 : id.hashCode()); return result; }']","['@Override public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((registry == null) ? 0 : registry.hashCode()); result = prime * result + ((version == null) ? 0 : version.hashCode()); return result; }', '@Override public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((registry == null) ? 0 : registry.hashCode()); return result; }', '@Override public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); return result; }', '@Override public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((registry == null) ? 0 : registry.hashCode()); result = prime * result + ((version == null) ? 0 : version.hashCode()); return result; }', '@Override public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((version == null) ? 0 : version.hashCode()); return result; }', '@Override public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; return result; }', '@Override public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((registry == null) ? 0 : registry.hashCode()); return result; }', '@Override public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((version == null) ? 0 : version.hashCode()); return result; }', '@Override public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((id == null) ? 0 : id.hashCode()); result = prime * result + ((registry == null) ? 0 : registry.hashCode()); result = prime * result + ((version == null) ? 0 : version.hashCode()); return result; }', '@Override public long hashCode() { return Objects.hash(getRegistry(), getId(), getVersion()); } final long prime = 31; int result = 1; result = prime * result + ((version == null) ? 0 : version.hashCode()); result = prime * result + ((registry == null) ? 0 : registry.hashCode()); return result; }']","['public long hashCode() { \n    return Objects.hash(getRegistry(), getId(), getVersion(), 31, 1, getId() == null ? 0 : getId().hashCode(), \n    getRegistry() == null ? 0 : getRegistry().hashCode(), getVersion() == null ? 0 : getVersion().hashCode()); \n}', 'public long hashCode() { \n    final long prime = 31; \n    int result = 1; \n    result = prime * result + ((registry == null) ? 0 : registry.hashCode()); \n    result = prime * result + ((id == null) ? 0 : id.hashCode()); \n    result = prime * result + ((version == null) ? 0 : version.hashCode()); \n    return result; \n}', 'public long hashCode() { \n    return Objects.hash(getRegistry(), getId(), getVersion()); \n}', 'public long hashCode() { \n    final long prime = 31; \n    int result = 1; \n    result = prime * result + ((id == null) ? 0 : id.hashCode()); \n    result = prime * result + ((version == null) ? 0 : version.hashCode()); \n    result = prime * result + ((registry == null) ? 0 : registry.hashCode()); \n    return result; \n}', 'public long hashCode() { \n    final long prime = 31; \n    int result = 1; \n    result = prime * result + ((version == null) ? 0 : version.hashCode()); \n    result = prime * result + ((id == null) ? 0 : id.hashCode()); \n    result = prime * result + ((registry == null) ? 0 : registry.hashCode()); \n    return result; \n}', 'public long hashCode() { \n    return Objects.hash(getRegistry(), getId(), getVersion(), 31, 1, getRegistry() == null ? 0 : getRegistry().hashCode(), \n    getId() == null ? 0 : getId().hashCode(), getVersion() == null ? 0 : getVersion().hashCode()); \n}', 'public long hashCode() { \n    final long prime = 31; \n    int result = 1; \n    result = prime * result + ((registry == null) ? 0 : registry.hashCode()); \n    result = prime * result + ((version == null) ? 0 : version.hashCode()); \n    result = prime * result + ((id == null) ? 0 : id.hashCode()); \n    return result; \n}', 'public long hashCode() { \n    return Objects.hash(getRegistry(), getId(), getVersion(), 31, 1, getVersion() == null ? 0 : getVersion().hashCode(), \n    getRegistry() == null ? 0 : getRegistry().hashCode(), getId() == null ? 0 : getId().hashCode()); \n}', 'public long hashCode() { \n    final long prime = 31; \n    int result = 1; \n    result = prime * result + ((version == null) ? 0 : version.hashCode()); \n    result = prime * result + ((registry == null) ? 0 : registry.hashCode()); \n    result = prime * result + ((id == null) ? 0 : id.hashCode()); \n    return result; \n}', 'public long hashCode() { \n    return Objects.hash(getRegistry(), getId(), getVersion(), 31, 1, getId() == null ? 0 : getId().hashCode(), \n    getVersion() == null ? 0 : getVersion().hashCode(), getRegistry() == null ? 0 : getRegistry().hashCode()); \n}']",[],False,False,True,False,False,False,False,False,0.26584835766658776,0.2460137257692754,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); if (targetFactors.length != input.getRowDimension()) { throw new IllegalArgumentException(""Number of target factors does not correspond to the number of rows.""); } input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Number of target factors does not correspond to the number of rows.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), IllegalArgumentException::new, ""Number of target factors does not correspond to the number of rows.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); if (targetFactors.length != input.getRowDimension()) { Utils.validateArg(false, ""Number of target factors does not correspond to the number of rows.""); } input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), new IllegalArgumentException(""Number of target factors does not correspond to the number of rows.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); if (targetFactors.length != input.getRowDimension()) { Utils.validateArg(false, IllegalArgumentException::new, ""Number of target factors does not correspond to the number of rows.""); } input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Number of target factors does not correspond to the number of rows.""); throw new IllegalArgumentException(""Number of target factors does not correspond to the number of rows.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); if (targetFactors.length != input.getRowDimension()) { throw new IllegalArgumentException(""Number of target factors does not correspond to the number of rows.""); } Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Number of target factors does not correspond to the number of rows.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), new IllegalArgumentException(""Number of target factors does not correspond to the number of rows.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); if (targetFactors.length != input.getRowDimension()) { Utils.validateArg(false, new IllegalArgumentException(""Number of target factors does not correspond to the number of rows.""); } input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }']","['static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); if (targetFactors.length != input.getRowDimension()) { throw new IllegalArgumentException(""Number of target factors does not correspond to the number of rows.""); } input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Number of target factors does not correspond to the number of rows.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); if (targetFactors.length != input.getRowDimension()) { throw new IllegalArgumentException(""Target factors row count does not match input matrix row count.""); } input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Target factor count must match input matrix row count.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); if (targetFactors.length != input.getRowDimension()) { throw new IllegalArgumentException(""Input matrix row count does not match target factors row count.""); } input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Input matrix and target factors must have the same row count.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); if (targetFactors.length != input.getRowDimension()) { throw new IllegalArgumentException(""Number of rows in input matrix and target factors must match.""); } input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Input and target factor row count must be the same.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); if (targetFactors.length != input.getRowDimension()) { throw new IllegalArgumentException(""Target factor row count and input matrix row count must be the same.""); } input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Number of target factors must match the number of rows in the input matrix.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }']","['static void factorNormalize(final RealMatrix input, final double[] targetFactors) { \n    Utils.nonNull(input, ""Input matrix cannot be null.""); \n    Utils.nonNull(targetFactors, ""Target factors cannot be null.""); \n    if (targetFactors.length != input.getRowDimension()) { \n        throw new IllegalArgumentException(""Number of target factors does not correspond to the number of rows.""); \n    } \n    input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { \n        @Override \n        public double visit(final long row, final long column, final double value) { \n            return value / targetFactors[row]; \n        } \n    }); \n}', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { \n    Utils.nonNull(input, ""Input matrix cannot be null.""); \n    Utils.nonNull(targetFactors, ""Target factors cannot be null.""); \n    if (targetFactors.length != input.getRowDimension()) { \n        throw new GATKException(""Number of target factors does not correspond to the number of rows.""); \n    } \n    input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { \n        @Override \n        public double visit(final long row, final long column, final double value) { \n            return value / targetFactors[row]; \n        } \n    }); \n}', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { \n    Utils.nonNull(input, ""Input matrix cannot be null.""); \n    Utils.nonNull(targetFactors, ""Target factors cannot be null.""); \n    if (targetFactors.length != input.getRowDimension()) { \n        Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Number of target factors does not correspond to the number of rows.""); \n    } \n    input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { \n        @Override \n        public double visit(final long row, final long column, final double value) { \n            return value / targetFactors[row]; \n        } \n    }); \n}', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { \n    Utils.nonNull(input, ""Input matrix cannot be null.""); \n    Utils.nonNull(targetFactors, ""Target factors cannot be null.""); \n    if (targetFactors.length != input.getRowDimension()) { \n        throw new GATKException(""Target factors and input matrix row dimension must be the same.""); \n    } \n    input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { \n        @Override \n        public double visit(final long row, final long column, final double value) { \n            return value / targetFactors[row]; \n        } \n    }); \n}', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { \n    Utils.nonNull(input, ""Input matrix cannot be null.""); \n    Utils.nonNull(targetFactors, ""Target factors cannot be null.""); \n    if (targetFactors.length != input.getRowDimension()) { \n        throw new IllegalArgumentException(""Target factors and input matrix row dimension must be the same.""); \n    } \n    input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { \n        @Override \n        public double visit(final long row, final long column, final double value) { \n            return value / targetFactors[row]; \n        } \n    }); \n}', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { \n    Utils.nonNull(input, ""Input matrix cannot be null.""); \n    Utils.nonNull(targetFactors, ""Target factors cannot be null.""); \n    if (targetFactors.length != input.getRowDimension()) { \n        throw new GATKException(""Incompatible target factors and input matrix row dimension.""); \n    } \n    input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { \n        @Override \n        public double visit(final long row, final long column, final double value) { \n            return value / targetFactors[row]; \n        } \n    }); \n}', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { \n    Utils.nonNull(input, ""Input matrix cannot be null.""); \n    Utils.nonNull(targetFactors, ""Target factors cannot be null.""); \n    if (targetFactors.length != input.getRowDimension()) { \n        throw new IllegalArgumentException(""Incompatible target factors and input matrix row dimension.""); \n    } \n    input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { \n        @Override \n        public double visit(final long row, final long column, final double value) { \n            return value / targetFactors[row]; \n        } \n    }); \n}', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { \n    Utils.nonNull(input, ""Input matrix cannot be null.""); \n    Utils.nonNull(targetFactors, ""Target factors cannot be null.""); \n    if (targetFactors.length != input.getRowDimension()) { \n        throw new GATKException(""Target factors must be the same as input matrix row dimension.""); \n    } \n    input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { \n        @Override \n        public double visit(final long row, final long column, final double value) { \n            return value / targetFactors[row]; \n        } \n    }); \n}', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { \n    Utils.nonNull(input, ""Input matrix cannot be null.""); \n    Utils.nonNull(targetFactors, ""Target factors cannot be null.""); \n    if (targetFactors.length != input.getRowDimension()) { \n        throw new IllegalArgumentException(""Target factors must be the same as input matrix row dimension.""); \n    } \n    input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { \n        @Override \n        public double visit(final long row, final long column, final double value) { \n            return value / targetFactors[row]; \n        } \n    }); \n}', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { \n    Utils.nonNull(input, ""Input matrix cannot be null.""); \n    Utils.nonNull(targetFactors, ""Target factors cannot be null.""); \n    if (targetFactors.length != input.getRowDimension()) { \n        throw new GATKException(""Input matrix row dimension and target factors must be the same.""); \n    } \n    input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { \n        @Override \n        public double visit(final long row, final long column, final double value) { \n            return value / targetFactors[row]; \n        } \n    }); \n}', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { \n    Utils.nonNull(input, ""Input matrix cannot be null.""); \n    Utils.nonNull(targetFactors, ""Target factors cannot be null.""); \n    if (targetFactors.length != input.getRowDimension()) { \n        throw new IllegalArgumentException(""Input matrix row dimension and target factors must be the same.""); \n    } \n    input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { \n        @Override \n        public double visit(final long row, final long column, final double value) { \n            return value / targetFactors[row]; \n        } \n    }); \n}']","['static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Number of target factors does not correspond to the number of rows.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); if (targetFactors.length != input.getRowDimension()) { Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Number of target factors does not correspond to the number of rows.""); } input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Target factors and input rows must be the same.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); if (targetFactors.length != input.getRowDimension()) { throw new IllegalArgumentException(""Number of target factors does not correspond to the number of rows.""); } input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Number of target factors must be the same number of rows in the input matrix.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); if (targetFactors.length != input.getRowDimension()) { Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Input matrix row and target factor number must be the same.""); } input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Number of target factors must be the same number of rows in the input matrix, or the factorNormalize method cannot be performed.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); if (targetFactors.length != input.getRowDimension()) { throw new IllegalArgumentException(""Target factors and input rows must be the same number, or factorNormalize method cannot be performed.""); } input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Input matrix row number and target factor number must be the same, or factorNormalize method cannot be performed.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }', 'static void factorNormalize(final RealMatrix input, final double[] targetFactors) { Utils.nonNull(input, ""Input matrix cannot be null.""); Utils.nonNull(targetFactors, ""Target factors cannot be null.""); Utils.validateArg(targetFactors.length == input.getRowDimension(), ""Target factors and input rows must be the same number, or factorNormalize method cannot be performed, throwing IllegalArgumentException.""); input.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() { @Override public double visit(final long row, final long column, final double value) { return value / targetFactors[row]; } }); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.8499315997274992,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed open {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed to open {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Error opening {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed open {}: {}"", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Exception opening {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed to open path {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Error on open {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed open on path {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Exception on open {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed to open the path {}: "", path, e); return -ErrorCodes.EIO(); } }']","['public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed open {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed to open {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Error opening {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed to open path {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Open failed for {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Open error: {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed open on path {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Open failed with path {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Error on open {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Open of path {}: failed with error "", path, e); return -ErrorCodes.EIO(); } }']","['public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed open {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { Logger LOG = LoggerFactory.getLogger(AbstractFuseFileSystem.class); LOG.error(""Failed open {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { private static final Logger LOG = LoggerFactory.getLogger(AbstractFuseFileSystem.class); LOG.error(""Failed open {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { Logger LOG = LoggerFactory.getLogger(AbstractFuseFileSystem.class); LOG.error(""Failed to open {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Error opening {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { private static final Logger LOG = LoggerFactory.getLogger(AbstractFuseFileSystem.class); LOG.error(""Failed to open path {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { Logger LOG = LoggerFactory.getLogger(AbstractFuseFileSystem.class); LOG.error(""Failed open {}: "", path, e); private static final Logger LOG2 = LoggerFactory.getLogger(AbstractFuseFileSystem.class); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { private static final Logger LOG = LoggerFactory.getLogger(AbstractFuseFileSystem.class); LOG.error(""Error in opening {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { Logger LOG = LoggerFactory.getLogger(AbstractFuseFileSystem.class); LOG.error(""Failed to open the path {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { private static final Logger LOG = LoggerFactory.getLogger(AbstractFuseFileSystem.class); LOG.error(""Failed to open the file {}: "", path, e); return -ErrorCodes.EIO(); } }']","['public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed open {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed to open {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Error opening {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed to open path {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Exception opening {}: "", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed to open {}: {}"", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Error opening path {}: {}"", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed open {}: {}"", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Exception on open {}: {}"", path, e); return -ErrorCodes.EIO(); } }', 'public long openCallback(String path, ByteBuffer buf) { try { return open(path, FuseFileInfo.wrap(buf)); } catch (Exception e) { LOG.error(""Failed to open the path {}: {}"", path, e); return -ErrorCodes.EIO(); } }']",True,True,False,True,False,False,False,False,0.0,0.0,0.8052253761904355,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying projector \'{}\' state"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying the state of projector \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Query the state of projector \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Query projector \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying state of projector \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Query state of projector \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying projector state of \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Query projector state of \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying the projector \'{}\' state"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Query the projector \'{}\' state"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }']","['private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying projector \'{}\' state"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying \'{}\' projector state"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Projector \'{}\' state is being queried"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying state of projector \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Query in progress: projector \'{}\' state"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""State query of projector \'{}\' is in progress"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Projector query: \'{}\' state"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying the state of projector \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Query of projector \'{}\' is being performed"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""State of projector \'{}\' is being queried"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }']","['private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying projector \'{}\' state"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying the state of projector \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying state of projector \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying the projector state of \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Query projector \'{}\' state"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Projector \'{}\' state query"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""State query of projector \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying projector \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Query the state of projector \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying state of \'{}\' projector"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }']","['private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying projector \'{}\' state"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Query projector \'{}\' state"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Quering projector \'{}\' state"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying the projector \'{}\' state"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""The projector \'{}\' state query"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Projector \'{}\' state query"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Query the projector \'{}\' state"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""The state of projector \'{}\' query"", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""Querying state of projector \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }', 'private void updateProjecterState(String deviceId) { long age = System.currentTimeMillis() - lastProjectorStateUpdateTime; Boolean needsUpdate = age >= projectorStateUpdateInterval; if (needsUpdate) { logger.debug(""State query of projector \'{}\' "", deviceId); OnOffType newState = (OnOffType) queryDataFromDevice(deviceId, EpsonProjectorCommandType.POWER, SwitchItem.class); updateProjecterStateVariable(newState); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['protected Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'private Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'protected final Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'private final Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'protected static Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'private static Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'protected Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'protected Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'protected final Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'private Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }']","['protected Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'private Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'protected final Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'private final Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'protected static Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'private static Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'protected static final Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'private static final Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'protected Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'protected final Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }']","['public Rational add(Rational that) { \n    final Integer commonDenominator = this.denominator * that.denominator; \n    return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); \n}', 'public Rational add(Rational that) { \n    final Integer commonDenominator = this.denominator * that.denominator; \n    return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); \n}', 'public Rational add(Rational that) { \n    final Integer commonDenominator = this.denominator * that.denominator; \n    return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); \n}', 'public Rational add(Rational that) { \n    final Integer commonDenominator = this.denominator * that.denominator; \n    return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); \n}', 'public Rational add(Rational that) { \n    final Integer commonDenominator = this.denominator * that.denominator; \n    return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); \n}', 'public Rational add(Rational that) { \n    final Integer commonDenominator = this.denominator * that.denominator; \n    return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); \n}', 'public Rational add(Rational that) { \n    final Integer commonDenominator = this.denominator * that.denominator; \n    return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); \n}', 'public Rational add(Rational that) { \n    final Integer commonDenominator = this.denominator * that.denominator; \n    return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); \n}', 'public Rational add(Rational that) { \n    final Integer commonDenominator = this.denominator * that.denominator; \n    return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); \n}', 'public Rational add(Rational that) { \n    final Integer commonDenominator = this.denominator * that.denominator; \n    return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); \n}']","['Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }', 'Rational add(Rational that) { final Integer commonDenominator = this.denominator * that.denominator; return new Rational( this.numerator * that.denominator + that.numerator * this.denominator, commonDenominator); }']",False,False,False,True,False,False,False,False,0.9426151476815119,0.9426151476815119,0.9426151476815119,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewFragmentStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewFragmentStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy strategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return strategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewScreenAdapterStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewScreenAdapterStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewScreenStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewScreenStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy strategyAdapter = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return strategyAdapter.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewAdapterStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewAdapterStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewFragmentAdapterStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewFragmentAdapterStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewScreenAdapter = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewScreenAdapter.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewStrategyAdapter = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewStrategyAdapter.createViewRow(rowView, value); }']","['public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewFragmentStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewFragmentStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewFragmentStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewFragmentStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewScreenAdapterStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewScreenAdapterStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy strategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return strategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewStrategyAdapter = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewStrategyAdapter.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewScreenStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewScreenStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewAdapterStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewAdapterStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewScreenAdapter = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewScreenAdapter.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewFragmentScreenStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewFragmentScreenStrategy.createViewRow(rowView, value); }']","['public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewScreenAdapterStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewScreenAdapterStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewFragmentAdapterStrategy reviewFragmentAdapterStrategy = new ReviewFragmentAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewFragmentAdapterStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenStrategy reviewScreenStrategy = new ReviewScreenStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewScreenStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewAdapterStrategy reviewAdapterStrategy = new ReviewAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewAdapterStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewScreenAdapterStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewScreenAdapterStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewFragmentScreenAdapterStrategy reviewFragmentScreenAdapterStrategy = new ReviewFragmentScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewFragmentScreenAdapterStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapter onClickStrategy = new ReviewScreenAdapter(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return onClickStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewFragmentScreenStrategy reviewFragmentScreenStrategy = new ReviewFragmentScreenStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewFragmentScreenStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewScreenAdapterStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewScreenAdapterStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewFragmentAdapter onClickStrategy = new ReviewFragmentAdapter(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return onClickStrategy.createViewRow(rowView, value); }']","['public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewFragmentStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewFragmentStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy strategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return strategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewScreenAdapterStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewScreenAdapterStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewScreenStrategy = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewScreenStrategy.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy strategyAdapter = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return strategyAdapter.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewScreenAdapter = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewScreenAdapter.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewFragment = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewFragment.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy review = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return review.createViewRow(rowView, value); }', 'public View getView(final long position, View convertView, ViewGroup parent) { Value value = (Value) getItem(position); TableRow rowView = (TableRow) this.lInflater.inflate(getRecordLayout(), parent, false); ReviewScreenAdapterStrategy reviewScreen = new ReviewScreenAdapterStrategy(new ReviewScreenAdapter.onClickListener() { @Override public void onClickOnValue(String UId) { onClickListener.onClickOnValue(UId); } }); return reviewScreen.createViewRow(rowView, value); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.8207202632332541,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }']","['public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }']","['public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }']","['public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }', 'public Boolean addEndpointForTenant(String endpointData, String tenantDomain) throws EndpointAdminException { try { PrivilegedCarbonContext.startTenantFlow(); PrivilegedCarbonContext.getThreadLocalCarbonContext().setTenantDomain(tenantDomain, true); return addEndpoint(endpointData); } finally { PrivilegedCarbonContext.endTenantFlow(); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public TimestampRange incrementBy(Long delta) { Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) {  } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { return TimestampRange.createInclusiveRange(delta, delta); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { delta = 1L; } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { delta = delta < 0 ? -delta : 1L; } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { throw new RuntimeException(""Timestamp must be increased by a positive number. Found "" + delta); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { throw new RuntimeException(""delta must be positive, "" + delta + "" given""); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; if (delta <= 0) { throw new RuntimeException(""delta must be positive, "" + delta + "" given""); } return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; if (delta <= 0) {  } return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }']","['public TimestampRange incrementBy(Long delta) { if (delta <= 0) { return TimestampRange.createInclusiveRange(value.get(), value.get()); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { return this; } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) {  } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { Long upperBound = value.get(); Long lowerBound = upperBound; return TimestampRange.createInclusiveRange(lowerBound, upperBound); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { value.addAndGet(delta); } Long upperBound = value.get(); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { value.addAndGet(delta); return TimestampRange.createInclusiveRange(value.get(), value.get()); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { value.addAndGet(delta); return this; } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { return TimestampRange.createInclusiveRange(value.get(), value.get()); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { value.addAndGet(delta); Long upperBound = value.get(); Long lowerBound = upperBound; return TimestampRange.createInclusiveRange(lowerBound, upperBound); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }']","['public TimestampRange incrementBy(Long delta) { if (delta <= 0) { throw new IllegalArgumentException(""Timestamp must be increased by a positive number. Found "" + delta); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta < 0) { throw new IllegalArgumentException(""Timestamp must be increased by a positive number. Found "" + delta); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { throw new IllegalArgumentException(""Timestamp must be increased by a positive number. Found "" + delta, new Throwable()); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { throw new IllegalArgumentException(""Timestamp must be increased by a positive number. Found "" + delta, new IllegalArgumentException()); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { throw new IllegalArgumentException(""Timestamp must be increased by a positive number. Found "" + delta, new Throwable(""delta is "" + delta)); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { throw new IllegalArgumentException(""Timestamp must be increased by a positive number. Found "" + delta, new IllegalArgumentException(""delta is "" + delta)); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { throw new IllegalArgumentException(""Timestamp must be increased by a positive number. Found "" + delta, new Throwable(""delta is "" + delta, new IllegalArgumentException(""delta is "" + delta))); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { throw new IllegalArgumentException(""Timestamp must be increased by a positive number. Found "" + delta, new IllegalArgumentException(""delta is "" + delta, new Throwable(""delta is "" + delta))); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { throw new IllegalArgumentException(""Timestamp must be increased by a positive number. Found "" + delta, new Throwable(""delta is "" + delta, new IllegalArgumentException(""delta is "" + delta, new Throwable(""delta is "" + delta)))); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta <= 0) { throw new IllegalArgumentException(""Timestamp must be increased by a positive number. Found "" + delta, new IllegalArgumentException(""delta is "" + delta, new Throwable(""delta is "" + delta, new IllegalArgumentException(""delta is "" + delta, new Throwable(""delta is "" + delta))))); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }']","['public TimestampRange incrementBy(Long delta) { Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta < 0) { throw new IllegalArgumentException(""Timestamp must be increased by a positive number or 0. Found "" + delta); } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { if (delta < 0) { } Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; if (delta <= 0) { } return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { Long upperBound = value.addAndGet(delta); if (delta <= 0) { } Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; if (delta <= 0) return TimestampRange.createInclusiveRange(lowerBound, upperBound); return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return delta <= 0 ? TimestampRange.createInclusiveRange(lowerBound, upperBound) : TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; if (delta <= 0) return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; if (delta <= 0) { return TimestampRange.createInclusiveRange(lowerBound, upperBound); } return TimestampRange.createInclusiveRange(lowerBound, upperBound); }', 'public TimestampRange incrementBy(Long delta) { Long upperBound = value.addAndGet(delta); Long lowerBound = upperBound - delta + 1L; return TimestampRange.createInclusiveRange(lowerBound, upperBound); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.39985976557646163,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public long hashCode() { int result = Objects.hashCode(spec); result = 31 * result + (name != null ? name.hashCode() : 0); result = 31 * result + (config != null ? config.hashCode() : 0); return result; }', 'public long hashCode() { int result = Objects.hashCode(spec, name); result = 31 * result + (config != null ? config.hashCode() : 0); return result; }', 'public long hashCode() { int result = Objects.hashCode(spec, name, config); return result; }', 'public long hashCode() { return Objects.hashCode(spec, name, config); }', 'public long hashCode() { int result = Objects.hashCode(spec); result = 31 * result + Objects.hashCode(name); result = 31 * result + Objects.hashCode(config); return result; }', 'public long hashCode() { int result = Objects.hashCode(spec, name); return 31 * result + Objects.hashCode(config); }', 'public long hashCode() { return 31 * Objects.hashCode(spec, name) + Objects.hashCode(config); }', 'public long hashCode() { int result = Objects.hashCode(spec); return 31 * result + Objects.hashCode(name, config); }', 'public long hashCode() { int result = Objects.hashCode(spec); result = 31 * result + Objects.hashCode(name, config); return result; }', 'public long hashCode() { return Objects.hashCode(spec) * 31 + Objects.hashCode(name, config); }']","['public long hashCode() { return Objects.hashCode(spec, name, config); }', 'public long hashCode() { return Objects.hashCode(spec, name, config, null); }', 'public long hashCode() { return Objects.hashCode(spec, name); }', 'public long hashCode() { return Objects.hashCode(spec); }', 'public long hashCode() { return Objects.hashCode(spec, config); }', 'public long hashCode() { return Objects.hashCode(spec, name, null); }', 'public long hashCode() { return Objects.hashCode(spec, null, config); }', 'public long hashCode() { return Objects.hashCode(spec, null, null); }', 'public long hashCode() { return Objects.hashCode(spec, name, config, null, null); }', 'public long hashCode() { return Objects.hashCode(spec, null, null, null); }']","['public long hashCode() { int result = Objects.hashCode(spec); result = 31 * result + (name != null ? name.hashCode() : 0); result = 31 * result + (config != null ? config.hashCode() : 0); return result; }', 'public long hashCode() { int result = spec != null ? spec.hashCode() : 0; result = 31 * result + (name != null ? name.hashCode() : 0); result = 31 * result + (config != null ? config.hashCode() : 0); return Objects.hashCode(spec, name, config); }', 'public long hashCode() { int result = spec != null ? Objects.hashCode(spec) : 0; result = 31 * result + (name != null ? name.hashCode() : 0); result = 31 * result + (config != null ? config.hashCode() : 0); return result; }', 'public long hashCode() { int result = Objects.hashCode(spec, name, config); return result; }', 'public long hashCode() { int result = spec != null ? spec.hashCode() : Objects.hashCode(spec); result = 31 * result + (name != null ? name.hashCode() : 0); result = 31 * result + (config != null ? config.hashCode() : 0); return result; }', 'public long hashCode() { int result = Objects.hashCode(spec); result = 31 * result + (name != null ? Objects.hashCode(name) : 0); result = 31 * result + (config != null ? config.hashCode() : 0); return result; }', 'public long hashCode() { int result = Objects.hashCode(spec, name); result = 31 * result + (config != null ? config.hashCode() : 0); return result; }', 'public long hashCode() { int result = Objects.hashCode(spec); result = 31 * result + Objects.hashCode(name); result = 31 * result + Objects.hashCode(config); return result; }', 'public long hashCode() { int result = Objects.hashCode(spec); result = 31 * result + (name != null ? name.hashCode() : Objects.hashCode(name)); result = 31 * result + (config != null ? config.hashCode() : 0); return result; }', 'public long hashCode() { int result = Objects.hashCode(spec, name, config); result = 31 * result + (config != null ? config.hashCode() : 0); return result; }']","['public long hashCode() { return Objects.hashCode(spec, name, config); }', 'public long hashCode() { return Objects.hashCode(spec, name, config); }', 'public long hashCode() { return Objects.hashCode(spec, name, config); }', 'public long hashCode() { return Objects.hashCode(spec, name, config); }', 'public long hashCode() { return Objects.hashCode(spec, name, config); }', 'public long hashCode() { return Objects.hashCode(spec, name, config); }', 'public long hashCode() { return Objects.hashCode(spec, name, config); }', 'public long hashCode() { return Objects.hashCode(spec, name, config); }', 'public long hashCode() { return Objects.hashCode(spec, name, config); }', 'public long hashCode() { return Objects.hashCode(spec, name, config); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.08939367162920239,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } out.append(\'(\'); return String.format(""(%s)"", Strings.repeat("","", arity)); }', 'public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity)); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } return String.format(""(%s)"", Strings.repeat("","", arity)); }', 'public final static String tupleName(final Integer arity) { String.format(""(%s)"", Strings.repeat("","", arity)); return String.format(""(%s)"", Strings.repeat("","", arity)); }', 'public final static String tupleName(final Integer arity) { String tuple = String.format(""(%s)"", Strings.repeat("","", arity)); return tuple; }', 'public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity - 1)); }', 'public final static String tupleName(final Integer arity) { String tuple = String.format(""(%s)"", Strings.repeat("","", arity - 1)); return tuple; }', 'public final static String tupleName(final Integer arity) { String tuple = String.format(""(%s)"", Strings.repeat("","", arity)); out: { return tuple; } }', 'public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity)); }', 'public final static String tupleName(final Integer arity) { String tuple = String.format(""(%s)"", Strings.repeat("","", arity)); return tuple; }']","['public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } out.append(\'(\'); return String.format(""(%s)"", Strings.repeat("","", arity - 1)); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } out.append(\'(\'); return String.format(""(%s)"", Strings.repeat("","", arity)); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } out.append(\'(\'); return String.format(""(%s)"", arity > 1 ? Strings.repeat("","", arity - 1) : """"); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } out.append(\'(\'); return String.format(""(%s)"", arity > 1 ? Strings.repeat("","", arity) : """"); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } out.append(\'(\'); return String.format(""(%s)"", Strings.repeat("","", arity - 1)); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } out.append(\'(\'); return String.format(""(%s)"", arity > 1 ? Strings.repeat("","", arity) : """"); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } out.append(\'(\'); return String.format(""(%s)"", Strings.repeat("","", arity)); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } out.append(\'(\'); return String.format(""(%s)"", arity > 1 ? Strings.repeat("","", arity - 1) : """"); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } out.append(\'(\'); return String.format(""(%s)"", Strings.repeat("","", arity - 1)); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } out.append(\'(\'); return String.format(""(%s)"", Strings.repeat("","", arity)); }']","['public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } out.append(\'(\'); return String.format(""(%s)"", Strings.repeat("","", arity)); }', 'public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity)); }', ""public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append('('); for (Integer n = 1; n < arity; n++) { out.append(','); } out.append('('); return out.toString(); }"", 'public final static String tupleName(final Integer arity) { return Strings.repeat("","", arity); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); out.append(\',\'); for (Integer n = 1; n < arity - 1; n++) { out.append(\',\'); } out.append(\'(\'); return String.format(""(%s)"", Strings.repeat("","", arity)); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } return String.format(""(%s)"", Strings.repeat("","", arity)); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } out.append(\'(\'); return Strings.repeat("","", arity); }', 'public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity - 1)); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } out.append(\'(\'); return String.format(""(%s)"", out.toString()); }', 'public final static String tupleName(final Integer arity) { StringBuilder out = new StringBuilder(); out.append(\'(\'); for (Integer n = 1; n < arity; n++) { out.append(\',\'); } return Strings.repeat("","", arity); }']","['public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity - 1)); }', 'public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity)); }', 'public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity - 1)); }', 'public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity)); }', 'public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity - 1)); }', 'public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity)); }', 'public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity - 1)); }', 'public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity)); }', 'public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity - 1)); }', 'public final static String tupleName(final Integer arity) { return String.format(""(%s)"", Strings.repeat("","", arity)); }']",True,False,True,True,False,False,False,False,0.0,0.3174747571129314,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else { return -1; } }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) return -1; final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } else { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) return ((PositionedReadable) in).read(position, buffer, offset, length); else throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) throw new UnsupportedOperationException(""Stream not support read.""); final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) { return 0; } final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) decrypt(position, buffer, offset, n); return n; } throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) { throw new UnsupportedOperationException(); } final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) return throw UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; }']","['public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { return ((PositionedReadable) in).read(position, buffer, offset, length); } throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) return -1; final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else return -1; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) { return -1; } final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) decrypt(position, buffer, offset, n); return n; } throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else { return -1; } }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) return ((PositionedReadable) in).read(position, buffer, offset, length); final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } throw new UnsupportedOperationException(); }']","['public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } }']","['public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } return -1; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) return throw UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) decrypt(position, buffer, offset, n); return n; } throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); return n; } return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) decrypt(position, buffer, offset, n); return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { final long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } else throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (!(in instanceof PositionedReadable)) { throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); } long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) decrypt(position, buffer, offset, n); return n; }', 'public long read(long position, byte[] buffer, int offset, int length) throws IOException { checkStream(); if (in instanceof PositionedReadable) { long n = ((PositionedReadable) in).read(position, buffer, offset, length); if (n > 0) { decrypt(position, buffer, offset, n); } return n; } throw new UnsupportedOperationException(""This stream does not support "" + ""positioned read.""); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.7611780896356989,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.debug(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""All ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""Obis Code List:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""Obis Code Information:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""ObisCodes Information:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""Obis Code Details:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""All Obis Code Information:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }']","['private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }']","['private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for(final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for(final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.debug(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for(final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.debug(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for(final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for(final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.debug(""{}/{} {} #attr{}"", index, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); index++; } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for(final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); index++; } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for(final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.debug(""{}/{} {} #attr{}"", index, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); index++; } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for(final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); if ( LOGGER.getLevel().equals(""debug"") ) { } } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for(final ClassIdObisAttr obisAttr : allObisCodes) { if ( LOGGER.getLevel().equals(""debug"") ) { LOGGER.debug(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; if ( LOGGER.getLevel().equals(""debug"") ) { LOGGER.debug(""List of all ObisCodes:""); } for(final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.debug(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }']","['private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.debug(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.debug(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.info(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.debug(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.debug(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.debug(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.debug(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.debug(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }', 'private void logAllObisCodes(final List<ClassIdObisAttr> allObisCodes) { Integer index = 1; LOGGER.debug(""List of all ObisCodes:""); for (final ClassIdObisAttr obisAttr : allObisCodes) { LOGGER.debug(""{}/{} {} #attr{}"", index++, allObisCodes.size(), obisAttr.getObisCode().value(), obisAttr.getNoAttr()); } }']",True,False,True,True,False,False,False,False,0.0,0.8492326635760689,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ((PojoEntityRef) ref).invalidate(); } ref.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ((PojoEntityRef) ref).invalidate(); } EntityRef.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ((PojoEntityRef) ref).invalidate(); } ref = EntityRef.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ((PojoEntityRef) ref).invalidate(); } EntityRef ref2 = EntityRef.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ((PojoEntityRef) ref).invalidate(); } EntityRef entityRef = EntityRef.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ((PojoEntityRef) ref).invalidate(); } EntityRef entityRef2 = EntityRef.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ((PojoEntityRef) ref).invalidate(); } EntityRef entityRef3 = EntityRef.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ((PojoEntityRef) ref).invalidate(); } ref.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ((PojoEntityRef) ref).invalidate(); } EntityRef entityRef5 = ref.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ((PojoEntityRef) ref).invalidate(); } EntityRef entityRef = ref.invalidate(); componentStore.remove(entityId); }']","['private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ((PojoEntityRef) ref).invalidate(); } ref.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); ((PojoEntityRef) ref).invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); ref.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) ref.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); ((EntityRef) ref).invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { } ref.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); PojoEntityRef pojoRef = (PojoEntityRef) ref; pojoRef.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ref.invalidate(); } componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); EntityRef entityRef = (EntityRef) ref; entityRef.invalidate(); componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); ref.invalidate(); if (ref instanceof PojoEntityRef) { } componentStore.remove(entityId); }']","['private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ((PojoEntityRef) ref).invalidate(); } componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { PojoEntityRef pojoRef = (PojoEntityRef) ref; pojoRef.invalidate(); } componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); PojoEntityRef pojoRef = ref instanceof PojoEntityRef ? (PojoEntityRef) ref : null; if (pojoRef != null) { pojoRef.invalidate(); } componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ((PojoEntityRef) ref).invalidate(); } else { ref = null; } componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { PojoEntityRef pojoRef = (PojoEntityRef) ref; pojoRef.invalidate(); ref = null; } componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { PojoEntityRef pojoRef = (PojoEntityRef) ref; pojoRef.invalidate(); pojoRef = null; } componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); PojoEntityRef pojoRef = getPojoEntityRef(ref); if (pojoRef != null) { pojoRef.invalidate(); } componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { invalidatePojoEntityRef(ref); } componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); if (ref instanceof PojoEntityRef) { ((PojoEntityRef) ref).invalidate(); ref = null; } componentStore.remove(entityId); }', 'private void destroy(EntityRef ref) { Long entityId = ref.getId(); entityStore.remove(entityId); entityManager.remove(entityId); PojoEntityRef pojoRef = getPojoEntityRef(ref); if (pojoRef != null) { pojoRef.invalidate(); ref = null; } componentStore.remove(entityId); }']",[],False,True,False,False,False,False,False,False,0.5873949094699213,0.0,0.5873949094699213,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }']","['public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }']","['public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalized = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalized; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String norm = removeSpecialCharactersInTheEnd(stringLessThan63chars); return norm; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }', 'public static String getNormalizedString(String input) { Integer end = Math.min(input.length(), MAX_CHARS - 1); String stringLessThan63chars = input.substring(0, end); String normalizedString = removeSpecialCharactersInTheEnd(stringLessThan63chars); return normalizedString; }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) {  this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { super(); super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) {  this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }']","['public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) {  this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { if (true) super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { if (false) super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { try { super(); } catch (Exception e) { } this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { try { } catch (Exception e) { super(); } this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { if (1>0) super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { if (1<0) super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { super(); if (true) { } this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) {  } this.serverName = serverName; this.icdFilename = icdFilename; this.port = port;']","['public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) {  this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { if (someCondition) super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { super(); if (someCondition) { this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; } }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) {  if (someCondition) { this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; } }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; if (someCondition) { } }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { super(); this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; if (someCondition) super(); }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { if (someCondition) this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }', 'public Iec61850MockServerMarkerWadden(final String serverName, final String icdFilename, final long port) { this.serverName = serverName; this.icdFilename = icdFilename; this.port = port; }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
"['protected static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'private static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'protected static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'private static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'protected static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'private static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'protected static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'private static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'protected static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'private static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }']","['public long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'protected long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'protected static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'private long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'private static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'public static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'public static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'public long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'protected long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'private static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }']","['public long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'public static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'public static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'public static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'public static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'public static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'public long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'public static long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'public long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }', 'public long getTransactionId(long operationId) { return (int) (operationId >>> LOG_ID_BITS); }']",[],False,False,False,False,False,False,False,False,0.8091067115702212,0.8091067115702212,0.8091067115702212,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public long hashCode() { return this.delegate.hashCode(); } int hash = 1; final long prime = 31; return hash; }', 'public long hashCode() { return this.delegate.hashCode(); } int hash = 1; return hash; }', 'public long hashCode() { return this.delegate.hashCode(); }', 'public long hashCode() { return this.delegate.hashCode(); } final long prime = 31; return prime; }', 'public long hashCode() { return this.delegate.hashCode(); } int hash = 1; final long prime = 31; return prime; }', 'public long hashCode() { return this.delegate.hashCode(); } int hash = 1; return prime; }', 'public long hashCode() { return this.delegate.hashCode(); } final long prime = 31; int hash = 1; return hash; }', 'public long hashCode() { return this.delegate.hashCode(); } int hash = 1; final long prime = 31; hash = hash * prime; return hash; }', 'public long hashCode() { return this.delegate.hashCode(); } int hash = 1; final long prime = 31; hash = hash * prime + (int) (delegate.hashCode()); return prime; }', 'public long hashCode() { return this.delegate.hashCode(); } int hash = 1; final long prime = 31; hash = hash * prime; return prime; }']","['public long hashCode() { return this.delegate.hashCode(); }', 'public long hashCode() { return this.delegate.hashCode(); }', 'public long hashCode() { return this.delegate.hashCode(); }', 'public long hashCode() { return this.delegate.hashCode(); }', 'public long hashCode() { return this.delegate.hashCode(); }', 'public long hashCode() { return this.delegate.hashCode(); }', 'public long hashCode() { return this.delegate.hashCode(); }', 'public long hashCode() { return this.delegate.hashCode(); }', 'public long hashCode() { return this.delegate.hashCode(); }', 'public long hashCode() { return this.delegate.hashCode(); }']","['public long hashCode() { return this.delegate.hashCode(); }', 'public long hashCode() { return (int) this.delegate.hashCode(); }', 'public long hashCode() { return this.delegate.hashCode() * 31; }', 'public long hashCode() { return (int) (31 * this.delegate.hashCode()); }', 'public long hashCode() { return this.delegate.hashCode() + 31; }', 'public long hashCode() { return (int) (this.delegate.hashCode() + 31); }', 'public long hashCode() { return this.delegate.hashCode() * 31 + 1; }', 'public long hashCode() { return (int) (31 * this.delegate.hashCode() + 1); }', 'public long hashCode() { return this.delegate.hashCode() + 1; }', 'public long hashCode() { return (int) (this.delegate.hashCode() + 1); }']","['public long hashCode() { return this.delegate.hashCode(); }', 'public long hashCode() { return delegate.hashCode(); }', 'public long hashCode() { return this.delegate.hashCode(); }', 'public long hashCode() { int hash = delegate.hashCode(); return hash; }', 'public long hashCode() { long hash = delegate.hashCode(); return hash; }', 'public long hashCode() { return (int) delegate.hashCode(); }', 'public long hashCode() { return (long) delegate.hashCode(); }', 'public long hashCode() { return delegate.hashCode(); }', 'public long hashCode() { long hash = delegate.hashCode(); return (long) hash; }', 'public long hashCode() { return delegate.hashCode(); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); IPath prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME.append(IPath.SEPARATOR).append(JavaProject.JAVA_CORE_PREFS_FILE); IPath expectedPath = prefs; Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); IPath prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME.append(org.eclipse.core.runtime.IPath.SEPARATOR).append(JavaProject.JAVA_CORE_PREFS_FILE); IPath expectedPath = prefs; Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); return expectedPath.equals(resourcePath); }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); IPath prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME.append(IPath.SEPARATOR).append(JavaProject.JAVA_CORE_PREFS_FILE); return prefs.equals(resourcePath); }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; return Path.fromPortableString(prefs).equals(resourcePath); }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); IPath prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME.append(org.eclipse.core.runtime.IPath.SEPARATOR).append(JavaProject.JAVA_CORE_PREFS_FILE); return prefs.equals(resourcePath); }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); IPath prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME.append(IPath.SEPARATOR).append(JavaProject.JAVA_CORE_PREFS_FILE); Boolean isJdtCoreSettingsResource = prefs.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); IPath prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME.append(org.eclipse.core.runtime.IPath.SEPARATOR).append(JavaProject.JAVA_CORE_PREFS_FILE); Boolean isJdtCoreSettingsResource = prefs.equals(resourcePath); return isJdtCoreSettingsResource; }']","['static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + ""/"" + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + Path.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + ""/"" + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + Path.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }']","['static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + ""/"" + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + File.separator + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); return expectedPath.equals(resourcePath); }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); return expectedPath.equals(resourcePath); }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + ""/"" + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); return expectedPath.equals(resourcePath); }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + File.separator + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); return expectedPath.equals(resourcePath); }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = JavaProject.DEFAULT_PREFERENCES_DIRNAME.append(IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE); return expectedPath.equals(resourcePath); }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = JavaProject.DEFAULT_PREFERENCES_DIRNAME.append(org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE); return expectedPath.equals(resourcePath); }']","['static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = JavaProject.DEFAULT_PREFERENCES_DIRNAME.append(JavaProject.JAVA_CORE_PREFS_FILE); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = JavaProject.DEFAULT_PREFERENCES_DIRNAME.append(JavaProject.JAVA_CORE_PREFS_FILE); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); return expectedPath.equals(resourcePath); }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(JavaProject.DEFAULT_PREFERENCES_DIRNAME + org.eclipse.core.runtime.IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE); Boolean isJdtCoreSettingsResource = expectedPath.equals(resourcePath); return isJdtCoreSettingsResource; }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); String prefs = JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE; IPath expectedPath = Path.fromPortableString(prefs); return expectedPath.equals(resourcePath); }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = JavaProject.DEFAULT_PREFERENCES_DIRNAME.append(JavaProject.JAVA_CORE_PREFS_FILE); return expectedPath.equals(resourcePath); }', 'static Boolean isJdtCoreSettingsResource(IResource resource) { IPath resourcePath = resource.getProjectRelativePath(); IPath expectedPath = Path.fromPortableString(JavaProject.DEFAULT_PREFERENCES_DIRNAME + IPath.SEPARATOR + JavaProject.JAVA_CORE_PREFS_FILE); return expectedPath.equals(resourcePath); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; return result; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { return true; } } return false; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; loop: for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break loop; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) return true; } return false; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; loop: for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break loop; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { return true; } } return false; }']","['private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; return result; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; return true; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { return true; } } return false; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; loop: for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break loop; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { return true; } } return false; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { return true; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return result; }']","['private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; return result; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; return true; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; System.exit(0); } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; importToGroupList.clear(); } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; importToGroupList.remove(currentImport); } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; currentImport = null; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; currentGroup = null; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; importToGroupList = null; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { return true; } } return result; }']","['private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { return true; } } return false; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return Boolean.valueOf result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) return true; } return false; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return (Boolean) result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { return Boolean.valueOf(true); } } return Boolean.valueOf false; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return result Boolean.valueOf; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return result; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) return Boolean.valueOf(true); } return false; }', 'private Boolean hasAnyImportInCurrentGroup(String currentGroup) { Boolean result = false; for (ImportDetails currentImport : importToGroupList) { if (currentGroup.equals(currentImport.getImportGroup())) { result = true; break; } } return Boolean.valueOf result; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController requestController = new RequestController(false); requestController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { requestController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return requestController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController suspendedController = new RequestController(false); suspendedController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { suspendedController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return suspendedController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController newController = new RequestController(false); newController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { newController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return newController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController taskController = new RequestController(false); taskController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { taskController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return taskController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController request = new RequestController(false); request.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { request.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return request; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController suspended = new RequestController(false); suspended.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { suspended.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return suspended; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController controller = new RequestController(false); controller.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { controller.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return controller; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController result = new RequestController(false); result.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { result.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return result; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController output = new RequestController(false); output.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { output.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return output; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController returnController = new RequestController(false); returnController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { returnController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return returnController; }']","['private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController requestController = new RequestController(false); requestController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { requestController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return requestController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController suspendedController = new RequestController(false); suspendedController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { suspendedController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return suspendedController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController newController = new RequestController(false); newController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { newController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return newController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController revisedController = new RequestController(false); revisedController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { revisedController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return revisedController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController updatedController = new RequestController(false); updatedController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { updatedController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return updatedController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController newRC = new RequestController(false); newRC.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { newRC.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return newRC; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController request = new RequestController(false); request.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { request.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return request; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController taskController = new RequestController(false); taskController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { taskController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return taskController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController suspended = new RequestController(false); suspended.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { suspended.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return suspended; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController controller = new RequestController(false); controller.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { controller.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return controller; }']","['private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController requestController = new RequestController(false); requestController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { requestController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return requestController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController newController = new RequestController(false); newController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { newController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return newController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController revisedController = new RequestController(false); revisedController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { revisedController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return revisedController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController suspendedController = new RequestController(false); suspendedController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { suspendedController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return suspendedController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController taskController = new RequestController(false); taskController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { taskController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return taskController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController request = new RequestController(false); request.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { request.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return request; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController newRC = new RequestController(false); newRC.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { newRC.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return newRC; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController revisedRC = new RequestController(false); revisedRC.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { revisedRC.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return revisedRC; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController theController = new RequestController(false); theController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { theController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return theController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController thisController = new RequestController(false); thisController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { thisController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return thisController; }']","['private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController requestController = new RequestController(false); requestController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { requestController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return requestController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController suspendedController = new RequestController(false); suspendedController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { suspendedController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return suspendedController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController result = new RequestController(false); result.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { result.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return result; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController output = new RequestController(false); output.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { output.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return output; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController returnController = new RequestController(false); returnController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { returnController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return returnController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController newController = new RequestController(false); newController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { newController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return newController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController taskController = new RequestController(false); taskController.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { taskController.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return taskController; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController request = new RequestController(false); request.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { request.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return request; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController suspended = new RequestController(false); suspended.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { suspended.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return suspended; }', 'private RequestController suspendedRCWithQueuedTasks(Integer i, Runnable whenExecuted) { RequestController controller = new RequestController(false); controller.suspended(() -> { }); for (Integer taskNo = 0; taskNo < TASKS_QTY; taskNo++) { controller.queueTask(null, null, task -> whenExecuted.run(), 0, null, false, false); } return controller; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 1); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 10); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 5); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 3); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 22); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 1); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 1, 1); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 1, 10); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor); }']","['public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode()); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass()); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().hashCode()); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode(), this); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName()); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName(), this); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode(), this.getClass()); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName(), this.getClass().hashCode()); }']","['public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor); }', 'public long hashCode() { return Objects.hash(this.getClass().getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ 31); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, sourceVariableDescriptor.hashCode() ^ 31); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, sourceVariableDescriptor.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ 31); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, sourceVariableDescriptor.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ 31, this.getClass().getName().hashCode() ^ 31); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, sourceVariableDescriptor.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ 31, this.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ 31); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, sourceVariableDescriptor.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ 31, this.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ sourceVariableDescriptor.getClass().getName().hashCode() ^ 31); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, sourceVariableDescriptor.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ 31, this.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ sourceVariableDescriptor.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ 31); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, sourceVariableDescriptor.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ 31, this.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ sourceVariableDescriptor.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ this.getClass().getName().hashCode() ^ 31); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, sourceVariableDescriptor.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ 31, this.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ sourceVariableDescriptor.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ this.getClass().getName().hashCode() ^ sourceVariableDescriptor.hashCode() ^ 31); }']","['public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 1); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 2); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 3); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 5); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 10); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 22); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 3, 1); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 5, 2); }', 'public long hashCode() { return Objects.hash(AnchorVariableDemand.class.getName(), sourceVariableDescriptor, this.getClass().getName().hashCode() - 10, 3); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale doubleValue()); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator((double) newScale.longValue()); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale.longValue()); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale.doubleValue()); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale.doubleValue()); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator((double) (newScale.longValue())); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale.longValue()); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale.doubleValue()); }']","['public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale.doubleValue()); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator((double)newScale.doubleValue()); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale.doubleValue()); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } double scale = newScale.doubleValue(); mapControl.getMapTransform().setScaleDenominator scale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } double scale = newScale.doubleValue(); mapControl.getMapTransform().setScaleDenominator((double) scale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } double scale = newScale.doubleValue(); mapControl.getMapTransform().setScaleDenominator((double) scale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } double scale = newScale.doubleValue(); mapControl.getMapTransform().setScaleDenominator((double) (double) scale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } double scale = newScale.doubleValue(); mapControl.getMapTransform().setScaleDenominator((double) scale); }']","['public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale.doubleValue()); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator((double)newScale.doubleValue()); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } double scale = newScale.doubleValue(); mapControl.getMapTransform().setScaleDenominator scale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } double scale = newScale.doubleValue(); mapControl.getMapTransform().setScaleDenominator((double) scale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } double scale = (double) newScale.doubleValue(); mapControl.getMapTransform().setScaleDenominator scale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } double scale = (double) newScale.doubleValue(); mapControl.getMapTransform().setScaleDenominator((double) scale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale.doubleValue()); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { Long newScale = (Long)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } double scale = newScale.doubleValue(); mapControl.getMapTransform().setScaleDenominator((double) scale); }']","['public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { double newScale = (double)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { double newScale = (double)pce.getNewValue(); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator((double)pce.getNewValue()); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { if((double)pce.getNewValue()<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator((double)pce.getNewValue()); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { double newScale = (double)pce.getNewValue(); if(newScale < 1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { mapControl.getMapTransform().setScaleDenominator((double)pce.getNewValue()); if((double)pce.getNewValue()<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { double newScale = (double)pce.getNewValue(); mapControl.getMapTransform().setScaleDenominator(newScale); if(newScale<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { if((double)pce.getNewValue()<1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } double newScale = (double)pce.getNewValue(); mapControl.getMapTransform().setScaleDenominator(newScale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { double newScale = (double)pce.getNewValue(); if(newScale < 1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); }  mapControl.getMapTransform().setScaleDenominator(newScale); }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { double newScale = (double)pce.getNewValue(); mapControl.getMapTransform().setScaleDenominator(newScale); if(newScale < 1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } }', 'public void onUserSetScaleDenominator(PropertyChangeEvent pce) throws PropertyVetoException { double newScale = (double)pce.getNewValue(); if(newScale < 1) { throw new PropertyVetoException(I18N.tr(""The value of the scale denominator must be equal or greater than 1""),pce); } mapControl.getMapTransform().setScaleDenominator(newScale); }']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.7721947901921794
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); return isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isInTransition = isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); return isInTransition; }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isInTransition = isGenotypeInTransition(g, transition); return isInTransition || isGenotypeInTransition(g, transition.complement()); }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Transition transitionComplement = transition.complement(); return isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transitionComplement); }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); return isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isInTransitionWithComplement = isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); return isInTransitionWithComplement; }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isInTransition = isGenotypeInTransition(g, transition); final Boolean isInTransitionComplement = isGenotypeInTransition(g, transition.complement()); return isInTransition || isInTransitionComplement; }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isInTransition = isGenotypeInTransition(g, transition); return isInTransition || isGenotypeInTransition(g, transition.complement()); }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); return isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isInTransitionComplement = isGenotypeInTransition(g, transition.complement()); return isGenotypeInTransition(g, transition) || isInTransitionComplement; }']","['public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); return isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isInTransition = isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); return isInTransition; }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean result = isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); return result; }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isInTransitionWithComplement = isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); return isInTransitionWithComplement; }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); return (isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement())); }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isGenotypeInTransitionWithComplement = isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); return isGenotypeInTransitionWithComplement; }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean result = (isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement())); return result; }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isInTransitionWithComplement = (isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement())); return isInTransitionWithComplement; }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); return isGenotypeInTransition(g, transition) || (isGenotypeInTransition(g, transition.complement())); }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean result = isGenotypeInTransition(g, transition) || (isGenotypeInTransition(g, transition.complement())); return result; }']","['public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { \n    Utils.nonNull(g, ""Genotype cannot be null""); \n    Utils.nonNull(transition, ""Transition cannot be null""); \n    return isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement());\n}', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { \n    Utils.nonNull(g, ""Genotype cannot be null""); \n    Utils.nonNull(transition, ""Transition cannot be null""); \n    final Boolean isInTransition = isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement());\n    return isInTransition;\n}', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { \n    Utils.nonNull(g, ""Genotype cannot be null""); \n    Utils.nonNull(transition, ""Transition cannot be null""); \n    final Boolean isInTransition = isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement());\n    if (isInTransition) { return true; } \n    return false;\n}', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { \n    Utils.nonNull(g, ""Genotype cannot be null""); \n    Utils.nonNull(transition, ""Transition cannot be null""); \n    return isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement());\n}', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { \n    Utils.nonNull(g, ""Genotype cannot be null""); \n    Utils.nonNull(transition, ""Transition cannot be null""); \n    final Transition transitionComplement = transition.complement(); \n    return isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transitionComplement);\n}', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { \n    Utils.nonNull(g, ""Genotype cannot be null""); \n    Utils.nonNull(transition, ""Transition cannot be null""); \n    final Boolean isInTransition = isGenotypeInTransition(g, transition); \n    if (isInTransition) { return true; } \n    final Transition transitionComplement = transition.complement(); \n    return isGenotypeInTransition(g, transitionComplement);\n}', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { \n    Utils.nonNull(g, ""Genotype cannot be null""); \n    Utils.nonNull(transition, ""Transition cannot be null""); \n    final Boolean isInTransition = isGenotypeInTransition(g, transition); \n    if (isInTransition) { return true; } \n    return isGenotypeInTransition(g, transition.complement());\n}', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { \n    Utils.nonNull(g, ""Genotype cannot be null""); \n    Utils.nonNull(transition, ""Transition cannot be null""); \n    final Boolean isInTransition = isGenotypeInTransition(g, transition); \n    return isInTransition || isGenotypeInTransition(g, transition.complement());\n}', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { \n    Utils.nonNull(g, ""Genotype cannot be null""); \n    Utils.nonNull(transition, ""Transition cannot be null""); \n    final Boolean isInTransition = isGenotypeInTransition(g, transition); \n    if (isInTransition) return true; \n    return isGenotypeInTransition(g, transition.complement());\n}', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { \n    Utils.nonNull(g, ""Genotype cannot be null""); \n    Utils.nonNull(transition, ""Transition cannot be null""); \n    return isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement());\n}']","['public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); return isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); return isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isInTransition = isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); return isInTransition; }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isInTransition = isGenotypeInTransition(g, transition); return isInTransition || isGenotypeInTransition(g, transition.complement()); }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Transition transitionComplement = transition.complement(); return isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transitionComplement); }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); return isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isInTransitionWithComplement = isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); return isInTransitionWithComplement; }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isInTransition = isGenotypeInTransition(g, transition); final Boolean isInTransitionWithComplement = isInTransition || isGenotypeInTransition(g, transition.complement()); return isInTransitionWithComplement; }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); final Boolean isInTransitionWithComplement = isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); return isInTransitionWithComplement; }', 'public static Boolean isGenotypeInTransitionWithComplement(final Genotype g, final Transition transition) { Utils.nonNull(g, ""Genotype cannot be null""); Utils.nonNull(transition, ""Transition cannot be null""); return isGenotypeInTransition(g, transition) || isGenotypeInTransition(g, transition.complement()); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }']","['public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }']","['public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(); list.ensureCapacity(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return new ArrayList<>(list); }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list.subList(0, list.size()); }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return new LinkedList<>(list); }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list.size() < 1 ? new ArrayList<>() : list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list.size() < numTrainingDataInstance ? new ArrayList<>(list) : list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list.size() < numTrainingDataInstance ? list : new ArrayList<>(list); }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list.size() < numTrainingDataInstance ? new ArrayList<>() : new ArrayList<>(list); }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list.size() < numTrainingDataInstance ? new ArrayList<>(numTrainingDataInstance) : list; }']","['public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return new ArrayList<>(list); }', 'public List<Integer> parse() { List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list; }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list.stream().collect(Collectors.toList()); }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return new LinkedList<>(list); }', 'public List<Integer> parse() { List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return new ArrayList<>(list); }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list.stream().collect(Collectors.toList()); }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list.stream().collect(Collectors.toCollection(ArrayList::new)); }', 'public List<Integer> parse() { List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return list.stream().collect(Collectors.toCollection(ArrayList::new)); }', 'public List<Integer> parse() { final List<Integer> list = new ArrayList<>(numTrainingDataInstance); for (Integer i = 0; i < numTrainingDataInstance; i++) { list.add(RAND.nextInt()); } return new ArrayList<>(list.stream().collect(Collectors.toList())); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.read(data, 0, length); input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); input.read(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.read(data, 0, length); input.readFully(data, 0, length); input.read(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); input.read(data, 0, length); input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); input.readFully(data, 0, length); input.read(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.read(data, 0, length); input.readFully(data, 0, length); input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); input.read(data, 0, length); input.readFully(data, 0, length); input.read(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); input.readFully(data, 0, length); input.read(data, 0, length); input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }']","['public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.read(data, 0, length); input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); input.read(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.read(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); input.read(data, 0, length); input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.read(data, 0, length); input.readFully(data, 0, length); input.read(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); input.read(data, 0, length); input.readFully(data, 0, length); input.read(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.read(data, 0, length); input.readFully(data, 0, length); input.read(data, 0, length); input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }']","['public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.read(data); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.read(data, 0, length); if(input.read() != -1) { throw new IOException(""Expected end of input""); } return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data); if(input.read() != -1) { throw new IOException(""Expected end of input""); } return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.read(data, 0, length); if(data.length != length) { throw new IOException(""Expected length bytes""); } return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data); if(data.length != length) { throw new IOException(""Expected length bytes""); } return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.read(data); if(data.length != length) { throw new IOException(""Expected length bytes""); } return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); if(data.length != length) { throw new IOException(""Expected length bytes""); } return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.read(data, 0, length); if(data.length != length) { throw new IOException(""Expected length bytes""); } if(input.read() != -1) { throw new IOException(""Expected end of input""); } return new ByteBufferImpl(data, 0, length); }']","['public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; input.read(data, 0, length); input.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; DataInput dataInput = (DataInput) input; dataInput.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; DataInput dataInput = (DataInput) input; dataInput.read(data, 0, length); dataInput.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; DataInput dataInput = (DataInput) input; dataInput.readFully(data, 0, length); dataInput.read(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; DataInput dataInput = (DataInput) input; dataInput.read(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; DataInput dataInput = (DataInput) input; dataInput.readFully(data, 0, length); dataInput.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; DataInput dataInput = (DataInput) input; dataInput.read(data, 0, length); dataInput.readFully(data, 0, length); dataInput.read(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; DataInput dataInput = (DataInput) input; dataInput.readFully(data, 0, length); dataInput.read(data, 0, length); dataInput.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }', 'public ByteBufferImpl readObject(ObjectInput input) throws IOException, ClassNotFoundException { Integer length = UnsignedNumeric.readUnsignedInt(input); byte[] data = new byte[length]; DataInput dataInput = (DataInput) input; dataInput.read(data, 0, length); dataInput.readFully(data, 0, length); dataInput.readFully(data, 0, length); return new ByteBufferImpl(data, 0, length); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias("""")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""default"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""systemAlias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""primary"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""primaryKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""systemKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""primaryAlias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""system"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }']","['public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias("""")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""default"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""systemAlias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""primary"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""primaryAlias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""system"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""primaryKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""systemKey"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }']","['public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(null)).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(""defaultCertificate"").getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); if (key == null) { throw new TokenServiceException(""Key is null."", new KeystoreServiceException(""Key is null."")); } } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); if (key == null) { return Boolean.FALSE; } } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); if (key == null) { key = ks.getSigningKeystore().getCertificate(""defaultCertificate"").getPublicKey(); } } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); if (key == null) { throw new KeystoreServiceException(""Key is null.""); } } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); if (key == null) { return null; } } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); if (key == null) { throw new TokenServiceException(""Key is null."", new KeystoreServiceException(""Key is null."")); } else { key = ks.getSigningKeystore().getCertificate(""defaultCertificate"").getPublicKey(); } } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); if (key == null) { throw new KeystoreServiceException(""Key is null.""); } key = ks.getSigningKeystore().getCertificate(""defaultCertificate"").getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }']","['public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias(""defaultAlias"")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { key = ks.getSigningKeystore().getCertificate(getSigningKeyAlias("""")).getPublicKey(); } else { key = publicKey; } JWSVerifier verifier = new RSASSAVerifier((RSAPublicKey) key); rc = token.verify(verifier); } catch (KeyStoreException | KeystoreServiceException e) { throw new TokenServiceException(""Cannot verify token."", e); } return rc; }', 'public Boolean verifyToken(JWT token, RSAPublicKey publicKey) throws TokenServiceException { Boolean rc; PublicKey key; try { if (publicKey == null) { if (getSigningKeyAlias(null) == null) throw new TokenServiceException(""Signing key alias not found in the KeystoreService with null value passed to getSigningKeyAlias method in verifyToken method of TokenServiceException class in the given Java code segment between <START> and <END> and specifically questions the null value passed to the getSigningKeyAlias method, suggesting that null might not be the correct value to be passed to the method, and a different value or a null check might be needed to make the code correct and not throw any exceptions or return any weird or null value that might be the return value of getSigningKeyAlias(null) method in that code segment, and the code revisions below address the Review Comment by suggesting different null check or value to be passed to getSigningKeyAlias method to make the code correct and not throw any exceptions or return any weird or null value that might be the return value of getSigningKeyAlias(null) method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return null value to be passed to getSigningKeyAlias method in that code segment and return']",True,True,False,True,False,False,False,False,0.0,0.0,0.9095930632220222,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(Boolean.FALSE); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); Boolean current = hasLock.getAndSet(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); Boolean current = hasLock.getAndSet(Boolean.FALSE); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.set(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(Boolean.FALSE); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); Boolean current = hasLock.getAndSet(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); Boolean current = hasLock.getAndSet(Boolean.FALSE); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }']","['public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(Boolean.FALSE); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); Boolean current = hasLock.getAndSet(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); Boolean current = hasLock.getAndSet(Boolean.FALSE); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.set(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(Boolean.FALSE); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); Boolean isLock = hasLock.getAndSet(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); Boolean isLock = hasLock.getAndSet(Boolean.FALSE); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); Boolean current = hasLock.getAndSet(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }']","['public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.set(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); leaseId.getAndSet(null); hasLock.set(false); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); leaseId.set(null); hasLock.set(false); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); leaseId.getAndSet(null); hasLock.getAndSet(false); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(false); leaseId.set(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); leaseId.set(null); hasLock.getAndSet(false); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); leaseId.getAndSet(null); hasLock.set(false); hasLock.getAndSet(false); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.set(false); leaseId.getAndSet(null); hasLock.getAndSet(false); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(false); leaseId.getAndSet(null); hasLock.getAndSet(false); } else { LOG.info(""Unable to unlock.""); } }']","['public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); leaseId.getAndSet(null); hasLock.getAndSet(false); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.set(false); leaseId.set(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); leaseId.set(null); hasLock.set(false); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(false); leaseId.set(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); leaseId.getAndSet(null); hasLock.set(false); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.set(false); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); leaseId.set(null); leaseId.getAndSet(null); hasLock.getAndSet(false); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); leaseId.getAndSet(null); leaseId.set(null); hasLock.getAndSet(false); } else { LOG.info(""Unable to unlock.""); } }', 'public void unlock() { Boolean status = leaseBlobManager.releaseLease(leaseId.get()); if (status) { LOG.info(""Unlocked successfully.""); hasLock.getAndSet(false); leaseId.set(null); leaseId.getAndSet(null); } else { LOG.info(""Unable to unlock.""); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { assertTrue(dataObject.getProperty(""id"") != null); Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); }', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { Assert.assertNotNull(dataObject.getProperty(""id"")); Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); }', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { Assert.assertNotNull(""id should be null"", dataObject.getProperty(""id"")); Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); }', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { Assert.assertNotNull(""id should be null"", dataObject.getProperty(""id"")); Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); }', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { Assert.assertNotNull(dataObject.getProperty(""id"")); Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); }', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { Assert.assertNotNull(""id should be null"", dataObject.getProperty(""id"")); Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); }', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { Assert.assertNotNull(dataObject.getProperty(""id"")); Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); }', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { Assert.assertNotNull(""id should be null"", dataObject.getProperty(""id"")); Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); }', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { Assert.assertNotNull(dataObject.getProperty(""id"")); Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); }', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { Assert.assertNotNull(""id should be null"", dataObject.getProperty(""id"")); Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); }']","['private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}']","['private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}']","['private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}', 'private void formFieldsShouldNotBeGeneratedForPersistenceId(List<FieldDefinition> formModelFields) { \n    AssertNotNull(dataObject.getProperty(""id"")); \n    Integer EXPECTED_FORM_FIELD_COUNT = finderService.getDataObjectProperties(formModel.getClassName(), path).size() - 1; \n    assertEquals(""Form field should be generated for every data field except of persistence id"", EXPECTED_FORM_FIELD_COUNT, formModelFields.size()); \n}']",False,True,True,True,False,False,False,False,0.8787419089273848,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }']","['private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    combiner.finish(promise); \n}', 'private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    combiner.finish(promise); \n}', 'private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    combiner.finish(promise); \n}', 'private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    combiner.finish(promise); \n}', 'private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    combiner.finish(promise); \n}', 'private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    combiner.finish(promise); \n}', 'private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    combiner.finish(promise); \n}', 'private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    combiner.finish(promise); \n}', 'private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    combiner.finish(promise); \n}', 'private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    combiner.finish(promise); \n}']","['private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    combiner.finish(promise); \n}', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    combiner.finish(promise); \n}', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    combiner.finish(promise); \n    combiner = null; \n}', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    combiner.finish(promise); \n    combiner = null; \n}', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    PromiseCombiner combiner = new PromiseCombiner(); \n    if(out.size() > 0) { \n        for (Integer i = 0; i < out.size(); i++) { \n            combiner.add(ctx.write(out.getUnsafe(i))); \n        } \n        combiner.finish(promise); \n    } \n}', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    if(out.size() > 0) { \n        for (Integer i = 0; i < out.size(); i++) { \n            combiner.add(ctx.write(out.getUnsafe(i))); \n        } \n        combiner.finish(promise); \n    } \n}', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    PromiseCombiner combiner = new PromiseCombiner(); \n    if(out.size() > 0) { \n        for (Integer i = 0; i < out.size(); i++) { \n            combiner.add(ctx.write(out.getUnsafe(i))); \n        } \n        combiner.finish(promise); \n    } \n    combiner = null; \n}', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    if(out.size() > 0) { \n        for (Integer i = 0; i < out.size(); i++) { \n            combiner.add(ctx.write(out.getUnsafe(i))); \n        } \n        combiner.finish(promise); \n    } \n    combiner = null; \n}', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    if(out.size() > 0) { \n        combiner.finish(promise); \n    } \n}', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { \n    final PromiseCombiner combiner = new PromiseCombiner(); \n    for (Integer i = 0; i < out.size(); i++) { \n        combiner.add(ctx.write(out.getUnsafe(i))); \n    } \n    if(out.size() > 0) { \n        combiner.finish(promise); \n    } \n}']","['private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final static PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final static PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { static PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { static PromiseCombiner combiner = new PromiseCombiner(); for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final PromiseCombiner combiner = new PromiseCombiner(); static { } for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final PromiseCombiner combiner = new PromiseCombiner(); static { } for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { static { final PromiseCombiner combiner = new PromiseCombiner(); } for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private static void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { static { final PromiseCombiner combiner = new PromiseCombiner(); } for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }', 'private void writePromiseCombiner(ChannelHandlerContext ctx, CodecOutputList out, ChannelPromise promise) { final static PromiseCombiner combiner; static { combiner = new PromiseCombiner(); } for (Integer i = 0; i < out.size(); i++) { combiner.add(ctx.write(out.getUnsafe(i))); } combiner.finish(promise); }']",False,True,False,True,False,False,False,False,0.9011400823378845,0.0,0.9011400823378845,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow Boolean.valueOf(""true""))); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> { writer.add(""show_notification"", shouldAllow); return writer; }); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", Boolean.valueOf(shouldAllow.toString""))); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> { Boolean allow = shouldAllow; writer.add(""show_notification"", allow); }); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow ? Boolean.valueOf(""true"") : Boolean.valueOf(""false""))); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow ? true : false)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> { Boolean allow = shouldAllow; writer.add(""show_notification"", allow ? true : false); }); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }']","['public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }']","['public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow Boolean.TRUE)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow Boolean.FALSE)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> { writer.add(""show_notification"", shouldAllow); return writer; }); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> { if (shouldAllow) writer.add(""show_notification"", shouldAllow); }); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }']","['public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> { writer.add(""show_notification"", shouldAllow); }); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> { writer.add(""show_notification"", shouldAllow); return; }); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, (Object writer1) -> { jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> {  writer.add(""show_notification"", shouldAllow); }); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> writer.add(""show_notification"", shouldAllow)); }', 'public String getDataSharingNotificationForCurrentUser(Request request, Response response) { Boolean shouldAllow = dataSharingNotification.allowNotificationFor(currentUsername()); return jsonizeAsTopLevelObject(request, writer -> { writer.add(""show_notification"", shouldAllow); }); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return data instanceof Match && data.eContainer() instanceof Comparison; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); Boolean handles = data instanceof Match && data.eContainer() instanceof Comparison; return handles; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return (data instanceof Match && data.eContainer() instanceof Comparison); }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); Boolean handles = (data instanceof Match && data.eContainer() instanceof Comparison); return handles; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return data instanceof Match && data.eContainer() instanceof Comparison; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); Boolean handles = data instanceof Match && data.eContainer() instanceof Comparison; return (handles); }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return (data instanceof Match) && (data.eContainer() instanceof Comparison); }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); Boolean handles = (data instanceof Match) && (data.eContainer() instanceof Comparison); return handles; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return data instanceof Match && (data.eContainer() instanceof Comparison); }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); Boolean handles = data instanceof Match && (data.eContainer() instanceof Comparison); return handles; }']","['public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return data instanceof Match && data.eContainer() instanceof Comparison; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); Boolean handles = data instanceof Match && data.eContainer() instanceof Comparison; return handles instanceof Boolean && handles; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return (data instanceof Match && data.eContainer() instanceof Comparison) instanceof Boolean; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); Boolean handles = data instanceof Match && data.eContainer() instanceof Comparison; return (Boolean) handles; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return data instanceof Match && data.eContainer() instanceof Comparison; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return Boolean.valueOf(data instanceof Match && data.eContainer() instanceof Comparison); }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return (data instanceof Match && data.eContainer() instanceof Comparison) ? Boolean.valueOf(true) : Boolean.valueOf(false); }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return Boolean.valueOf(data instanceof Match && data.eContainer() instanceof Comparison); }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return (Boolean) (data instanceof Match && data.eContainer() instanceof Comparison); }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return Boolean.valueOf(data instanceof Match && data.eContainer() instanceof Comparison); }']","['public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return data instanceof Match && data.eContainer() instanceof Comparison; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); Boolean handles = data instanceof Match && data.eContainer() instanceof Comparison; return handles instanceof Boolean ? handles : handles; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return (data instanceof Match && data.eContainer() instanceof Comparison) ? Boolean.TRUE : Boolean.FALSE; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); Boolean handles = data instanceof Match && data.eContainer() instanceof Comparison; return Boolean.TRUE.equals handles; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return Boolean.TRUE.equals(data instanceof Match && data.eContainer() instanceof Comparison) ? Boolean.TRUE : Boolean.FALSE; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return (data instanceof Match && data.eContainer() instanceof Comparison) ? Boolean.TRUE : Boolean.FALSE; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); Boolean handles = data instanceof Match && data.eContainer() instanceof Comparison; return handles ? Boolean.TRUE : Boolean.FALSE; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return data instanceof Match && data.eContainer() instanceof Comparison; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return (data instanceof Match && data.eContainer() instanceof Comparison) ? Boolean.TRUE : Boolean.FALSE; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); Boolean handles = data instanceof Match && data.eContainer() instanceof Comparison; return (Boolean) (handles ? Boolean.TRUE : Boolean.FALSE); }']","['public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return data instanceof Match && data.eContainer() instanceof Comparison; }', 'public Boolean handle(TreeNode treeNode) { return treeNode.getData() instanceof Match && treeNode.getData().eContainer() instanceof Comparison; }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return (data instanceof Match) && (data.eContainer() instanceof Comparison); }', 'public Boolean handle(TreeNode treeNode) { return (treeNode.getData() instanceof Match) && (treeNode.getData().eContainer() instanceof Comparison); }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); Boolean handles = data instanceof Match && data.eContainer() instanceof Comparison; return handles instanceof Boolean && handles; }', 'public Boolean handle(TreeNode treeNode) { return (treeNode.getData() instanceof Match) && (treeNode.getData().eContainer() instanceof Comparison); }', 'public Boolean handle(TreeNode treeNode) { return treeNode.getData() instanceof Match && (treeNode.getData().eContainer() instanceof Comparison); }', 'public Boolean handle(TreeNode treeNode) { EObject data = treeNode.getData(); return data instanceof Match && (data.eContainer() instanceof Comparison); }', 'public Boolean handle(TreeNode treeNode) { return (treeNode.getData() instanceof Match) && treeNode.getData().eContainer() instanceof Comparison; }', 'public Boolean handle(TreeNode treeNode) { return treeNode.getData() instanceof Match && treeNode.getData().eContainer() instanceof Comparison; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""eventData cannot be null.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData must not be null.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""EventData cannot be null.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""EventData cannot be null.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData must be a non null EventData"", (Throwable) null); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""eventData must be a non null EventData"", (Throwable) null); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""EventData cannot be null"", (Throwable) null); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""EventData cannot be null"", (Throwable) null); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""EventData cannot be null.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }']","['public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData cannot be null.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""EventData cannot be null.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData is null.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData must be provided.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData cannot be null, a value is required.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData is required and cannot be null.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData must be a non null value.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData cannot be null, a non null value is required.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData is a required non null value.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }']","['public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { Objects.requireNotNull(eventData, ""eventData cannot be null.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null"", new NullPointerException()); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""eventData cannot be null.""); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null"", new IllegalArgumentException()); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(String.format(""eventData cannot be null: %s"", eventData)); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null: "" + eventData); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""eventData cannot be null: "" + eventData, new NullPointerException()); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new NullPointerException(""EventData cannot be null: "" + eventData); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }', 'public boolean tryAdd(final EventData eventData) throws PayloadSizeExceededException { if (eventData == null) { throw new IllegalArgumentException(""EventData cannot be null: "" + eventData); } final EventDataImpl eventDataImpl = (EventDataImpl) eventData; final long size; try { size = getSize(eventDataImpl, events.isEmpty()); } catch (java.nio.BufferOverflowException exception) { throw new PayloadSizeExceededException(String.format(Locale.US, ""Size of the payload exceeded Maximum message size: %s kb"", this.maxMessageSize / 1024)); } if (this.currentSize + size > this.maxMessageSize) { return false; } this.events.add(eventDataImpl); this.currentSize += size; return true; }']",[],True,False,True,False,False,False,False,False,0.0,0.8427106072777217,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * (timeElapsedMillis + timeElapsedMillis) / 2); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis * progress) / progress + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis * timeElapsedMillis) / progress + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) (timeElapsedMillis + (timeElapsedMillis / progress) * timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis * timeElapsedMillis) / (progress * progress) + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * (timeElapsedMillis + timeElapsedMillis) / 3); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis * progress) / (progress + progress) + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis + timeElapsedMillis) / progress + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis * timeElapsedMillis) / (progress + progress) + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }']","['public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * (timeElapsedMillis + timeElapsedMillis) / 3); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }']","['public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = new Date().getTime() - status.getCreationTime().getTime(); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = new Date().getTime() - status.getCreationTime().getTime(); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = new Date().getTime() - status.getCreationTime().getTime(); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = new Date().getTime() - status.getCreationTime().getTime(); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = new Date().getTime() - status.getCreationTime().getTime(); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }']","['public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * (timeElapsedMillis) + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis) * (timeElapsedMillis / progress) + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, (Integer) estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis) + (timeElapsedMillis / progress) * timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * (timeElapsedMillis + timeElapsedMillis) / 2); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis) * (timeElapsedMillis / progress) + timeElapsedMillis / 2); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }', 'public void fireProgress(float progress, String task) { if (progress > status.progress || StringUtils.equals(task, status.task)) { if (status.getPhase() == ProcessState.QUEUED) { status.setPhase(ProcessState.RUNNING); } status.setProgress(progress); status.setTask(task); if (progress > 0) { long timeElapsedMillis = (new Date().getTime() - status.getCreationTime().getTime()); Integer estimatedCompletionMillis = (Integer) ((timeElapsedMillis / progress) * timeElapsedMillis + timeElapsedMillis / 2); Calendar calendar = Calendar.getInstance(); calendar.setTime(status.getCreationTime()); calendar.add(Calendar.MILLISECOND, estimatedCompletionMillis); status.setEstimatedCompletion(calendar.getTime()); } ProcessEvent event = new ProcessEvent(status, inputs, outputs); for (ProcessListener listener : listeners) { listener.progress(event); } } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
"['private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int syncDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > syncDistance * syncDistance || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int viewDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > viewDistance * viewDistance || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int syncDistanceInBlocks = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > syncDistanceInBlocks * syncDistanceInBlocks || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int playerSyncDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > playerSyncDistance * playerSyncDistance || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int networkSyncDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > networkSyncDistance * networkSyncDistance || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int syncDistanceSquared = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > syncDistanceSquared * syncDistanceSquared || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int playerSyncRange = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > playerSyncRange * playerSyncRange || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int syncRange = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > syncRange * syncRange || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int networkRange = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > networkRange * networkRange || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int viewRange = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > viewRange * viewRange || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }']","['private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int syncDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > syncDistance * syncDistance || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int viewDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > viewDistance * viewDistance || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int syncView = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > syncView * syncView || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int networkView = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > networkView * networkView || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int playerViewDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > playerViewDistance * playerViewDistance || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int syncDistanceView = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > syncDistanceView * syncDistanceView || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int viewDistanceSync = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > viewDistanceSync * viewDistanceSync || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int networkSyncDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > networkSyncDistance * networkSyncDistance || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int playerSyncView = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > playerSyncView * playerSyncView || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int syncViewDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > syncViewDistance * syncViewDistance || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }']","['private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int syncDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > syncDistance * syncDistance || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int viewDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > viewDistance * viewDistance || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int syncDistanceSquared = network.getSyncDistance() * network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > syncDistanceSquared || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int view = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > view * view || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int syncDistance = network.getSyncDistance(); int syncDistanceSquared = syncDistance * syncDistance; Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > syncDistanceSquared || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); final int viewDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > viewDistance * viewDistance || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int view = network.getSyncDistance(); int viewSquared = view * view; Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > viewSquared || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int syncDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > syncDistance * syncDistance || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); int viewDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); int viewDistanceSquared = viewDistance * viewDistance; if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > viewDistanceSquared || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }', 'private void syncEntity(Entity ent, Set<? extends Entity> observers, Boolean forceDestroy) { for (Entity observer : observers) { if (ent == observer) { continue; } if (!(observer instanceof Player)) { continue; } Player player = (Player) observer; if (!player.isOnline()) { continue; } PlayerNetworkComponent network = player.getNetwork(); final int syncDistance = network.getSyncDistance(); Boolean spawn, sync, destroy; spawn = sync = destroy = false; final SpoutPhysicsComponent physics = (SpoutPhysicsComponent) ent.getPhysics(); if (forceDestroy || ent.isRemoved() || physics.getTransformLive().getPosition().distanceSquared(player.getPhysics().getPosition()) > syncDistance * syncDistance || player.isInvisible(ent)) { destroy = true; } else if (network.hasSpawned(ent)) { sync = true; } else { spawn = true; } network.syncEntity(ent, physics.getTransformLive(), spawn, destroy, sync); } }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
"['protected void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'private void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'final void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'static void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'protected static void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'private static void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'final static void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'static final void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'final protected void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'protected final void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'final private void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'private final void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'static protected void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'protected static final void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'static private void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'private static final void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'static final protected void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'final static protected void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'final private static void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'private final static void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'static protected final void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'protected final static void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'static final private void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'private static protected void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'final protected static void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'protected static protected void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class']","['protected void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'private void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'final void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'static void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'protected static void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'final static void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'private static void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'static protected void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'static final void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'static final protected void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}']","['public void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent == null ? entity.getComponent(HealthComponent.class) : targetHealthComponent; \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'public void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'public void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent == null ? entity.getComponent(HealthComponent.class) : targetHealthComponent; \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'public void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'public void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent == null ? entity.getComponent(HealthComponent.class) : targetHealthComponent; \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'public void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'public void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent == null ? entity.getComponent(HealthComponent.class) : targetHealthComponent; \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'public void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'public void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent == null ? entity.getComponent(HealthComponent.class) : targetHealthComponent; \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}', 'public void doHeal(EntityRef entity, Integer healAmount, EntityRef instigator, HealthComponent targetHealthComponent) { \n    HealthComponent health = targetHealthComponent; \n    if (health == null) { \n        health = entity.getComponent(HealthComponent.class); \n    } \n    Integer healedAmount = Math.min(health.currentHealth + healAmount, health.maxHealth) - health.currentHealth; \n    health.currentHealth += healedAmount; \n    entity.saveComponent(health); \n    entity.send(new OnHealedEvent(healAmount, healedAmount, instigator)); \n    if (health.currentHealth == health.maxHealth) { \n        entity.send(new FullHealthEvent(instigator)); \n    } \n}']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.9671682101338347,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags, 1); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags, 1); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, tags, hostname); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", tags, hostname); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags, null); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags, null); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", tags, hostname, null); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }']","['public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); if (client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags)) { } } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); return; } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); if (client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags) == null) { } } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1.0, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags, 1); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); if (client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags) == null) { client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }']","['public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); if (client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags)) { } } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); if (client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags)) { } } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); if (client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags)) { client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); if (client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags)) { } } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } }']","['public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags, 1); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags, 1); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags, null); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags, null); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags, null); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }', 'public void onNewHead(FlowNode flowNode) { DatadogClient client = ClientFactory.getClient(); if (client == null){ return; } client.sendPipelineTrace(runFor(flowNode.getExecution()), flowNode); if (!isMonitored(flowNode)) { return; } StepEndNode endNode = (StepEndNode) flowNode; StepStartNode startNode = endNode.getStartNode(); Integer stageDepth = 0; String directParentName = null; for (BlockStartNode node : startNode.iterateEnclosingBlocks()) { if (DatadogUtilities.isStageNode(node)) { if(directParentName == null){ directParentName = getStageName(node); } stageDepth++; } } if(directParentName == null){ directParentName = ""root""; } WorkflowRun run = getRun(flowNode); if(run == null){ return; } try { String result = DatadogUtilities.getResultTag(endNode); BuildData buildData = new BuildData(run, flowNode.getExecution().getOwner().getListener()); String hostname = buildData.getHostname(""""); Map<String, Set<String>> tags = buildData.getTags(); TagsUtil.addTagToTags(tags, ""stage_name"", getStageName(startNode)); TagsUtil.addTagToTags(tags, ""parent_stage_name"", directParentName); TagsUtil.addTagToTags(tags, ""stage_depth"", String.valueOf(stageDepth)); TagsUtil.addTagToTags(tags, ""result"", result); client.gauge(""jenkins.job.stage_duration"", getTime(startNode, endNode), hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", 1, hostname, tags); client.incrementCounter(""jenkins.job.stage_completed"", hostname, tags); } catch (IOException | InterruptedException e) { DatadogUtilities.severe(logger, e, ""Unable to submit the stage duration metric for "" + getStageName(startNode)); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
"['public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member) == false) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member) != true) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member) == false) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member) != true) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member) == false) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }']","['public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member) == false) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member) != true) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!(MemberUtils.atLeastCoordinator(member))) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); boolean isCoordinator = MemberUtils.atLeastCoordinator(member); if(!isCoordinator) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member) == false) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); boolean isCoordinator = MemberUtils.atLeastCoordinator(member); if(!isCoordinator) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!(MemberUtils.atLeastCoordinator(member))) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }']","['public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member)) { return true; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member)) return true; GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); boolean isCoordinator = MemberUtils.atLeastCoordinator(member); if(!isCoordinator) { return false; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) return false; GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); boolean isCoordinator = MemberUtils.atLeastCoordinator(member); if(isCoordinator) { return true; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member)) { GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; } return false; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) { GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; } return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); boolean isCoordinator = MemberUtils.atLeastCoordinator(member); if(!isCoordinator) return false; GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member)) return true; GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }']","['public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) { return true; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member)) { GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; } return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) { return true; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) return true; GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member)) { GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); } return false; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) { return true; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) return true; GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(MemberUtils.atLeastCoordinator(member)) { GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; } return true; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) { return true; } GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }', 'public @ResponseBody boolean updateGame( @PathVariable long id, @RequestParam(value = ""location"") String location, @RequestParam(value = ""addOfficial"") String addOfficial, @RequestParam(value = ""removeOfficial"") String removeOfficial, HttpSession session) { Member member = (Member) session.getAttribute(""member""); if(!MemberUtils.atLeastCoordinator(member)) return true; GameDao gameDao = new GameDao(); MemberDao memberDao = new MemberDao(); Game game = gameDao.getGameById(id, true); if(location!="""") { game.setGameLocation(location); } game.removeOfficial(memberDao.getMemberByUsername(removeOfficial)); game.addOfficial(memberDao.getMemberByUsername(addOfficial)); gameDao.saveGame(game); return false; }']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.8966773400768917
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { Category resCat = cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { this.getCategoryCodes().add(cat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat: resCategories) { this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { Category resCat = (Category) cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCategory: resCategories) { this.getCategoryCodes().add(resCategory.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { Category resCat = (Category) cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat: resCategories) { this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { this.getCategoryCodes().add(cat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCategory: resCategories) { this.getCategoryCodes().add(resCategory.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { Category resCat = cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }']","['public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat : resCategories) { Category resCat = cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat : resCategories) { this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat : resCategories) { Category resCat = cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat : resCategories) { this.getCategoryCodes().add(cat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat : resCategories) { this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat : resCategories) { Category resCat = cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat : resCategories) { this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat : resCategories) { this.getCategoryCodes().add(cat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat : resCategories) { this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat : resCategories) { Category resCat = cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }']","['public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for(Category cat: resCategories) { Category resCat = cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat: resCategories) { this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { Category resCat = (Category) cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat: resCategories) { this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { Category resCat = (Category) cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat: resCategories) { Category cat = resCat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { Category resCat = cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat: resCategories) { this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { Category resCat = (Category) cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat: resCategories) { Category cat = resCat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }']","['public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { Category resCat = cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat: resCategories) { this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { this.getCategoryCodes().add(cat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat: resCategories) this.getCategoryCodes().add(resCat.getCode()); this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { Category resCat = cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat: resCategories) { this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { this.getCategoryCodes().add(cat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat: resCategories) this.getCategoryCodes().add(resCat.getCode()); this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category cat: resCategories) { Category resCat = cat; this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }', 'public String edit() { try { savedId.clear(); ResourceInterface resource = this.loadResource(this.getResourceId()); this.setResourceTypeCode(resource.getType()); List fileDescr = new ArrayList<String>(); fileDescr.add(resource.getDescription()); setFileDescriptions(fileDescr); List<Category> resCategories = resource.getCategories(); for (Category resCat: resCategories) { this.getCategoryCodes().add(resCat.getCode()); } this.setMainGroup(resource.getMainGroup()); this.setStrutsAction(ApsAdminSystemConstants.EDIT); } catch (Throwable t) { logger.error(""error in edit"", t); return FAILURE; } return SUCCESS; }']",True,True,False,True,False,False,False,False,0.0,0.0,0.7759071335214403,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { } controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { controls.put(hoverControlCreator.getKey(), informationControl); } else { controls.put(hoverControlCreator.getKey(), informationControl); } firstControl = false; } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) {  } firstControl = false; controls.put(hoverControlCreator.getKey(), informationControl); } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { firstControl = false; } controls.put(hoverControlCreator.getKey(), informationControl); } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } firstControl = false; controls.put(hoverControlCreator.getKey(), informationControl); } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { firstControl = false; controls.put(hoverControlCreator.getKey(), informationControl); } } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } controls.put(hoverControlCreator.getKey(), informationControl); if (!firstControl) { firstControl = false; } } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }']","['public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { } controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) {; controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } else { controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { firstControl = false; controls.put(hoverControlCreator.getKey(), informationControl); } } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { controls.put(hoverControlCreator.getKey(), informationControl);  firstControl = false; } } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { firstControl = false; } controls.put(hoverControlCreator.getKey(), informationControl); } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } controls.put(hoverControlCreator.getKey(), informationControl); if (!firstControl) { firstControl = false; } } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { firstControl = false; controls.put(hoverControlCreator.getKey(), informationControl); } } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } controls.put(hoverControlCreator.getKey(), informationControl); if (!firstControl) { firstControl = false; } } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }']","['public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { ((GridData)children.get(0).getLayoutData()).verticalIndent = 5; } controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { ((GridData)children.get(0).getLayoutData()).verticalIndent = 10; } controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { ((GridData)children.get(0).getLayoutData()).verticalIndent = 1; } controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { ((GridData)children.get(0).getLayoutData()).verticalIndent = -1; } controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { ((GridData)children.get(0).getLayoutData()).verticalIndent = 3; } controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { ((GridData)children.get(0).getLayoutData()).verticalIndent = 0; } controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { ((GridData)children.get(0).getLayoutData()).verticalIndent = 0; ((GridData)children.get(0).getLayoutData()).verticalIndent = 0; } controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } if (!firstControl) { } controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }', 'public void createContent(Composite parent) { this.controls = new LinkedHashMap<>(); GridLayout layout = new GridLayout(1, false); parent.setLayout(layout); Boolean firstControl = true; for (Entry<ITextHover, IInformationControlCreator> hoverControlCreator : this.creators.entrySet()) { IInformationControl informationControl = hoverControlCreator.getValue().createInformationControl(parent.getShell()); if (informationControl instanceof AbstractInformationControl) { List<Control> children = Arrays.asList(((AbstractInformationControl)informationControl).getShell().getChildren()); children.remove(parent); if (children.isEmpty() ) { continue; } for (Control control : children) { control.setParent(parent); control.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true)); } controls.put(hoverControlCreator.getKey(), informationControl); firstControl = false; } else { GenericEditorPlugin.getDefault().getLog().log(new Status(IStatus.WARNING, GenericEditorPlugin.BUNDLE_ID, ""Only text hovers producing an AbstractInformationControl can be aggregated; got a "" + informationControl.getClass().getSimpleName())); informationControl.dispose(); } } }']",[],True,False,True,False,False,False,False,False,0.0,0.9496952283401919,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(1); return maxServerThreads - selectorThreads - acceptorThreads - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); return maxServerThreads - selectorThreads - acceptorThreads - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(0); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(1); return maxServerThreads - selectorThreads - acceptorThreads - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = Math.max(1, connectorFactory.getSelectorThreads().orElse(0)); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); return maxServerThreads - selectorThreads - acceptorThreads - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = Math.max(1, connectorFactory.getSelectorThreads().orElse(1)); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); return maxServerThreads - selectorThreads - acceptorThreads - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(0); int acceptorThreads = Math.max(1, connectorFactory.getAcceptorThreads().orElse(0)); return maxServerThreads - selectorThreads - acceptorThreads - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = Math.max(1, connectorFactory.getSelectorThreads().orElse(0)); int acceptorThreads = Math.max(1, connectorFactory.getAcceptorThreads().orElse(0)); return maxServerThreads - selectorThreads - acceptorThreads - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = Math.max(1, connectorFactory.getSelectorThreads().orElse(1)); int acceptorThreads = Math.max(1, connectorFactory.getAcceptorThreads().orElse(1)); return maxServerThreads - selectorThreads - acceptorThreads - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); int acceptorThreads = Math.max(1, connectorFactory.getAcceptorThreads().orElse(1)); return maxServerThreads - selectorThreads - acceptorThreads - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = Math.max(1, connectorFactory.getSelectorThreads().orElse(1)); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(1); return maxServerThreads - selectorThreads - acceptorThreads - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = Math.max(1, connectorFactory.getSelectorThreads().orElse(0)); int acceptorThreads = Math.max(1, connectorFactory.getAcceptorThreads().orElse(1)); return maxServerThreads - selectorThreads - acceptorThreads - 1; }']","['private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); return maxServerThreads - selectorThreads - acceptorThreads - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(1); return maxServerThreads - selectorThreads - acceptorThreads - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); return maxServerThreads - ( selectorThreads < 1 ? 1 : selectorThreads) - acceptorThreads - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); return maxServerThreads - ( selectorThreads < 1 ? 1 : selectorThreads) - ( acceptorThreads < 1 ? 1 : acceptorThreads) - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); return maxServerThreads - ( selectorThreads < 1 ? 1 : selectorThreads) - ( acceptorThreads < 1 ? 1 : acceptorThreads); }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); return maxServerThreads - ( selectorThreads < 1 ? 1 : selectorThreads) - acceptorThreads; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); return maxServerThreads - selectorThreads - ( acceptorThreads < 1 ? 1 : acceptorThreads) - 1; }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); return maxServerThreads - selectorThreads - ( acceptorThreads < 1 ? 1 : acceptorThreads); }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); return maxServerThreads - ( selectorThreads < 1 ? 1 : selectorThreads) - ( acceptorThreads < 1 ? 1 : acceptorThreads) - ( selectorThreads < 1 ? 0 : 1); }', 'private long computeNumberOfAvailableThreads() { Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); int maxServerThreads = serverFactory.getMaxThreads(); Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); return maxServerThreads - ( selectorThreads < 1 ? 1 : selectorThreads) - ( acceptorThreads < 1 ? 1 : acceptorThreads) - ( acceptorThreads < 1 ? 0 : 1); }']","['private long computeNumberOfAvailableThreads() { \n    Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); \n    DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); \n    int maxServerThreads = serverFactory.getMaxThreads(); \n    Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); \n    Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); \n    HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); \n    int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); \n    int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); \n    return maxServerThreads - selectorThreads - acceptorThreads - 1; \n}', 'private long computeNumberOfAvailableThreads() { \n    Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); \n    DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); \n    int maxServerThreads = serverFactory.getMaxThreads(); \n    Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); \n    Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); \n    HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); \n    int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); \n    int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(1); \n    return maxServerThreads - selectorThreads - acceptorThreads - 1; \n}', 'private long computeNumberOfAvailableThreads() { \n    Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); \n    DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); \n    int maxServerThreads = serverFactory.getMaxThreads(); \n    Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); \n    Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); \n    HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); \n    int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); \n    int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); \n    return maxServerThreads - ( selectorThreads < 1 ? 1 : selectorThreads) - acceptorThreads - 1; \n}', 'private long computeNumberOfAvailableThreads() { \n    Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); \n    DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); \n    int maxServerThreads = serverFactory.getMaxThreads(); \n    Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); \n    Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); \n    HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); \n    int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); \n    int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); \n    return maxServerThreads - ( selectorThreads < 1 ? 1 : selectorThreads) - ( acceptorThreads < 1 ? 1 : acceptorThreads) - 1; \n}', 'private long computeNumberOfAvailableThreads() { \n    Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); \n    DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); \n    int maxServerThreads = serverFactory.getMaxThreads(); \n    Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); \n    Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); \n    HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); \n    int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); \n    int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); \n    return maxServerThreads - ( selectorThreads < 1 ? 1 : selectorThreads) - ( acceptorThreads < 1 ? 1 : acceptorThreads); \n}', 'private long computeNumberOfAvailableThreads() { \n    Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); \n    DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); \n    int maxServerThreads = serverFactory.getMaxThreads(); \n    Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); \n    Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); \n    HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); \n    int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); \n    int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); \n    return maxServerThreads - ( selectorThreads < 1 ? 1 : selectorThreads) - acceptorThreads; \n}', 'private long computeNumberOfAvailableThreads() { \n    Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); \n    DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); \n    int maxServerThreads = serverFactory.getMaxThreads(); \n    Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); \n    Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); \n    HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); \n    int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); \n    int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); \n    return maxServerThreads - selectorThreads - ( acceptorThreads < 1 ? 1 : acceptorThreads) - 1; \n}', 'private long computeNumberOfAvailableThreads() { \n    Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); \n    DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); \n    int maxServerThreads = serverFactory.getMaxThreads(); \n    Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); \n    Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); \n    HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); \n    int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); \n    int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(0); \n    return maxServerThreads - selectorThreads - ( acceptorThreads < 1 ? 1 : acceptorThreads); \n}', 'private long computeNumberOfAvailableThreads() { \n    Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); \n    DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); \n    int maxServerThreads = serverFactory.getMaxThreads(); \n    Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); \n    Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); \n    HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); \n    int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); \n    int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(1); \n    return maxServerThreads - selectorThreads - acceptorThreads; \n}', 'private long computeNumberOfAvailableThreads() { \n    Preconditions.checkState(getServerFactory() instanceof DefaultServerFactory, ""Unexpected serverFactory instance on TimeLockServerConfiguration.""); \n    DefaultServerFactory serverFactory = (DefaultServerFactory) getServerFactory(); \n    int maxServerThreads = serverFactory.getMaxThreads(); \n    Preconditions.checkNotNull(serverFactory.getApplicationConnectors(), ""applicationConnectors of TimeLockServerConfiguration must not be null.""); \n    Preconditions.checkState(serverFactory.getApplicationConnectors().get(0) instanceof HttpConnectorFactory, ""applicationConnectors of TimeLockServerConfiguration must have a HttpConnectorFactory instance.""); \n    HttpConnectorFactory connectorFactory = (HttpConnectorFactory) serverFactory.getApplicationConnectors().get(0); \n    int selectorThreads = connectorFactory.getSelectorThreads().orElse(1); \n    int acceptorThreads = connectorFactory.getAcceptorThreads().orElse(1); \n    return maxServerThreads - selectorThreads - acceptorThreads - 1; \n}']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""Caller error: geoPoint is null, warning""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null, warning info""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null, info warning""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""Caller error: warning, geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null, warning info level""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null, info level warning""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""Caller error, warning: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null, warning level info""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }']","['void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""Caller warning: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null, this is a warning""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null, warning the caller""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""Caller error: geoPoint is null, warning""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null: warning to caller""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint null: this is a warning to the caller""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, "" warning: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, "" warning to caller: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null, this is a warning message""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }']","['void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.i(LOG_TAG, ""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.i(LOG_TAG, ""Caller error: geoPoint is null, this is a warning info level message""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.i(LOG_TAG, ""Caller error: geoPoint is null, this is a warning info level message that happen""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.i(LOG_TAG, ""Caller error: geoPoint is null, warning info level message""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.i(LOG_TAG, ""Caller error: geoPoint is null, info level message""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.i(LOG_TAG, ""Caller error: geoPoint is null, this is a warning""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.i(LOG_TAG, ""Caller error: geoPoint is null, warning message""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.i(LOG_TAG, ""Caller error: geoPoint is null, info message""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.i(LOG_TAG, ""Caller error: geoPoint is null, this is a info level message that happen""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.i(LOG_TAG, ""Caller error: geoPoint is null, this is a warning info level message that happen and is a warning""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }']","['void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""Caller error: geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null, update method""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""Caller error: geoPoint is null, update method""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null: update method""); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null: update method, isMlsPointUpdate = "" + isMlsPointUpdate); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null: update method, obsPoint = "" + obsPoint); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""geoPoint is null: update method, obsPoint = "" + obsPoint + "" isMlsPointUpdate = "" + isMlsPointUpdate); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""Caller error: geoPoint is null, update method, obsPoint = "" + obsPoint); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }', 'void update(ObservationPoint obsPoint, MapView mapView, boolean isMlsPointUpdate) { final Projection pj = mapView.getProjection(); GeoPoint geoPoint = (isMlsPointUpdate)? obsPoint.pointMLS : obsPoint.pointGPS; if (geoPoint == null) { Log.w(LOG_TAG, ""Caller error: geoPoint is null, update method, obsPoint = "" + obsPoint + "" isMlsPointUpdate = "" + isMlsPointUpdate); return; } final Point point = pj.toPixels(geoPoint, null); final long size = mSize3px * 2; final Rect dirty = new Rect(point.x - size, point.y - size, point.x + size, point.y + size); dirty.offset(mapView.getScrollX(), mapView.getScrollY()); mapView.postInvalidate(dirty.left, dirty.top, dirty.right, dirty.bottom); if (!isMlsPointUpdate) { addToGridHash(obsPoint, point); } }']",True,True,False,True,False,False,False,False,0.0,0.0,0.9525618205602057,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) return false; Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (!s.isEmpty()) { Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; } return false; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } else { Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; } }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) return false; else { Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; } }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) return false; Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) return false; Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) return false; Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) return false; Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) return false; } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) return false; Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) return false; Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) return false; } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) return false; Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) return false; } return true; }']","['private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) return false; Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (!s.isEmpty()) { Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; } return false; }', 'private static boolean isJavaIdentifier(String s) { return s.isEmpty() ? false : isJavaIdentifierHelper(s); } private static boolean isJavaIdentifierHelper(String s) { Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } else { Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; } }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) return false; else { Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; } }', 'private static boolean isJavaIdentifier(String s) { boolean isEmpty = s.isEmpty(); if (isEmpty) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) return false; Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (!s.isEmpty()) { Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) return false; Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; } return false; }', 'private static boolean isJavaIdentifier(String s) { boolean result = true; if (s.isEmpty()) { result = false; } else { Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { result = false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { result = false; } } } return result; }']","['private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.length() == 0) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s == null || s.isEmpty()) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (!s.isEmpty()) { Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; } return false; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) return false; Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } else { Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; } }', 'private static boolean isJavaIdentifier(String s) { if (s == null || s.isEmpty()) return false; Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) return false; else { Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; } }', 'private static boolean isJavaIdentifier(String s) { if (!s.isEmpty()) { Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; } else return false; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) return false; Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }']","['private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) return false; Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) return false; Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) return false; Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) return false; Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) return false; } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) return false; Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) return false; } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) return false; Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) return false; } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) return false; } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) return false; Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) return false; Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) { return false; } Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) return false; Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) { return false; } } return true; }', 'private static boolean isJavaIdentifier(String s) { if (s.isEmpty()) return false; Integer start = s.codePointAt(0); if (!Character.isJavaIdentifierStart(start)) { return false; } Integer charCount = Character.charCount(start); for (Integer i = charCount; i < s.length(); i += charCount) { Integer codePoint = s.codePointAt(i); if (!Character.isJavaIdentifierPart(codePoint)) return false; } return true; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }']","['public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }']","['public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(Objects.equals(tuple, tupleFromTuple)); assertTrue(Objects.equals(tupleFromTuple, tuple)); assertTrue(Objects.equals(frame, tupleFromFrame)); assertTrue(Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(Objects.equals(frame, tupleFromFrame)); assertFalse(Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); if (Objects.equals(tuple, tupleFromTuple) && Objects.equals(tupleFromTuple, tuple) && Objects.equals(frame, tupleFromFrame) && Objects.equals(tupleFromFrame, frame)) { if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality"", Objects.equals(tuple, tupleFromTuple) && Objects.equals(tupleFromTuple, tuple) && Objects.equals(frame, tupleFromFrame) && Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); if (arity > 0) { frame.setValue(0, ""x""); } assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); if (arity > 0) { frame.setValue(0, ""x""); } assertTrue(""equality"", Objects.equals(tuple, tupleFromTuple) && Objects.equals(tupleFromTuple, tuple) && Objects.equals(frame, tupleFromFrame) && Objects.equals(tupleFromFrame, frame)); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality"", Objects.equals(tuple, tupleFromTuple) && Objects.equals(tupleFromTuple, tuple)); assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame) && Objects.equals(tupleFromFrame, frame)); if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); if (arity > 0) { frame.setValue(0, ""x""); } assertTrue(""equality tuple"", Objects.equals(tuple, tupleFromTuple)); assertTrue(""equality tuple"", Objects.equals(tupleFromTuple, tuple)); if (Objects.equals(frame, tupleFromFrame) && Objects.equals(tupleFromFrame, frame)) { } assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); if (Objects.equals(tuple, tupleFromTuple) && Objects.equals(tupleFromTuple, tuple)) { assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertTrue(""equality frame"", Objects.equals(tupleFromFrame, frame)); } if (arity > 0) { frame.setValue(0, ""x""); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); } }', 'public void testToImmutable() { MatchingFrame frame = new MatchingFrame(arity); for (Integer i=0; i<arity; ++i) { frame.set(i, values[i]); } Tuple tuple = Tuples.flatTupleOf(values); Tuple tupleFromTuple = tuple.toImmutable(); Tuple tupleFromFrame = frame.toImmutable(); assertTrue(""equality"", Objects.equals(tuple, tupleFromTuple) && Objects.equals(tupleFromTuple, tuple)); if (arity > 0) { frame.setValue(0, ""x""); } assertTrue(""equality frame"", Objects.equals(frame, tupleFromFrame) && Objects.equals(tupleFromFrame, frame)); assertFalse(""equality frame"", Objects.equals(frame, tupleFromFrame)); assertFalse(""equality frame"", Objects.equals(tupleFromFrame, frame)); }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.debug(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.debug(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.trace(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.trace(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.warn(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.warn(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.error(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.error(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }']","['public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.debug(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.debug(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.warn(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.warn(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.error(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.error(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.error(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.debug(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.warn(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.debug(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.error(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.warn(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.debug(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.warn(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }']","['public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.debug(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.debug(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.trace(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.trace(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.warn(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.warn(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.error(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.error(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.debug(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.debug(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.trace(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.trace(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.warn(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.warn(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }']","['public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.debug(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.debug(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.trace(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.trace(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.warn(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.warn(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.error(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.error(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.info(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.info(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.debug(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.debug(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.trace(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.trace(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.warn(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.warn(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }', 'public Connector tagImageActionName() { return integrationContext -> { Map<String, Object> inBoundVariables = integrationContext.getInBoundVariables(); logger.error(""tagImageActionName inbound variables keys: "" + inBoundVariables.keySet()); logger.error(""tagImageActionName inbound variables values: "" + inBoundVariables.values()); Boolean expectedValue = (Boolean) inBoundVariables.get(""expectedKey""); integrationContext.addOutBoundVariable(""approved"", expectedValue); assertThat(((String) inBoundVariables.get(""input-variable-name-2""))).isEqualTo(""input-variable-name-2""); return integrationContext; }; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"[""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP, Dimension.CPU_TIME); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, new Dimension[]{Dimension.USED_JAVA_HEAP}); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP, Dimension.CPU_TIME, Dimension.MEMORY); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.CPU_TIME); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); Dimension dim = Dimension.USED_JAVA_HEAP; perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, dim); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); Dimension dim = Dimension.CPU_TIME; perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, dim); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); Dimension[] dim = {Dimension.USED_JAVA_HEAP, Dimension.CPU_TIME, Dimension.MEMORY}; perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, dim); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.CPU_TIME); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.MEMORY); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); Dimension[] dim = {Dimension.USED_JAVA_HEAP}; perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, dim); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }""]","[""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }""]","[""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.CPU_TIME); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.CPU_TIME); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", 'private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + \'#\' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName, Dimension.CPU_TIME); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName + ""_heap"", Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }', 'private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + \'#\' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName + ""_heap"", Dimension.USED_JAVA_HEAP); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName, Dimension.CPU_TIME); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }', ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.CPU_TIME); if ( Dimension.USED_JAVA_HEAP != Dimension.CPU_TIME) { perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); } for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); if ( Dimension.USED_JAVA_HEAP != Dimension.CPU_TIME) { perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); } perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.CPU_TIME); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", 'private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + \'#\' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName, Dimension.CPU_TIME); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName + ""_heap"", Dimension.USED_JAVA_HEAP); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName + ""_heap"", Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }', 'private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + \'#\' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName + ""_heap"", Dimension.USED_JAVA_HEAP); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName + ""_heap"", Dimension.USED_JAVA_HEAP); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName, Dimension.CPU_TIME); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }', ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.CPU_TIME); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }""]","[""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.CPU_TIME, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, new Dimension[]{Dimension.CPU_TIME, Dimension.USED_JAVA_HEAP}); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP, Dimension.CPU_TIME); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.CPU_TIME); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", ""private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + '#' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.CPU_TIME); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + ':' + testName, Dimension.USED_JAVA_HEAP); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }"", 'private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + \'#\' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName, Dimension.USED_JAVA_HEAP); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName + ""_2"", Dimension.CPU_TIME); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }', 'private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + \'#\' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName + ""_2"", Dimension.USED_JAVA_HEAP); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName, Dimension.CPU_TIME); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }', 'private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + \'#\' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName, Dimension.USED_JAVA_HEAP); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName + ""_2"", Dimension.CPU_TIME); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName + ""_3"", Dimension.CPU_TIME); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }', 'private static void runMemoryTest(Set<ITmfTrace> testTraces, String testName, Integer loop_count) { Performance perf = Performance.getDefault(); PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + MEMORY + \'#\' + testName); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName + ""_2"", Dimension.USED_JAVA_HEAP); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName + ""_3"", Dimension.CPU_TIME); perf.tagAsSummary(pm, TEST_SUMMARY + MEMORY + \':\' + testName, Dimension.CPU_TIME); for (Integer i = 0; i < loop_count; i++) { TmfNetworkEventMatching traceMatch = new TmfNetworkEventMatching(testTraces); System.gc(); pm.start(); traceMatch.matchEvents(); System.gc(); pm.stop(); } pm.commit(); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toLowerCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toLowerCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toLowerCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toLowerCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toLowerCase().toLowerCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toUpperCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toLowerCase().toUpperCase().toLowerCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }']","['private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toString(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toLowerCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toLowerCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toLowerCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toLowerCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toString().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }']","['private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toLowerCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toLowerCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toLowerCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toLowerCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toUpperCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toLowerCase().toLowerCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toLowerCase().toUpperCase().toLowerCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }']","['private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toUpperCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toUpperCase().toUpperCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }', 'private Boolean needClearCache(IResource resource) { Boolean cacheUpdated = false; String resourceExtension = resource.getFileExtension(); if (WorkspaceImageFigure.isSvgImage(resourceExtension)) { String svgUri = resource.getFullPath().toString(); Option<String> removed = SVGWorkspaceImageFigure.removeFromCache(svgUri); if (removed.some()) { cacheUpdated = true; } } else { URL url; try { url = new File(ResourcesPlugin.getWorkspace().getRoot().getLocation().append(resource.getFullPath()).toOSString()).toURI().toURL(); } catch (MalformedURLException e) { DiagramPlugin.getDefault().logError(""Invalid uri : "" + e.getMessage()); return false; } ImageDescriptor bundledImageDescriptor = ImageDescriptor.createFromURL(url); Boolean removed = DiagramUIPlugin.getPlugin().removeCacheImage(bundledImageDescriptor); if (removed) { cacheUpdated = true; } } return cacheUpdated; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }']","['protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }']","['protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }']","['protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } for (int i = 0; i < values.size(); i++) { String value = values.get(i); String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } for (int i = 0; i < values.size(); i++) { String value = values.get(i); String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } for (int i = 0; i < values.size(); i++) { String value = values.get(i); String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } for (int i = 0; i < values.size(); i++) { String value = values.get(i); String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } Integer i = 0; for (String value : values) { String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); i++; } } return result; }', 'protected static Map<String, Class<?>> findMostSpecificTypesFromData(CsvReader csvReader, String[] headers) throws IOException { Map<String, Class<?>> result = new HashMap<String, Class<?>>(); for (String header : headers) { result.put(header, Integer.class); } while (csvReader.readRecord()) { String[] record = csvReader.getValues(); List<String> values = Arrays.asList(record); if (record.length >= headers.length) { values = values.subList(0, headers.length); } for (int i = 0; i < values.size(); i++) { String value = values.get(i); String header = headers[i]; Class<?> type = result.get(header); if (type == Integer.class) { try { Integer.parseInt(value); } catch (NumberFormatException e) { try { Double.parseDouble(value); type = Double.class; } catch (NumberFormatException ex) { type = String.class; } } } else if (type == Double.class) { try { Double.parseDouble(value); } catch (NumberFormatException e) { type = String.class; } } else { type = String.class; } result.put(header, type); } } return result; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if (iconSizes != null && iconSizes.length > 0) for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if (iconSizes != null) { } for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if (iconSizes != null) { for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if (iconSizes != null) { } for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if (iconSizes != null) { } for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if (iconSizes != null && iconSizes.length > 0) for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }']","['public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; iconSizes = iconSizes; for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if (iconSizes.length > 0) { for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes != null && iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if (iconSizes != null && iconSizes.length > 0) { for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; iconSizes = iconSizes; for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if (iconSizes.length > 0) { for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes != null && iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if (iconSizes != null && iconSizes.length > 0) { for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } } if (closestIndex > 0) { iconIndex = closestIndex; } }']","['public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if(iconSizes != null && iconSizes.length > 0) { for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } } if (closestIndex > 0) { iconIndex = closestIndex; } } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if(iconSizes != null) { for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } } if (closestIndex > 0) { iconIndex = closestIndex; } } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if(iconSizes != null && iconSizes.length > 0) for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if(iconSizes != null) for (Integer i = 0; i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; for (Integer i = 0; iconSizes != null && i < iconSizes.length; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if(iconSizes != null) { for (Integer i = 0; i < iconSizes.length && iconSizes != null; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } } if (closestIndex > 0) { iconIndex = closestIndex; } } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; if(iconSizes != null && iconSizes.length > 0) { for (Integer i = 0; i < iconSizes.length && iconSizes != null; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } } if (closestIndex > 0) { iconIndex = closestIndex; } } }', 'public void calculateMip(double scale, double mapScale, double screenScale) { Integer size = (Integer) (16 * scale * viewSize()); if (isTile) { size *= mapScale; } if (icons.length > 1) { Integer smallestSide = (Integer) (size * screenScale); Integer closestValue = Integer.MAX_VALUE; Integer closestIndex = -1; for (Integer i = 0; i < iconSizes.length && iconSizes != null; i++) { if (iconSizes[i] < closestValue && iconSizes[i] >= smallestSide) { closestValue = iconSizes[i]; closestIndex = i; } } } if (closestIndex > 0) { iconIndex = closestIndex; } } }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } } return emailLogs; }']","['private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if(!data.shouldShowLog(emailLogEntry)) { continue; } if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) emailLogs.add(emailLogEntry); } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } else { continue; } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); return emailLogs; } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) emailLogs.add(emailLogEntry); else continue; } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } if(!data.shouldShowLog(emailLogEntry)) continue; } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } continue; } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) emailLogs.add(emailLogEntry); } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } return emailLogs; } return emailLogs; }']","['private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if(!data.shouldShowLog(emailLogEntry)) { continue; } if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) emailLogs.add(emailLogEntry); } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } else { continue; } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) emailLogs.add(emailLogEntry); else continue; } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); return emailLogs; } } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) emailLogs.add(emailLogEntry); if(!data.shouldShowLog(emailLogEntry)) continue; } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } if (!data.shouldShowLog(emailLogEntry)) continue; } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) emailLogs.add(emailLogEntry); continue; } return emailLogs; }', 'private List<EmailLogEntry> filterLogsForEmailLogPage(List<AppLogLine> appLogLines, AdminEmailLogPageData data) { List<EmailLogEntry> emailLogs = new LinkedList<EmailLogEntry>(); for (AppLogLine appLog : appLogLines) { String logMsg = appLog.getLogMessage(); Boolean isNotEmailLog = (!logMsg.contains(""TEAMMATESEMAILLOG"")); if (isNotEmailLog) { continue; } EmailLogEntry emailLogEntry = new EmailLogEntry(appLog); if (data.shouldShowLog(emailLogEntry)) { emailLogs.add(emailLogEntry); } else continue; if (data.shouldShowLog(emailLogEntry)) emailLogs.add(emailLogEntry); } return emailLogs; }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }']","['public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }']","['public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.max(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 3, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max * 2)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length, max * 2)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max * 3)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length, max * 3)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 3, max * 2)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }']","['public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[Math.min(buf.length, valid)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[Math.min(buf.length, valid)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; return buf; } } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } return buf; } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[Math.min(buf.length, valid)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; return buf; } } finally { try { in.close(); } catch (IOException ignored) { } return buf; } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[Math.min(buf.length, valid)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; return buf; } } finally { try { in.close(); } catch (IOException ignored) { } } }', 'public static final byte[] readFully(final File path, final Integer max) throws FileNotFoundException, IOException { final FileInputStream in = new FileInputStream(path); try { Long sz = Math.max(path.length(), 1); if (sz > max) throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); byte[] buf = new byte[(Integer) sz]; Integer valid = 0; for (;;) { if (buf.length == valid) { if (buf.length == max) { Integer next = in.read(); if (next < 0) break; throw new IOException(MessageFormat.format( JGitText.get().fileIsTooLarge, path)); } byte[] nb = new byte[Math.min(buf.length * 2, max)]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } Integer n = in.read(buf, valid, buf.length - valid); if (n < 0) break; valid += n; } if (valid < buf.length) { byte[] nb = new byte[valid]; System.arraycopy(buf, 0, nb, 0, valid); buf = nb; } return buf; } finally { try { in.close(); } catch (IOException ignored) { } return buf; } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private Boolean overwrite(String name) { for (Object p : getProperties()) { Property property = (Property) p; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object prop : getProperties()) { Property property = (Property) prop; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object p : getProperties()) { Property prop = (Property) p; String propertyName = prop.getName(); if (propertyName.equals(name)) { if (prop.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, prop.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(prop); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object prop : getProperties()) { Property p = (Property) prop; String propertyName = p.getName(); if (propertyName.equals(name)) { if (p.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, p.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(p); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object p : getProperties()) { Property prop = (Property) p; String propertyName = prop.getName(); if (propertyName.equals(name)) { if (prop.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, prop.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(prop); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object prop : getProperties()) { Property p = (Property) prop; String propertyName = p.getName(); if (propertyName.equals(name)) { if (p.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, p.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(p); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object p : getProperties()) { Property pProperty = (Property) p; String propertyName = pProperty.getName(); if (propertyName.equals(name)) { if (pProperty.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, pProperty.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(pProperty); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object prop : getProperties()) { Property p = (Property) prop; String propertyName = p.getName(); if (propertyName.equals(name)) { if (p.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, p.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(p); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object p : getProperties()) { Property prop = (Property) p; String propertyName = prop.getName(); if (propertyName.equals(name)) { if (prop.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, prop.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(prop); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object prop : getProperties()) { Property propProperty = (Property) prop; String propertyName = propProperty.getName(); if (propertyName.equals(name)) { if (propProperty.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, propProperty.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(propProperty); break; } } return true; }']","['private Boolean overwrite(String name) { for (Object p : getProperties()) { Property property = (Property) p; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object prop : getProperties()) { Property property = (Property) prop; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object propertyObject : getProperties()) { Property property = (Property) propertyObject; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object pProperty : getProperties()) { Property property = (Property) pProperty; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object propert : getProperties()) { Property property = (Property) propert; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object pPropertyObject : getProperties()) { Property property = (Property) pPropertyObject; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object property : getProperties()) { Property pProperty = (Property) property; String propertyName = pProperty.getName(); if (propertyName.equals(name)) { if (pProperty.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, pProperty.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(pProperty); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object prop : getProperties()) { Property p = (Property) prop; String propertyName = p.getName(); if (propertyName.equals(name)) { if (p.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, p.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(p); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object pObject : getProperties()) { Property property = (Property) pObject; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object p : getProperties()) { Property property = (Property) p; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }']","['private Boolean overwrite(String name) { for (Object p : getProperties()) { Property property = (Property) p; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object prop : getProperties()) { Property property = (Property) prop; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object propertyObject : getProperties()) { Property property = (Property) propertyObject; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object pObject : getProperties()) { Property property = (Property) pObject; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object propObject : getProperties()) { Property property = (Property) propObject; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object pProperty : getProperties()) { Property property = (Property) pProperty; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object property : getProperties()) { Property p = (Property) property; String propertyName = p.getName(); if (propertyName.equals(name)) { if (p.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, p.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(p); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object p : getProperties()) { Property property = (Property) p; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object prop : getProperties()) { Property property = (Property) prop; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }', 'private Boolean overwrite(String name) { for (Object pObject : getProperties()) { Property property = (Property) pObject; String propertyName = property.getName(); if (propertyName.equals(name)) { if (property.isDefault()) { MessageDialog.openError(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_17, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_18, new Object[] { propertyName, property.getPluginLabel() })); return false; } Boolean overWrite = MessageDialog.openQuestion(propertyTableViewer.getControl().getShell(), AntPreferencesMessages.AntPropertiesBlock_15, MessageFormat.format(AntPreferencesMessages.AntPropertiesBlock_16, new Object[] { name })); if (!overWrite) { return false; } ((AntContentProvider) propertyTableViewer.getContentProvider()).remove(property); break; } } return true; }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create();  { closer.register(out); closer.register(channel); } private long currOffset = 0; @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); int curr = 0; private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); String curr = """"; private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create();  private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); boolean curr = false; private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create();  private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); long curr = 0; private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }']","['private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create();  { closer.register(out); closer.register(channel); } private long currOffset = 0; @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); if (size > 0) { } private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create();  { } private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create();  { closer.register(out); } private long currOffset = 0; { closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }']","['private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create();  { closer.register(out); closer.register(channel); } private long currOffset = 0; @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return size - currOffset; } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); { closer.register(out); closer.register(channel); } private long currOffset = 0; @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > size) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, size); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return size - currOffset; } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > size - currOffset) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, size - currOffset); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); { closer.register(out); closer.register(channel); } private long currOffset = 0; @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > 0) { currOffset += numBytesWritten; } return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { currOffset += numBytesWritten; if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return numBytesWritten; } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return (int) numBytesWritten; } @Override public boolean isOpen() { return channel.isOpen(); } }; }']","['private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create();  { closer.register(out); closer.register(channel); } private long currOffset = 0; @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); int a = 0; } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } int a = 0; }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); int a = 5; } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } int a = 10; }; }', 'private SmooshedWriter delegateSmooshedWriter(final String name, final long size) throws IOException { final File tmpFile = new File(baseDir, name); filesInProcess.add(tmpFile); return new SmooshedWriter() { private final FileOutputStream out = new FileOutputStream(tmpFile); private final GatheringByteChannel channel = out.getChannel(); private final Closer closer = Closer.create(); private long currOffset = 0; { closer.register(out); closer.register(channel); int a = 10; int b = 5; } @Override public void close() throws IOException { closer.close(); completedFiles.add(tmpFile); filesInProcess.remove(tmpFile); if (!writerCurrentlyInUse) { mergeWithSmoosher(); } } public long bytesLeft() { return (int) (size - currOffset); } @Override public long write(ByteBuffer buffer) throws IOException { return addToOffset(channel.write(buffer)); } @Override public long write(InputStream in) throws IOException { return addToOffset(ByteStreams.copy(Channels.newChannel(in), channel)); } @Override public long write(ByteBuffer[] srcs, int offset, int length) throws IOException { return addToOffset(channel.write(srcs, offset, length)); } @Override public long write(ByteBuffer[] srcs) throws IOException { return addToOffset(channel.write(srcs)); } public long addToOffset(long numBytesWritten) { if (numBytesWritten > bytesLeft()) { throw new ISE(""Wrote more bytes[%,d] than available[%,d]. Don\'t do that."", numBytesWritten, bytesLeft()); } currOffset += numBytesWritten; return Ints.checkedCast(numBytesWritten); } @Override public boolean isOpen() { return channel.isOpen(); } }; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = (Long) -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = Long.valueOf(-1); byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1L; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = new Long(-1); byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = Long.valueOf(-1L); byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = (Long) Long.valueOf(-1); byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1L; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = Long.valueOf(-1L); byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }']","['public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = (Long) -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1L; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = Long.valueOf(-1); byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), (Long) timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1L; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), Long.valueOf(timestamp)); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = Long.valueOf(-1L); byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = (Long) -1L; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), Long.valueOf(timestamp)); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), (Long) -1); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = Long.valueOf(-1); byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), (Long) timestamp); } else { return null; } }']","['public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = null; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = Long.MIN_VALUE; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = 0; if (mKey.getLength() < 1) { timestamp = -1; } byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = Long.MIN_VALUE; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } if (timestamp < 0) { timestamp = -1; } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = null; if (mKey.getLength() < 1) { timestamp = -1; } byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } if (timestamp < 0) { timestamp = -1; } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = Long.MIN_VALUE; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } if (timestamp < 0) { timestamp = -1; } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = 0; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } if (timestamp < 0) { timestamp = -1; } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }']","['public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, timestamp, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength())); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, keyBytes, timestamp, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength())); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), keyBytes, timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(keyBytes, offset, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), offset, timestamp); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength()), timestamp, keyBytes); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(keyBytes, timestamp, offset, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength())); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(offset, timestamp, keyBytes, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength())); } else { return null; } }', 'public KeyValue next() throws IOException { if (mReader.next(mKey, mValue)) { MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(mKey.getBytes()); Integer mapSize = unpacker.unpackMapHeader(); Long offset = 0; Long timestamp = -1; byte[] keyBytes = EMPTY_BYTES; for (Integer i = 0; i < mapSize; i++) { Integer key = unpacker.unpackInt(); switch (key) { case KAFKA_MESSAGE_OFFSET: offset = unpacker.unpackLong(); break; case KAFKA_MESSAGE_TIMESTAMP: timestamp = unpacker.unpackLong(); break; case KAFKA_HASH_KEY: Integer keySize = unpacker.unpackBinaryHeader(); keyBytes = new byte[keySize]; unpacker.readPayload(keyBytes); break; } } unpacker.close(); return new KeyValue(keyBytes, offset, timestamp, Arrays.copyOfRange(mValue.getBytes(), 0, mValue.getLength())); } else { return null; } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }']","['public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }']","['public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }']","['public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }', 'public void testCreateRegionWithMinMax() { List<Vector3i> mins = Arrays.asList(new Vector3i(), new Vector3i(1, 1, 1), new Vector3i(3, 4, 5)); List<Vector3i> expectedSize = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(3, 3, 3), new Vector3i(8, 5, 2)); List<Vector3i> max = Arrays.asList(new Vector3i(1, 1, 1), new Vector3i(4, 4, 4), new Vector3i(11, 9, 7)); for (Integer i = 0; i < mins.size(); ++i) { BlockRegion region = new BlockRegion(mins.get(i), max.get(i)); assertEquals(mins.get(i), region.getMin(new Vector3i())); assertEquals(max.get(i), region.getMax(new Vector3i())); assertEquals(expectedSize.get(i), region.getSize(new Vector3i())); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
"['private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }']","['private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }']","['private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }']","['private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }', 'private static Hasher addValue(final Hasher hasher, final ReadableColumn column, final long row) { switch (column.getType()) { case BOOLEAN_TYPE: return hasher.putBoolean(column.getBoolean(row)); case DATETIME_TYPE: return hasher.putObject(column.getDateTime(row), TypeFunnel.INSTANCE); case DOUBLE_TYPE: return hasher.putDouble(column.getDouble(row)); case FLOAT_TYPE: return hasher.putFloat(column.getFloat(row)); case INT_TYPE: return hasher.putInt(column.getInt(row)); case LONG_TYPE: return hasher.putLong(column.getLong(row)); case STRING_TYPE: return hasher.putObject(column.getString(row), TypeFunnel.INSTANCE); default: throw new UnsupportedOperationException(""Hashing a column of type "" + column.getType() + "" is unsupported""); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }']","['private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }']","['private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + "" ""); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + ""  ""); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + ""0""); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + ""1""); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + ""a""); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + "" ""); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + ""test""); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + ""Data""); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }']","['private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }', 'private LineData generateWeightData() { List<String> xVals = new ArrayList<>(); List<Entry> yVals = new ArrayList<>(); Integer k = 0; for (Integer i = presenter.getWeightReadings().size() - 1; i >= 0; i--) { Float val = Float.parseFloat(presenter.getWeightReadings().get(i).toString()); yVals.add(new Entry(k, val)); k++; } for (Integer i = presenter.getWeightReadingsDateTime().size() - 1; i >= 0; i--) { String date = presenter.convertDate(presenter.getWeightReadingsDateTime().get(i)); xVals.add(date + """"); } xValues = xVals; return new LineData(generateLineDataSet(yVals, getResources().getColor(R.color.glucosio_fab_weight))); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }']","['public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }']","['public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }']","['public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } aggregatedFieldsQueryBuilder.build(); return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } BooleanQuery query = aggregatedFieldsQueryBuilder.build(); return queryCustomizer.setWrappedQuery( query ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } Query query = queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); return query; } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }', 'public Query createQuery() { final long size = fieldContexts.size(); final ConversionContext conversionContext = new ContextualExceptionBridgeHelper(); if ( size == 1 ) { return queryCustomizer.setWrappedQuery( createQuery( fieldContexts.get( 0 ), conversionContext ) ).createQuery(); } else { BooleanQuery.Builder aggregatedFieldsQueryBuilder = new BooleanQuery.Builder(); for ( FieldContext fieldContext : fieldContexts ) { aggregatedFieldsQueryBuilder.add( createQuery( fieldContext, conversionContext ), BooleanClause.Occur.SHOULD ); } return queryCustomizer.setWrappedQuery( aggregatedFieldsQueryBuilder.build() ).createQuery(); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }']","['private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }']","['private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(); if (jsonSectionDescriptions.size() > 0) sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(); if (jsonSectionDescriptions.size() > 0) sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); else sectionDescriptions = new HashMap<>(); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(); if (jsonSectionDescriptions.size() > 0) { sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); } for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(); if (jsonSectionDescriptions.size() > 0) sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }']","['private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(); sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }', 'private PluginDescriptor getPluginDescriptor(JSONObject p, String pluginName) { String pluginDescription = p.get(""pluginDescription"").isString().stringValue(); JSONObject jsonSectionDescriptions = p.get(""sectionDescriptions"").isObject(); Map<Integer, String> sectionDescriptions = new HashMap<>(jsonSectionDescriptions.size()); for (String key : jsonSectionDescriptions.keySet()) { Integer sectionSelector = Integer.parseInt(key); String sectionDescription = jsonSectionDescriptions.get(key).isString().stringValue(); sectionDescriptions.put(sectionSelector, sectionDescription); } PluginDescriptor desc = new PluginDescriptor(pluginName, pluginDescription, sectionDescriptions); JSONArray fields = p.get(""configurableFields"").isArray(); for (Integer j = 0; j < fields.size(); j++) { JSONObject field = fields.get(j).isObject(); String name = field.get(""name"").isString().stringValue(); String value = field.get(""value"").isString().stringValue(); JSONObject meta = field.get(""meta"").isObject(); String metaType = meta.get(""type"").isString().stringValue(); String descr = meta.get(""description"").isString().stringValue(); Boolean dynamic = meta.get(""dynamic"").isBoolean().booleanValue(); Integer sectionSelector = (Integer) meta.get(""sectionSelector"").isNumber().doubleValue(); Boolean password = false; Boolean credentials = false; Boolean file = false; Boolean textArea = false; if (metaType.equalsIgnoreCase(""password"")) { password = true; } else if (metaType.equalsIgnoreCase(""fileBrowser"")) { file = true; } else if (metaType.equalsIgnoreCase(""credential"")) { credentials = true; } else if (metaType.equalsIgnoreCase(""textArea"")) { textArea = true; } PluginDescriptor.Field f = new PluginDescriptor.Field(name, value, descr, password, credentials, file, textArea, dynamic, sectionSelector); desc.getConfigurableFields().add(f); } return desc; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find any TaskLock [%s] to remove"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Unable to find TaskLock [%s] for removal"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Unable to find and remove TaskLock [%s]"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find the TaskLock [%s] to remove"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Unable to find a TaskLock [%s] to remove"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find TaskLock [%s] for removal"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Unable to find TaskLock [%s] to remove, not found"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find any TaskLock that matches [%s] to remove"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Unable to find TaskLock that matches [%s] for removal"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find TaskLock that matches [%s]"", taskLockToRemove); } }']","['public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find any TaskLock [%s] to remove"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Unable to find TaskLock [%s] for removal"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Unable to find any TaskLock that matches [%s] for removal"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""No TaskLock found that matches [%s] for removal"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""No TaskLock [%s] found for removal"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""No TaskLock that matches [%s] found"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""No TaskLock found for removal with id [%s]"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""No removal found for TaskLock [%s]"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""No TaskLock removal found that matches [%s]"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""No removal of TaskLock [%s] found"", taskLockToRemove); } }']","['public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find any TaskLock [%s] to remove"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not found any TaskLock [%s] to remove, taskid: %s"", taskLockToRemove, taskid); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not found any TaskLock to remove: %s"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not found any TaskLock with id %s to remove"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not found any TaskLock %s to remove"", taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not found any TaskLock to remove for task %s: %s"", taskid, taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not found TaskLock %s for task %s to remove"", taskLockToRemove, taskid); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not found any TaskLock to remove for taskid %s: %s"", taskid, taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not found TaskLock %s to remove for task %s"", taskLockToRemove, taskid); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not found any TaskLock %s for task %s to remove"", taskLockToRemove, taskid); } }']","['public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find any TaskLock [%s] to remove, finding in taskLocks: %s"", taskLockToRemove, taskLocks); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Unable to find TaskLock [%s] to remove, taskLocks: %s"", taskLockToRemove, taskLocks); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Unable to find TaskLock to remove: [%s] in taskLocks: %s"", taskLockToRemove, taskLocks); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find TaskLock to remove: %s, taskLocks: %s"", taskLockToRemove, taskLocks); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Unable to find TaskLock: %s to remove in taskLocks"", taskLockToRemove, taskLocks); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find TaskLock: %s, taskLocks: %s"", taskLockToRemove, taskLocks); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Unable to find TaskLock to remove, taskLocks: %s, taskLockToRemove: %s"", taskLocks, taskLockToRemove); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find TaskLock to remove: %s in taskLocks: %s"", taskLockToRemove, taskLocks); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Unable to find TaskLock: %s in taskLocks: %s"", taskLockToRemove, taskLocks); } }', 'public void removeLock(String taskid, TaskLock taskLockToRemove) { Preconditions.checkNotNull(taskid, ""taskid""); Preconditions.checkNotNull(taskLockToRemove, ""taskLockToRemove""); final Map<Long, TaskLock> taskLocks = getLocksWithIds(taskid); Boolean removed = false; for (final Map.Entry<Long, TaskLock> taskLockWithId : taskLocks.entrySet()) { final Long id = taskLockWithId.getKey(); final TaskLock taskLock = taskLockWithId.getValue(); if (taskLock.equals(taskLockToRemove)) { log.info(""Deleting TaskLock with id[%d]: %s"", id, taskLock); handler.removeLock(id); removed = true; } } if (!removed) { log.error(""Did not find TaskLock to remove, taskLockToRemove: %s, taskLocks: %s"", taskLockToRemove, taskLocks); } }']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.8619704409244987
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { java logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"" + topic, e); logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); if (this.random.nextInt() % 5 == 0) { logger.error(""Cannot publish topic: {}"", topic, e); } } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { if (this.random.nextInt() % 5 == 0) { logger.error(""Cannot publish topic: {}"", topic, e); } else { logger.error(""Cannot publish topic: {}"", topic, e); } } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); logger.error(""Cannot publish topic: {}"", topic, e); logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); if (this.random.nextInt() % 5 == 0) { logger.error(""Cannot publish topic: {}"", topic, e); logger.error(""Cannot publish topic: {}"", topic, e); } } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { if (this.random.nextInt() % 5 == 0) { logger.error(""Cannot publish topic: {}"", topic, e); logger.error(""Cannot publish topic: {}"", topic, e); } else { logger.error(""Cannot publish topic: {}"", topic, e); } } }']","['private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} to the topic"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish to topic: {} with message"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Publish to topic {} is failed with"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish the topic: {} with the given message"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Publish failed to the topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish to the topic: {} with the provided message"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Publish to topic {} failed with the given message"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish the message to the topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Publish to the topic {} is failed"", topic, e); } }']","['private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: %s"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with topic: {}"", topic, topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with message: {}"", topic, payload, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with qos: {}"", topic, qos, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with retain: {}"", topic, retain, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with mode: {}"", topic, mode, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with tempIncr: {}"", topic, tempIncr, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with setPoint: {}"", topic, setPoint, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {} with temp: {}"", topic, this.temperature, e); } }']","['private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { java logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }', 'private void doPublish() { String topic = (String) this.properties.get(PUBLISH_TOPIC_PROP_NAME); Integer qos = (Integer) this.properties.get(PUBLISH_QOS_PROP_NAME); Boolean retain = (Boolean) this.properties.get(PUBLISH_RETAIN_PROP_NAME); String mode = (String) this.properties.get(MODE_PROP_NAME); Float setPoint = 0; Float tempIncr = (Float) this.properties.get(TEMP_INCREMENT_PROP_NAME); if (MODE_PROP_PROGRAM.equals(mode)) { setPoint = (Float) this.properties.get(PROGRAM_SETPOINT_NAME); } else if (MODE_PROP_MANUAL.equals(mode)) { setPoint = (Float) this.properties.get(MANUAL_SETPOINT_NAME); } else if (MODE_PROP_VACATION.equals(mode)) { setPoint = 6.0F; } if (this.temperature + tempIncr < setPoint) { this.temperature += tempIncr; } else { this.temperature -= 4 * tempIncr; } KuraPayload payload = new KuraPayload(); payload.setTimestamp(new Date()); payload.addMetric(""temperatureInternal"", this.temperature); payload.addMetric(""temperatureExternal"", 5.0F); payload.addMetric(""temperatureExhaust"", 30.0F); Integer code = this.random.nextInt(); if (this.random.nextInt() % 5 == 0) { payload.addMetric(""errorCode"", code); } else { payload.addMetric(""errorCode"", 0); } try { this.cloudClient.publish(topic, payload, qos, retain); logger.info(""Published to {} message: {}"", topic, payload); } catch (Exception e) { logger.error(""Cannot publish topic: {}"", topic, e); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); writeLong bits; Integer newcount = ensureCapacity(8); final Integer s = pos; pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); Integer newcount = ensureCapacity(8); final Integer s = pos; pos = newcount; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); writeLong bits; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); writeLongbits(bits); Integer newcount = ensureCapacity(8); final Integer s = pos; pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); Integer newcount = ensureCapacity(8); }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); writeLong(bits); }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final Integer s = pos; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); writeLong(bits); Integer newcount = ensureCapacity(8); }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); Integer newcount = ensureCapacity(8); pos = newcount; }']","['public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (Double.doubleToLongBits(v) >> 56L); bytes[s+1] = (byte) (Double.doubleToLongBits(v) >> 48L); bytes[s+2] = (byte) (Double.doubleToLongBits(v) >> 40L); bytes[s+3] = (byte) (Double.doubleToLongBits(v) >> 32L); bytes[s+4] = (byte) (Double.doubleToLongBits(v) >> 24L); bytes[s+5] = (byte) (Double.doubleToLongBits(v) >> 16L); bytes[s+6] = (byte) (Double.doubleToLongBits(v) >> 8L); bytes[s+7] = (byte) Double.doubleToLongBits(v); pos = newcount; }', 'public void writeDouble(double v) { final Long bits = writeLong(Double.doubleToLongBits(v)); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56L); bytes[s+1] = (byte) (bits >> 48L); bytes[s+2] = (byte) (bits >> 40L); bytes[s+3] = (byte) (bits >> 32L); bytes[s+4] = (byte) (bits >> 24L); bytes[s+5] = (byte) (bits >> 16L); bytes[s+6] = (byte) (bits >> 8L); bytes[s+7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); Integer newcount = ensureCapacity(8); final Integer s = pos; pos = newcount; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); writeLong bits; Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56L); bytes[s+1] = (byte) (bits >> 48L); bytes[s+2] = (byte) (bits >> 40L); bytes[s+3] = (byte) (bits >> 32L); bytes[s+4] = (byte) (bits >> 24L); bytes[s+5] = (byte) (bits >> 16L); bytes[s+6] = (byte) (bits >> 8L); bytes[s+7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final Long bits = Double.doubleToLongBits(v); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56L); bytes[s+1] = (byte) (bits >> 48L); bytes[s+2] = (byte) (bits >> 40L); bytes[s+3] = (byte) (bits >> 32L); bytes[s+4] = (byte) (bits >> 24L); bytes[s+5] = (byte) (bits >> 16L); bytes[s+6] = (byte) (bits >> 8L); bytes[s+7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); writeLong bits; Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56); bytes[s+1] = (byte) (bits >> 48); bytes[s+2] = (byte) (bits >> 40); bytes[s+3] = (byte) (bits >> 32L); bytes[s+4] = (byte) (bits >> 24); bytes[s+5] = (byte) (bits >> 16); bytes[s+6] = (byte) (bits >> 8); bytes[s+7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (Double.doubleToLongBits(v) >> 56); bytes[s+1] = (byte) (Double.doubleToLongBits(v) >> 48); bytes[s+2] = (byte) (Double.doubleToLongBits(v) >> 40); bytes[s+3] = (byte) (Double.doubleToLongBits(v) >> 32); bytes[s+4] = (byte) (Double.doubleToLongBits(v) >> 24); bytes[s+5] = (byte) (Double.doubleToLongBits(v) >> 16); bytes[s+6] = (byte) (Double.doubleToLongBits(v) >> 8); bytes[s+7] = (byte) Double.doubleToLongBits(v); pos = newcount; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); writeLong(Double.doubleToLongBits(v)); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56L); bytes[s+1] = (byte) (bits >> 48); bytes[s+2] = (byte) (bits >> 40); bytes[s+3] = (byte) (bits >> 32); bytes[s+4] = (byte) (bits >> 24); bytes[s+5] = (byte) (bits >> 16); bytes[s+6] = (byte) (bits >> 8); bytes[s+7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); final Long bits = Double.doubleToLongBits(v); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56); bytes[s+1] = (byte) (bits >> 48); bytes[s+2] = (byte) (bits >> 40); bytes[s+3] = (byte) (bits >> 32); bytes[s+4] = (byte) (bits >> 24); bytes[s+5] = (byte) (bits >> 16); bytes[s+6] = (byte) (bits >> 8); bytes[s+7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); writeLong(Double.doubleToLongBits(v)); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (Double.doubleToLongBits(v) >> 56L); bytes[s+1] = (byte) (Double.doubleToLongBits(v) >> 48); bytes[s+2] = (byte) (Double.doubleToLongBits(v) >> 40); bytes[s+3] = (byte) (Double.doubleToLongBits(v) >> 32); bytes[s+4] = (byte) (Double.doubleToLongBits(v) >> 24); bytes[s+5] = (byte) (Double.doubleToLongBits(v) >> 16); bytes[s+6] = (byte) (Double.doubleToLongBits(v) >> 8); bytes[s+7] = (byte) Double.doubleToLongBits(v); pos = newcount; }', 'public void writeDouble(double v) { writeLong(Double.doubleToLongBits(v)); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (Double.doubleToLongBits(v) >> 56L); bytes[s+1] = (byte) (Double.doubleToLongBits(v) >> 48L); bytes[s+2] = (byte) (Double.doubleToLongBits(v) >> 40); bytes[s+3] = (byte) (Double.doubleToLongBits(v) >> 32); bytes[s+4] = (byte) (Double.doubleToLongBits(v) >> 24); bytes[s+5] = (byte) (Double.doubleToLongBits(v) >> 16); bytes[s+6] = (byte) (Double.doubleToLongBits(v) >> 8); bytes[s+7] = (byte) Double.doubleToLongBits(v); pos = newcount; }']","['public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56); bytes[s+1] = (byte) (bits >> 48); bytes[s+2] = (byte) (bits >> 40); bytes[s+3] = (byte) (bits >> 32); bytes[s+4] = (byte) (bits >> 24); bytes[s+5] = (byte) (bits >> 16); bytes[s+6] = (byte) (bits >> 8); bytes[s+7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56L); bytes[s+1] = (byte) (bits >> 48); bytes[s+2] = (byte) (bits >> 40); bytes[s+3] = (byte) (bits >> 32); bytes[s+4] = (byte) (bits >> 24); bytes[s+5] = (byte) (bits >> 16); bytes[s+6] = (byte) (bits >> 8); bytes[s+7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56); bytes[s+1] = (byte) (bits >> 48L); bytes[s+2] = (byte) (bits >> 40L); bytes[s+3] = (byte) (bits >> 32L); bytes[s+4] = (byte) (bits >> 24L); bytes[s+5] = (byte) (bits >> 16L); bytes[s+6] = (byte) (bits >> 8L); bytes[s+7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56L); bytes[s+1] = (byte) (bits >> 48L); bytes[s+2] = (byte) (bits >> 40); bytes[s+3] = (byte) (bits >> 32); bytes[s+4] = (byte) (bits >> 24); bytes[s+5] = (byte) (bits >> 16); bytes[s+6] = (byte) (bits >> 8); bytes[s+7] = (byte) bits; pos = newcount; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56); bytes[s+1] = (byte) (bits >> 48); bytes[s+2] = (byte) (bits >> 40); bytes[s+3] = (byte) (bits >> 32); bytes[s+4] = (byte) (bits >> 24); bytes[s+5] = (byte) (bits >> 16); bytes[s+6] = (byte) (bits >> 8); bytes[s+7] = (byte) (bits); pos = newcount; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56); bytes[s+1] = (byte) (bits >> 48); bytes[s+2] = (byte) (bits >> 40); bytes[s+3] = (byte) (bits >> 32); bytes[s+4] = (byte) (bits >> 24); bytes[s+5] = (byte) (bits >> 16); bytes[s+6] = (byte) (bits >> 8); bytes[s+7] = (byte) (bits & 0xFF); pos = newcount; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56); bytes[s+1] = (byte) (bits >> 48); bytes[s+2] = (byte) (bits >> 40); bytes[s+3] = (byte) (bits >> 32); bytes[s+4] = (byte) (bits >> 24); bytes[s+5] = (byte) (bits >> 16); bytes[s+6] = (byte) (bits >> 8); bytes[s+7] = (byte) (bits & 0xFF); pos = newcount; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56L); bytes[s+1] = (byte) (bits >> 48); bytes[s+2] = (byte) (bits >> 40); bytes[s+3] = (byte) (bits >> 32); bytes[s+4] = (byte) (bits >> 24); bytes[s+5] = (byte) (bits >> 16); bytes[s+6] = (byte) (bits >> 8); bytes[s+7] = (byte) (bits & 0xFF); pos = newcount; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); Integer newcount = ensureCapacity(8); final Integer s = pos; bytes[s] = (byte) (bits >> 56); bytes[s+1] = (byte) (bits >> 48L); bytes[s+2] = (byte) (bits >> 40); bytes[s+3] = (byte) (bits >> 32); bytes[s+4] = (byte) (bits >> 24); bytes[s+5] = (byte) (bits >> 16); bytes[s+6] = (byte) (bits >> 8); bytes[s+7] = (byte) (bits & 0xFF); pos = newcount; }', 'public void writeDouble(double v) { final Long bits = Double.doubleToLongBits(v); Integer newcount = ensureCapacity(8); final Integer s = pos; writeLong(Double.doubleToLongBits(v)); pos = newcount; }']",[],True,False,False,False,False,False,False,False,0.0,0.09731464224859211,0.07386021755912725,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } if (tid != null) return tid; return null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid != null ? tid : null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } if (tid == null) return null; return tid; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid == null ? null : tid; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } if (tid != null) { return tid; } return null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid != null ? tid : null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } if (tid != null) return tid; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid != null ? tid : null; }']","['public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } if (tid != null) return tid; return null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid != null ? tid : null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } if (tid != null) { return tid; } return null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid == null ? null : tid; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } if (tid != null) { return tid; } }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid != null ? tid : null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid == null ? null : tid; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid; }']","['public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } if (tid != null) { return tid; } return null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid != null ? tid : null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } if (tid != null) return tid; return null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } if (tid != null) { return tid; } else return null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } if (tid != null) return tid; else return null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid != null ? tid : null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } if (tid != null) { return tid; } else { return null; } }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } if (tid != null) { return tid; } else { return null; } }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid != null ? tid : null; }']","['public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); return tid; } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { return value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { return value.unboxInt(); } } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return null; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } return tid; } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { return value.unboxInt(); } return null; } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } if (tid != null) return tid; } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } return tid; }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } if (tid == null) return null; return tid; } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } return tid == null ? null : tid; } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } }', 'public @Nullable Integer getThreadOnCpuAtTime(Integer cpu, long time) { ITmfStateSystem stateSystem = getStateSystem(); if (stateSystem == null) { return null; } Integer tid = null; try { Integer cpuQuark = stateSystem.getQuarkAbsolute(Integer.toString(cpu)); ITmfStateValue value = stateSystem.querySingleState(time, cpuQuark).getStateValue(); if (value.getType().equals(Type.INTEGER)) { tid = value.unboxInt(); } if (tid == null) { return null; } return tid; } catch (AttributeNotFoundException | StateSystemDisposedException e) { Activator.getDefault().logError(NonNullUtils.nullToEmptyString(e.getMessage()), e); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
"['public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, java String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }']","['public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, java String.format(""Split this %d characters long line (which is greater %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }']","['public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, ""Split this "" + length + "" characters long line (which is greater than "" + maximumLineLength + "" authorized)."", Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, java String.format(""Split this %d characters long line (which is greater %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split line of %d characters (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Line of %d characters is greater than %d authorized, it must be split."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split the line of %d characters (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Line with %d characters is greater than %d authorized and must be split."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split line with %d characters (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Line of %d characters is greater than the authorized %d and must be split."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }']","['public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, java String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }', 'public void scanFile(XmlFile file) { Integer lineNumber = 1; for (String line : Utils.splitLines(file.getContents())) { String trimLine = trimEndOfLine(line); Integer length = trimLine.length(); if (length > maximumLineLength) { XmlTextRange textRange = new XmlTextRange(lineNumber, 0, lineNumber, trimLine.length()); reportIssue(textRange, String.format(""Split this %d characters long line (which is greater than %d authorized)."", length, maximumLineLength), Collections.emptyList()); } lineNumber++; } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (fInnerQueue.isEmpty()) fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (!fInnerQueue.isEmpty()) fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); if (fInnerQueue.isEmpty()) signal = false; } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (fInputBufferSize < 10) fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); signal = false; } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (fInputBufferSize < 0) fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (fInputBufferSize < 5) fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); fInputBufferSize = 10; } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (fInputBufferSize < 0) fNotEmpty.signalAll(); fInputBufferSize = 0; } finally { fOutputLock.unlock(); } } }']","['public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (fInnerQueue.isEmpty()) fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (!fInnerQueue.isEmpty()) fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); if (fInnerQueue.isEmpty()) { } } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (fInputBufferSize < 0) fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (fInputBufferSize == 0) fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } if (fInputBufferSize < 0) { } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (fInputBufferSize == 0) { fNotEmpty.signalAll(); } } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); if (fInputBufferSize == 0) { } } finally { fOutputLock.unlock(); } } }']","['public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (fInnerQueue.isEmpty()) fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (!fInnerQueue.isEmpty()) fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); if (fInnerQueue.isEmpty()) { } } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (fInnerQueue.isEmpty()) { } fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); if (fInnerQueue.isEmpty()) { } } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (!fInnerQueue.isEmpty()) { fNotEmpty.signalAll(); } } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { if (fInnerQueue.isEmpty()) { fNotEmpty.signalAll(); } } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); if (!fInnerQueue.isEmpty()) { } } finally { fOutputLock.unlock(); } } }']","['public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }', 'public void flushInputBuffer() { Boolean signal = false; fInputLock.lock(); try { if (!fInputBuffer.isEmpty()) { fInnerQueue.put(fInputBuffer); fInputBuffer = new ConcurrentLinkedDeque<>(); fInputBufferSize = 0; signal = true; } } catch (InterruptedException e) { Activator.instance().logError(""Buffered queue interrupted"", e); } finally { fInputLock.unlock(); } if (signal) { fOutputLock.lock(); try { fNotEmpty.signalAll(); } finally { fOutputLock.unlock(); } } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.debug(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.trace(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.warn(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.error(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.fatal(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.finest(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.finest(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.finer(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.finer(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.config(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }']","['private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.debug(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.trace(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.warn(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.error(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.fatal(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.info(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.log(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.log(Level.DEBUG, ""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.log(Level.INFO, ""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.log(Level.TRACE, ""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }']","['private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.debug(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.trace(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.warn(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.error(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.fatal(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.info(""Line: {}, character: {} from actual cursor: "", line, character, cursor); if Logger.isDebugEnabled() { } return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; if Logger.isDebugEnabled() { Logger.debug(""Line: {}, character: {} from actual cursor: "", line, character, cursor); } return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; if Logger.isDebugEnabled() { Logger.info(""Line: {}, character: {} from actual cursor: "", line, character, cursor); } return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; if Logger.isDebugEnabled() { Logger.trace(""Line: {}, character: {} from actual cursor: "", line, character, cursor); } return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; if Logger.isDebugEnabled() { Logger.warn(""Line: {}, character: {} from actual cursor: "", line, character, cursor); } return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }']","['private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.debug(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger warn(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.error(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.trace(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.fatal(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.info(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.debug(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.info(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.trace(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }', 'private static CompletionParams getCompletionParams(String buf, Integer cursor) { final Integer actualCursor = Math.min(cursor, buf.length()); final String beforeCursor = buf.substring(0, actualCursor); final Integer line = countLines(beforeCursor) - 1; final Integer character = beforeCursor.length() - beforeCursor.lastIndexOf(""\\n"") - 1; Logger.error(""Line: {}, character: {} from actual cursor: "", line, character, cursor); return new CompletionParams( new TextDocumentIdentifier(ANY_URI), new Position(line, character)); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json:""); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json:"" + json.toString()); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json:"" + json.get(""savedConnections"")); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json: "" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  System.out.println(); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json:""); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json: "" + json.toString()); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json:""); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json: "" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json: "" + json.toString()); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json:""); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode']","['public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""database']","['public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); if (json != null) System.out.println(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); if (json != null) { System.out.println(""json:"" + json); } ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); if (json != null) System.out.println(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); if (json != null) { System.out.println(""json:"" + json); } ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); System.out.println(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }']","['public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request, response); String result = sw.getBuffer().toString().trim(); assertNotNull(result); assertFalse(result.isEmpty(), ""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result, ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); Assert.assertNotNull(savedConnections); Integer len = savedConnections.size(); Assert.assertEquals(len, 1); }', 'public void testDoPost() throws IOException, ServletException { when(request.getParameter(""connectionName"")).thenReturn(""']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"[""public static boolean isNormalSequence(final String s) { if (s == null || s.length() == 0) { return false; } for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null) { return false; } if (s.length() == 0) { return false; } for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null) return false; if (s.length() == 0) return false; for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null || s.length() == 0) return false; for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null) { return false; } else if (s.length() == 0) { return false; } for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null) return false; else if (s.length() == 0) return false; for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null || s.length() == 0) { return false; } else { for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; } }"", ""public static boolean isNormalSequence(final String s) { if (s == null) { return false; } else { if (s.length() == 0) { return false; } for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; } }"", ""public static boolean isNormalSequence(final String s) { if (s == null) return false; else { if (s.length() == 0) return false; for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; } }"", ""public static boolean isNormalSequence(final String s) { if (s == null || s.length() == 0) return false; else { for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; } }""]","[""public static boolean isNormalSequence(final String s) { if (s == null) { return false; } for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null || s.length() == 0) { return false; } for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null) { return false; } else if (s.length() == 0) { return false; } for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null) return false; for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null) { return false; } if (s.length() == 0) return false; for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null || s.length() == 0) return false; for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null) return false; if (s.length() == 0) { return false; } for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null) return false; else { for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; } }"", ""public static boolean isNormalSequence(final String s) { if (s == null) { return false; } for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } if (s.length() == 0) return false; return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null) { return false; } if (s.length() == 0) return false; for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }""]","[""public static boolean isNormalSequence(final String s) { if (s == null || s.length() == 0) { return false; } for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null) { return false; } if (s.length() == 0) { return false; } for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null || s.length() == 0) return false; for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null) return false; if (s.length() == 0) return false; for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; }"", ""public static boolean isNormalSequence(final String s) { if (s == null || s.length() == 0) { return false; } else { for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; } }"", ""public static boolean isNormalSequence(final String s) { if (s == null) { return false; } else if (s.length() == 0) { return false; } else { for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; } }"", ""public static boolean isNormalSequence(final String s) { if (s == null) return false; else if (s.length() == 0) return false; else { for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; } }"", ""public static boolean isNormalSequence(final String s) { if (s == null || s.length() == 0) return false; else { for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { return false; } } return true; } }"", ""public static boolean isNormalSequence(final String s) { boolean isNormal = true; if (s == null || s.length() == 0) { isNormal = false; } else { for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { isNormal = false; } } } return isNormal; }"", ""public static boolean isNormalSequence(final String s) { boolean isNormal = true; if (s == null) { isNormal = false; } else if (s.length() == 0) { isNormal = false; } else { for (Integer i = 0; i < s.length(); i++) { char ch = s.charAt(i); if (ch == 'A' || ch == 'T' || ch == 'C' || ch == 'G' || ch == 'a' || ch == 't' || ch == 'c' || ch == 'g' || ch == 'n' || ch == 'N') { ; } else { isNormal = false; } } } return isNormal; }""]",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return match; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; break; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } } } return false; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return true; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return true; } } if (match) break; } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } } if (match) break; } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; if (match) return match; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; if (match) break; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; if (match) return true; } } } return match; }']","['private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return match; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; break; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return match; } } if (match) return match; } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } if (match) break; } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; if (match) return match; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; if (match) break; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } } if (match) return match; } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; if (match) return match; } } if (match) break; } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; if (match) break; } } if (match) return match; } return match; }']","['private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return match; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; break; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return true; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; System.exit(0); } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; throw new RuntimeException(); } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return Boolean.TRUE; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; throw new RuntimeException(); } } } return Boolean.TRUE; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; System.exit(0); return match; } } } return match; }']","['private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return match; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; break; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } } } return false; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } } if (layer.getSource() instanceof ImageWmsLayerDataSource) break; } return false; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return match; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } } } return false; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; break; } if (layer.getSource() instanceof ImageWmsLayerDataSource) break; } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { return true; } } } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; return match; } } if (layer.getSource() instanceof ImageWmsLayerDataSource) return match; } return match; }', 'private Boolean isAllowed(MutableHttpServletRequest request, String paramName) { String layersParam = request.getParameterIgnoreCase(paramName); List<Layer> all = layerService.findAll(); Boolean match = false; for (Layer layer : all) { if (layer.getSource() instanceof ImageWmsLayerDataSource) { ImageWmsLayerDataSource source = (ImageWmsLayerDataSource) layer.getSource(); if (source.getLayerNames().equalsIgnoreCase(layersParam) && source.getUrl().equalsIgnoreCase(request.getContextPath() + ""/geoserver.action"")) { match = true; break; } } if (layer.getSource() instanceof ImageWmsLayerDataSource) return match; } return match; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }']","['public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }']","['public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }']","['public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }', 'public List<RecoveryStatus> getLogSorts() { List<RecoveryStatus> result = new ArrayList<>(); synchronized (currentWork) { for (Entry<String,LogProcessor> entries : currentWork.entrySet()) { RecoveryStatus status = new RecoveryStatus(); status.name = entries.getKey(); try { Double progress = entries.getValue().getBytesCopied() / walBlockSize; status.progress = Math.min(progress, 99.9); } catch (IOException ex) { log.warn(""Error getting bytes read""); } status.runtime = (int) entries.getValue().getSortTime(); result.add(status); } return result; } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessages = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessages); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessage); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualError = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualError); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessage); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorM = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorM); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualError = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualError); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessage); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMmessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMmessage); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessage); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualError = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualError); }']","['void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessages = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessages); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessage); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualError = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualError); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessageData = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessageData); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorData = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorData); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorItem = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorItem); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualItemError = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualItemError); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualItemErrorMessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualItemErrorMessage); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualForeignError = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualForeignError); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualForeignErrorMessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualForeignErrorMessage); }']","['void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessages = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessages); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessage); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualError = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualError); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessageData = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessageData); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorData = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorData); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessageValue = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessageValue); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorValue = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorValue); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessageResult = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessageResult); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorResult = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorResult); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessage); }']","['void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessages = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessages); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessage); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualError = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualError); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessage); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String foreignError = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", foreignError); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String foreignErrorMessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", foreignErrorMessage); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorM = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorM); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessage); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String foreignErrorMessages = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", foreignErrorMessages); }', 'void testIsUsAchBankForeignFormCanadaBank() { achService.setPaymentWorksFormModeService(buildMockPaymentWorksFormModeService(true)); pmwVendor.setBankAddressCountry(PaymentWorksConstants.PaymentWorksPurchaseOrderCountryFipsOption.CANADA.getPmwCountryOptionAsString()); Boolean actualIsUsBankAccount = achService.isUsAchBank(pmwVendor, reportData); assertFalse(actualIsUsBankAccount); assertEquals(0, reportData.getRecordsThatCouldNotBeProcessedSummary().getRecordCount()); assertEquals(0, reportData.getPmwVendorAchsThatCouldNotBeProcessed().size()); assertEquals(1, reportData.getRecordsWithForeignAchSummary().getRecordCount()); List<PaymentWorksBatchReportVendorItem> foreignAchItems = reportData.getForeignAchItems(); assertEquals(1, foreignAchItems.size()); List<String> foreignAchErrorMessages = foreignAchItems.get(0).getErrorMessages(); assertEquals(1, foreignAchErrorMessages.size()); String actualErrorMessage = foreignAchErrorMessages.get(0); assertEquals(""The bank has a country code of Canada. We can only create ACH records for banks that have a US address"", actualErrorMessage); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw e; } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new RuntimeException(e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new RuntimeException(""Unknown exception thrown while recording daily last value."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new IllegalStateException(e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new Error(e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new RuntimeException(e.toString(), e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new Error(""Unknown exception thrown while recording daily last value."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new IllegalStateException(""Unknown exception thrown while recording daily last value."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new Error(""Exception while recording daily last value: "" + e.toString(), e); } } }']","['private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw e; } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new RuntimeException(e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new RuntimeException(""Unknown exception"", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new IllegalStateException(e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new IllegalStateException(""Unknown exception thrown"", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new RuntimeException(""Exception while recording daily last value"", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new RuntimeException(e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw e; } } }']","['private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { Logger.error(LOG_TAG, ""Unknown exception thrown while recording daily last value."", e); throw e; } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { Logger.error(LOG_TAG, ""Unknown exception thrown while recording daily last value."", e); return; } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { Logger.error(LOG_TAG, ""Unknown exception thrown while recording daily last value."", e); throw new RuntimeException(""Unknown exception thrown while recording daily last value."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { Logger.error(LOG_TAG, ""Unknown exception thrown while recording daily last value."", e); throw new RuntimeException(); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { Logger.error(LOG_TAG, ""Unknown exception thrown while recording daily last value."", e); throw new RuntimeException(""Unknown exception"", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { Logger.error(LOG_TAG, ""Unknown exception thrown while recording daily last value."", e); throw new IllegalStateException(""Unknown exception thrown while recording daily last value."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { Logger.error(LOG_TAG, ""Unknown exception thrown while recording daily last value."", e); throw new IllegalStateException(); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { Logger.error(LOG_TAG, ""Unknown exception thrown while recording daily last value."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw e; } } }']","['private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw e; } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new Exception(""Unknown exception thrown while recording daily last value."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new Exception(""Unknown exception thrown while recording daily last value."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new Exception(""Unknown exception thrown while recording daily last value."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new Exception(""Unknown exception thrown while recording daily last value."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw new Exception(""Unknown exception thrown while recording daily last value."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } } }', 'private void recordDailyLast(int env, int day, int field, Object value, String table) { if (env == -1) { Logger.warn(LOG_TAG, ""Refusing to record with environment = -1.""); return; } final SQLiteDatabase db = this.helper.getWritableDatabase(); final String envString = Integer.toString(env); final String fieldIDString = Integer.toString(field, 10); final String dayString = Integer.toString(day, 10); final ContentValues v = new ContentValues(); putValue(v, value); final long updated = db.update(table, v, WHERE_DATE_AND_ENV_AND_FIELD, new String[] {dayString, envString, fieldIDString}); if (0 == updated) { v.put(""env"", env); v.put(""field"", field); v.put(""date"", day); try { db.insertOrThrow(table, null, v); } catch (SQLiteConstraintException e) { throw new IllegalStateException(""Event did not reference existing an environment or field."", e); } catch (Exception e) { throw e; } } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 0B1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, (long)0b1100110}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 0x66L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 102L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { if (variableTree.simpleName().name().startsWith(""y10"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(0b1100110L); } else { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { if (variableTree.simpleName().name().startsWith(""y10"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(0b1100110L); } else { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { if (variableTree.simpleName().name().startsWith(""x10"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(0b1100110); } else { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { if (variableTree.simpleName().name().startsWith(""y10"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(0b1100110L); } else { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { if (variableTree.simpleName().name().startsWith(""x10"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(0b1100110); } else { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } } else if (variableTree.simpleName().name().startsWith(""y"")) { if (variableTree.simpleName().name().startsWith(""y10"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(0b1100110L); } else { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { if (variableTree.simpleName().name().startsWith(""x10"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(0b1100110); } else { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } } else if (variableTree.simpleName().name().startsWith(""y"")) { if (variableTree.simpleName().name().startsWith(""y10"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(0b1100110L); } else { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } } }']","['public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, 0b11010010_01101001_10010100_10010010L, 10010L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 10010L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, 0b11010010_01101001_10010100_10010010L, 10010L, 102L, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0xFFL, 102L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, 10010L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, 0b11010010_01101001_10010100_10010010L, 0xFFL, 0b1100110L, 102L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }']","['public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 102L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1010L, 0xFFL, 102L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0b1100110L, 102L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 102L, 0b1100110L, 0xFFL}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1010L, 0b1010L, 102L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 102L, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0b1100110L, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 102L, 0xFFL, 0b1100110L}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }', 'public void test_int_and_long_value() throws Exception { Integer[] expectedIntegerValues = {42, -7, 3, null, null, 0xff, 0b0100, 5678, 0xFF, 0b1100110}; Long[] expectedLongValues = {42L, 42L, -7L, -7L, +3L, +3L, null, null, 0xFFL, null, null, null, Long.MAX_VALUE, Long.MAX_VALUE, 0b11010010_01101001_10010100_10010010L, 0b1100110L, 0xFFL, 0xFFL}; Integer i = 0; Integer j = 0; for (VariableTree variableTree : variables) { if (variableTree.simpleName().name().startsWith(""x"")) { assertThat(LiteralUtils.intLiteralValue(variableTree.initializer())).isEqualTo(expectedIntegerValues[i++]); } else if (variableTree.simpleName().name().startsWith(""y"")) { assertThat(LiteralUtils.longLiteralValue(variableTree.initializer())).isEqualTo(expectedLongValues[j++]); } } }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = (List<PartitionId>) clusterMapManager.getWritablePartitionIds(); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<PartitionId>(clusterMapManager.getWritablePartitionIds()); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<PartitionId>(clusterMapManager.getWritablePartitionIds()); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<PartitionId>(clusterMapManager.getWritablePartitionIds()); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<PartitionId>(clusterMapManager.getWritablePartitionIds()); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<PartitionId>(clusterMapManager.getWritablePartitionIds()); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<PartitionId>(clusterMapManager.getWritablePartitionIds()); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = new ArrayList<PartitionId>(clusterMapManager.getWritablePartitionIds()); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }']","['public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }', 'public void clusterMapInterface() throws JSONException { TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { System.out.println(metricName); } List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); for (Integer i = 0; i < partitionIds.size(); i++) { PartitionId partitionId = partitionIds.get(i); assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); try { PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); assertEquals(partitionId, fetchedPartitionId); } catch (IOException e) { assertEquals(true, false); } } for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { for (DataNode dataNode : datacenter.getDataNodes()) { DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); assertEquals(dataNodeId, dataNode); for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { assertEquals(dataNodeId, replicaId.getDataNodeId()); } } } }']","['public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); \n    for (Integer i = 0; i < partitionIds.size(); i++) { \n        PartitionId partitionId = partitionIds.get(i); \n        assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); \n        DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n        try { \n            PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n            assertEquals(partitionId, fetchedPartitionId); \n        } catch (IOException e) { \n            assertEquals(true, false); \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); \n            assertEquals(dataNodeId, dataNode); \n            for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                assertEquals(dataNodeId, replicaId.getDataNodeId()); \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<? extends PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    List<PartitionId> partitionIdList = new ArrayList<PartitionId>(partitionIds); \n    assertEquals(partitionIdList.size(), testPartitionLayout.getPartitionCount()); \n    for (Integer i = 0; i < partitionIdList.size(); i++) { \n        PartitionId partitionId = partitionIdList.get(i); \n        assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); \n        DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n        try { \n            PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n            assertEquals(partitionId, fetchedPartitionId); \n        } catch (IOException e) { \n            assertEquals(true, false); \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); \n            assertEquals(dataNodeId, dataNode); \n            for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                assertEquals(dataNodeId, replicaId.getDataNodeId()); \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<PartitionId> partitionIds = new ArrayList<PartitionId>(clusterMapManager.getWritablePartitionIds()); \n    assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); \n    for (Integer i = 0; i < partitionIds.size(); i++) { \n        PartitionId partitionId = partitionIds.get(i); \n        assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); \n        DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n        try { \n            PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n            assertEquals(partitionId, fetchedPartitionId); \n        } catch (IOException e) { \n            assertEquals(true, false); \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); \n            assertEquals(dataNodeId, dataNode); \n            for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                assertEquals(dataNodeId, replicaId.getDataNodeId()); \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<? extends PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    List<PartitionId> partitionIdList = new ArrayList<PartitionId>(partitionIds); \n    assertEquals(partitionIdList.size(), testPartitionLayout.getPartitionCount()); \n    for (Integer i = 0; i < partitionIdList.size(); i++) { \n        PartitionId partitionId = partitionIdList.get(i); \n        assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); \n        DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n        try { \n            PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n            assertEquals(partitionId, fetchedPartitionId); \n        } catch (IOException e) { \n            assertEquals(true, false); \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); \n            assertEquals(dataNodeId, dataNode); \n            for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                assertEquals(dataNodeId, replicaId.getDataNodeId()); \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); \n    for (Integer i = 0; i < partitionIds.size(); i++) { \n        PartitionId partitionId = partitionIds.get(i); \n        assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); \n        DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n        try { \n            PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n            assertEquals(partitionId, fetchedPartitionId); \n        } catch (IOException e) { \n            assertEquals(true, false); \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); \n            assertEquals(dataNodeId, dataNode); \n            for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                assertEquals(dataNodeId, replicaId.getDataNodeId()); \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<? extends PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    List<PartitionId> partitionIdList = new ArrayList<PartitionId>(partitionIds); \n    assertEquals(partitionIdList.size(), testPartitionLayout.getPartitionCount()); \n    for (Integer i = 0; i < partitionIdList.size(); i++) { \n        PartitionId partitionId = partitionIdList.get(i); \n        assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); \n        DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n        try { \n            PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n            assertEquals(partitionId, fetchedPartitionId); \n        } catch (IOException e) { \n            assertEquals(true, false); \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); \n            assertEquals(dataNodeId, dataNode); \n            for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                assertEquals(dataNodeId, replicaId.getDataNodeId()); \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<PartitionId> partitionIds = new ArrayList<PartitionId>(clusterMapManager.getWritablePartitionIds()); \n    assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); \n    for (Integer i = 0; i < partitionIds.size(); i++) { \n        PartitionId partitionId = partitionIds.get(i); \n        assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); \n        DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n        try { \n            PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n            assertEquals(partitionId, fetchedPartitionId); \n        } catch (IOException e) { \n            assertEquals(true, false); \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); \n            assertEquals(dataNodeId, dataNode); \n            for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                assertEquals(dataNodeId, replicaId.getDataNodeId()); \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<? extends PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    List<PartitionId> partitionIdList = new ArrayList<PartitionId>(partitionIds); \n    assertEquals(partitionIdList.size(), testPartitionLayout.getPartitionCount()); \n    for (Integer i = 0; i < partitionIdList.size(); i++) { \n        PartitionId partitionId = partitionIdList.get(i); \n        assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); \n        DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n        try { \n            PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n            assertEquals(partitionId, fetchedPartitionId); \n        } catch (IOException e) { \n            assertEquals(true, false); \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); \n            assertEquals(dataNodeId, dataNode); \n            for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                assertEquals(dataNodeId, replicaId.getDataNodeId()); \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); \n    for (Integer i = 0; i < partitionIds.size(); i++) { \n        PartitionId partitionId = partitionIds.get(i); \n        assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); \n        DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n        try { \n            PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n            assertEquals(partitionId, fetchedPartitionId); \n        } catch (IOException e) { \n            assertEquals(true, false); \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); \n            assertEquals(dataNodeId, dataNode); \n            for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                assertEquals(dataNodeId, replicaId.getDataNodeId()); \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<? extends PartitionId> partitionIds = clusterMapManager.getWritablePartitionIds(); \n    List<PartitionId> partitionIdList = new ArrayList<PartitionId>(partitionIds); \n    assertEquals(partitionIdList.size(), testPartitionLayout.getPartitionCount()); \n    for (Integer i = 0; i < partitionIdList.size(); i++) { \n        PartitionId partitionId = partitionIdList.get(i); \n        assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); \n        DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n        try { \n            PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream(partitionStream); \n            assertEquals(partitionId, fetchedPartitionId); \n        } catch (IOException e) { \n            assertEquals(true, false); \n        } \n    } \n    for (Datacenter datacenter : testHardwareLayout.getHardwareLayout().getDatacenters()) { \n        for (DataNode dataNode : datacenter.getDataNodes()) { \n            DataNodeId dataNodeId = clusterMapManager.getDataNodeId(dataNode.getHostname(), dataNode.getPort()); \n            assertEquals(dataNodeId, dataNode); \n            for (ReplicaId replicaId : clusterMapManager.getReplicaIds(dataNodeId)) { \n                assertEquals(dataNodeId, replicaId.getDataNodeId()); \n            } \n        } \n    } \n}', 'public void clusterMapInterface() throws JSONException { \n    TestUtils.TestHardwareLayout testHardwareLayout = new TestUtils.TestHardwareLayout(""Alpha""); \n    TestUtils.TestPartitionLayout testPartitionLayout = new TestUtils.TestPartitionLayout(testHardwareLayout); \n    ClusterMapManager clusterMapManager = new ClusterMapManager(testPartitionLayout.getPartitionLayout()); \n    for (String metricName : clusterMapManager.getMetricRegistry().getNames()) { \n        System.out.println(metricName); \n    } \n    List<PartitionId> partitionIds = new ArrayList<PartitionId>(clusterMapManager.getWritablePartitionIds()); \n    assertEquals(partitionIds.size(), testPartitionLayout.getPartitionCount()); \n    for (Integer i = 0; i < partitionIds.size(); i++) { \n        PartitionId partitionId = partitionIds.get(i); \n        assertEquals(partitionId.getReplicaIds().size(), testPartitionLayout.getReplicaCount()); \n        DataInputStream partitionStream = new DataInputStream(new ByteBufferInputStream(ByteBuffer.wrap(partitionId.getBytes()))); \n        try { \n            PartitionId fetchedPartitionId = clusterMapManager.getPartitionIdFromStream']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new LinkedList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new Vector<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new Stack<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<String>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new CopyOnWriteArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new LinkedList<String>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new Vector<String>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new Stack<String>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new CopyOnWriteArrayList<String>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }']","['public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }']","['public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try { \n        db = dbf.newDocumentBuilder(); \n        Document document; \n        document = db.parse(file); \n        Node rootNode = document.getDocumentElement(); \n        NodeList childNodes = rootNode.getChildNodes(); \n        for (Integer i = 0; i < childNodes.getLength(); i++) { \n            Node n = childNodes.item(i); \n            if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { \n                String type = """"; \n                type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); \n                references.add(type); \n            } \n        } \n    } catch (Exception e) { \n        Activator.getDefault().logError(e.getMessage(), e); \n    } \n    return references; \n}', 'public static List<String> getReferencedTypes(final File file) { \n    List<String> references = new ArrayList<>(); \n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); \n    DocumentBuilder db; \n    dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); \n    try {']","['public static List<String> getReferencedTypes(final File file) { ArrayList<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static ArrayList<String> getReferencedTypes(final File file) { ArrayList<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static ArrayList<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { ArrayList<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return (List<String>) references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return (List<String>) references; }', 'public static ArrayList<String> getReferencedTypes(final File file) { ArrayList<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return (List<String>) references; }', 'public static List<String> getReferencedTypes(final File file) { ArrayList<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return (List<String>) references; }', 'public static ArrayList<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }', 'public static List<String> getReferencedTypes(final File file) { List<String> references = new ArrayList<>(); DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db; dbf.setAttribute(""<LINK_0>"", Boolean.FALSE); try { db = dbf.newDocumentBuilder(); Document document; document = db.parse(file); Node rootNode = document.getDocumentElement(); NodeList childNodes = rootNode.getChildNodes(); for (Integer i = 0; i < childNodes.getLength(); i++) { Node n = childNodes.item(i); if (n.getNodeName().equals(LibraryElementTags.RESOURCE_ELEMENT)) { String type = """"; type = n.getAttributes().getNamedItem(LibraryElementTags.TYPE_ATTRIBUTE).getNodeValue(); references.add(type); } } } catch (Exception e) { Activator.getDefault().logError(e.getMessage(), e); } return references; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }']","['public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }']","['public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.lines(filePath).collect(Collectors.toList()); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.lines(filePath).collect(Collectors.toList()); lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); List<String> lines2 = Files.lines(filePath).collect(Collectors.toList()); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.lines(filePath).collect(Collectors.toList()); if (lines.isEmpty()) { lines = Files.readAllLines(filePath); } for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); if (lines.isEmpty()) { lines = Files.lines(filePath).collect(Collectors.toList()); } for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.lines(filePath).collect(Collectors.toList()); lines = lines.isEmpty() ? Files.readAllLines(filePath) : lines; for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); lines = lines.isEmpty() ? Files.lines(filePath).collect(Collectors.toList()) : lines; for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.lines(filePath).collect(Collectors.toList()); if (lines.isEmpty()) { lines = Files.readAllLines(filePath); } else { lines = Files.lines(filePath).collect(Collectors.toList()); } for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); if (lines.isEmpty()) { lines = Files.lines(filePath).collect(Collectors.toList()); } else { lines = Files.readAllLines(filePath); } for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }']","['public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }', 'public void testLargeGeometryToBingTiles() throws Exception { Path filePath = Paths.get(this.getClass().getClassLoader().getResource(""large_polygon.txt"").getPath()); List<String> lines = Files.readAllLines(filePath); for (String line : lines) { String[] parts = line.split(""\\\\|""); String wkt = parts[0]; int zoomLevel = Integer.parseInt(parts[1]); Long tileCount = Long.parseLong(parts[2]); assertFunction(""cardinality(geometry_to_bing_tiles(ST_GeometryFromText(\'"" + wkt + ""\'), "" + zoomLevel + ""))"", BIGINT, tileCount); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Adapter getContentAdapter() { if (null == adapter) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; return adapter; }', 'public Adapter getContentAdapter() { Adapter adapter = null == adapter ? new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } } : adapter; return adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = null == adapter ? new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } } : adapter; } return adapter; }', 'public Adapter getContentAdapter() { return null == adapter ? new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } } : adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return adapter == null ? adapter : adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; return adapter; }', 'public Adapter getContentAdapter() { return null == adapter ? (adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }) : adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return null == adapter ? adapter : adapter; }', 'public Adapter getContentAdapter() { Adapter newAdapter = null == adapter ? new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } } : adapter; adapter = newAdapter; return adapter; }']","['public Adapter getContentAdapter() { if (null == adapter) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { Adapter adapter = this.adapter; if (null == adapter) { this.adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return this.adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { this.adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return this.adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; return adapter; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { this.adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return this.adapter; }']","['public Adapter getContentAdapter() { if (adapter == null) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; return adapter; } }', 'public Adapter getContentAdapter() { if (adapter == null) { return adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return adapter == null ? null : adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; return adapter; } return adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return adapter != null ? adapter : null; }', 'public Adapter getContentAdapter() { Adapter returnAdapter; if (adapter == null) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; returnAdapter = adapter; } else { returnAdapter = adapter; } return returnAdapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } Adapter returnAdapter = adapter; return returnAdapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } return adapter != null ? adapter : adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new AdapterImpl() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(new Runnable() { @Override public void run() { refreshChildren(); } }); break; case Notification.SET: break; } } }; } Adapter adapterToReturn = adapter; return adapterToReturn; }']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.8616241467937908,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); requireNonNull(ryaInstance); final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(""ryaInstance must not be null""); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { log.warn(""ryaInstance must not be null""); return null; } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(""ryaInstance must not be null""); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); requireNonNull(ryaInstance, ""ryaInstance must not be null""); final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { log.warn(""ryaInstance must not be null""); throw new NullPointerException(); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { log.warn(""ryaInstance must not be null""); return null; } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }']","['public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); requireNonNull(ryaInstance); final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(""ryaInstance is null""); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { log.warn(""ryaInstance is null""); return null; } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(""ryaInstance is null""); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { log.warn(""ryaInstance is null""); return null; } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); requireNonNull(ryaInstance, ""ryaInstance is null""); final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(""ryaInstance is null""); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); requireNonNull(ryaInstance); final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }']","['public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); requireNonNull(ryaInstance); final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(""ryaInstance is null""); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(""ryaInstance is null""); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { log.warn(""ryaInstance is null""); return null; } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(""ryaInstance is null""); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(""ryaInstance is null""); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(""ryaInstance is null""); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(""ryaInstance is null""); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }', 'public static RyaStreamsClient make( final String ryaInstance, final String kafkaHostname, final long kafkaPort) { requireNonNull(kafkaHostname); if (ryaInstance == null) { throw new NullPointerException(""ryaInstance is null""); } final Producer<?, QueryChange> queryProducer = makeProducer(kafkaHostname, kafkaPort, StringSerializer.class, QueryChangeSerializer.class); final Consumer<?, QueryChange>queryConsumer = fromStartConsumer(kafkaHostname, kafkaPort, StringDeserializer.class, QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer, queryConsumer, changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient( new DefaultAddQuery(queryRepo), new DefaultGetQuery(queryRepo), new DefaultDeleteQuery(queryRepo), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityStatementDeserializer.class), new KafkaGetQueryResultStream<>(kafkaHostname, """" + kafkaPort, VisibilityBindingSetDeserializer.class), new DefaultListQueries(queryRepo), new DefaultStartQuery(queryRepo), new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."", e); } } }; }']",[],False,False,False,False,False,False,False,False,0.9665395661812441,0.9665395661812441,0.9665395661812441,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful()) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful()) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful()) logger.debug(""sendCommand() finished successfully.""); else logger.trace(""sendCommand() finished with failure.""); return bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful(); }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful()) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); boolean result = bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful(); if (result) { logger.debug(""sendCommand() finished successfully.""); } else { logger.trace(""sendCommand() finished with failure.""); } return result; }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); boolean result = bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful(); if (result) logger.debug(""sendCommand() finished successfully.""); else logger.trace(""sendCommand() finished with failure.""); return result; }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); return bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful() ? true : false; }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); boolean result = bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful(); logger.debug(""sendCommand() finished successfully.""); logger.trace(""sendCommand() finished with failure.""); return result; }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful()) { logger.debug(""sendCommand() finished successfully.""); } return bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful(); }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); boolean result = bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful(); logger.debug(""sendCommand() finished successfully.""); return result; }']","['public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful()) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful()) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful()) logger.debug(""sendCommand() finished successfully.""); else logger.trace(""sendCommand() finished with failure.""); return bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful(); }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful()) { logger.debug(""sendCommand() finished successfully.""); } else { logger.trace(""sendCommand() finished with failure.""); } return bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful(); }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); boolean isSuccessful = bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful(); if (isSuccessful) { logger.debug(""sendCommand() finished successfully.""); } else { logger.trace(""sendCommand() finished with failure.""); } return isSuccessful; }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); boolean isSuccessful = bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful(); if (isSuccessful) logger.debug(""sendCommand() finished successfully.""); else logger.trace(""sendCommand() finished with failure.""); return isSuccessful; }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); return bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful() ? true : (logger.trace(""sendCommand() finished with failure.""), false); }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); return bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful() ? (logger.debug(""sendCommand() finished successfully.""), true) : (logger.trace(""sendCommand() finished with failure.""), false); }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); boolean isSuccessful = bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful(); return isSuccessful ? (logger.debug(""sendCommand() finished successfully.""), true) : (logger.trace(""sendCommand() finished with failure.""), false); }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); boolean isSuccessful = bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful(); return isSuccessful ? true : (logger.trace(""sendCommand() finished with failure.""), false); }']","['public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful()) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if ((bridge.bridgeCommunicate(bcp)) && bcp.isCommunicationSuccessful()) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && (bcp.isCommunicationSuccessful())) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful()) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if ((bridge.bridgeCommunicate(bcp)) && (bcp.isCommunicationSuccessful())) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful()) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if ((bridge.bridgeCommunicate(bcp)) && (bcp.isCommunicationSuccessful())) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && (bcp.isCommunicationSuccessful())) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if ((bridge.bridgeCommunicate(bcp)) && bcp.isCommunicationSuccessful()) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }', 'public boolean sendCommand(VeluxBridge bridge, Integer nodeId, VeluxProductPosition value) { logger.trace(""sendCommand(nodeId={},value={}) called."", nodeId, value); SendCommand bcp = bridge.bridgeAPI().sendCommand(); Integer veluxValue = value.getPositionAsVeluxType(); bcp.setNodeAndMainParameter(nodeId, veluxValue); if (bridge.bridgeCommunicate(bcp) && bcp.isCommunicationSuccessful()) { logger.debug(""sendCommand() finished successfully.""); return true; } else { logger.trace(""sendCommand() finished with failure.""); return false; } }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (cd2, result) -> { finishCommit(cd, commitTs); }); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (cd2, result) -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> {cd = cd; finishCommit(cd, commitTs); }); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (cd2, result) -> {cd = cd2; finishCommit(cd, commitTs); }); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> { finishCommit(cd, commitTs); }); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (cd2, result) -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> finishCommit(cd, commitTs)); }']","['private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (result) -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (result1) -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (r) -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (res) -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (r1) -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (result2) -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (res1) -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (r2) -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (result3) -> finishCommit(cd, commitTs)); }']","['private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, result -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (cd2, result) -> { finishCommit(cd, commitTs); }); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, (cd2, result) -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, result -> { finishCommit(cd, commitTs); }); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, (cd2, result) -> { finishCommit(cd, commitTs); cd2 = cd; }); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, result -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (cd2, result) -> finishCommit(cd, commitTs)); cd = cd2; }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, (cd2, result) -> finishCommit(cd, commitTs)); }']","['private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (cd2, result) -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (cd2, result) -> { finishCommit(cd, commitTs); }); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> { finishCommit(cd, commitTs); }); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (cd2, result) -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, (cd2, result) -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> finishCommit(cd, commitTs)); }', 'private void deleteLocks(CommitData cd, final long commitTs) { ArrayList<Mutation> mutations = new ArrayList<>(updates.size() + 1); for (Entry<Bytes, Map<Column, Bytes>> rowUpdates : updates.entrySet()) { Flutation m = new Flutation(env, rowUpdates.getKey()); Boolean isTriggerRow = isTriggerRow(rowUpdates.getKey()); for (Entry<Column, Bytes> colUpdates : rowUpdates.getValue().entrySet()) { ColumnUtil.commitColumn(env, isTriggerRow && colUpdates.getKey().equals(notification.getColumn()), false, colUpdates.getKey(), isWrite(colUpdates.getValue()), isDelete(colUpdates.getValue()), isReadLock(colUpdates.getValue()), startTs, commitTs, observedColumns, m); } mutations.add(m); } CompletableFuture<Void> cfuture = env.getSharedResources().getBatchWriter().writeMutationsAsyncFuture(mutations); addCallback(cfuture, cd, result -> finishCommit(cd, commitTs)); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, 0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, (Long)0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, Long.valueOf(0L)); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, Long.valueOf(0)); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, 0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, (0L)); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, Long.valueOf(0L)); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, 0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, (Long)0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, 0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }']","['public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, 0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, (Long)0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, Long.valueOf(0L)); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, 0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, Long.valueOf(0)); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, (Long)0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, 0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, Long.valueOf(0L)); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, 0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, (Long)0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }']","['public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, 0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, (long)0); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, Long.valueOf(0)); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, Long.valueOf(0L)); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, 0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, (long)0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, Long.valueOf(0L)); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, 0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, (Long)0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }', 'public Map<ContingencyState, Long> getContingencyStateCounts(final GenotypeConcordanceScheme scheme) { scheme.validateScheme(); final Map<ContingencyState, Long> counts = new HashMap<ContingencyState, Long>(); for (final ContingencyState contingencyState : ContingencyState.values()) { counts.put(contingencyState, 0L); } for (final TruthState truthState : TruthState.values()) { for (final CallState callState : CallState.values()) { final TruthAndCallStates truthAndCallStates = new TruthAndCallStates(truthState, callState); final ContingencyState[] contingencyStateArray = scheme.getConcordanceStateArray(truthAndCallStates); for (final ContingencyState contingencyState : contingencyStateArray) { final Long newCount = counts.get(contingencyState) + getCount(truthAndCallStates); counts.put(contingencyState, newCount); } } } return counts; }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); } Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { return peek(max, size()); } public List<T> peek(Integer max, Integer size) throws IOException { Integer end = Math.min(max, size); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { List<T> subList = new ArrayList<T>( Math.min(max, size()) ); Iterator<T> iterator = iterator(); for (Integer i = 0; i < Math.min(max, size()); i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); return peek(max, end); } public List<T> peek(Integer max, Integer end) throws IOException { List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { return Collections.unmodifiableList( peekList(max) ); } public List<T> peekList(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return subList; }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { List<T> subList = peekList(max); return Collections.unmodifiableList(subList); } public List<T> peekList(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return subList; }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { return generateList(max); } public List<T> generateList(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { List<T> subList = generateList(max); return subList; } public List<T> generateList(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { return peekList(max, size()); } public List<T> peekList(Integer max, Integer size) throws IOException { Integer end = Math.min(max, size); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }']","['public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }']","['public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }']","['public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public abstract List<T> peek(Integer max) throws IOException; public Integer size() { return 0; } public Iterator<T> iterator() { return new Iterator<T>(){ public T next() { return null; } public boolean hasNext() { return false; } public void remove() { } }; }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { return peek(max, size()); } public List<T> peek(Integer max, Integer size) throws IOException { Integer end = Math.min(max, size); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { List<T> subList = new ArrayList<T>(max); Iterator<T> iterator = iterator(); for (Integer i = 0; i < max; i++) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); Integer i = 0; while ( i < end) { subList.add(iterator.next()); i++; } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); while (end-- > 0) { subList.add(iterator.next()); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { T entry = iterator.next(); subList.add(entry); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); Integer i = 0; while ( i < end) { T entry = iterator.next(); subList.add(entry); i++; } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); while (end-- > 0) { T entry = iterator.next(); subList.add(entry); } return Collections.unmodifiableList(subList); }', 'public abstract void add(T entry) throws IOException; public abstract T peek() throws IOException; public List<T> peek(Integer max) throws IOException { Integer end = Math.min(max, size()); List<T> subList = new ArrayList<T>(end); Iterator<T> iterator = iterator(); for (Integer i = 0; i < end; i++) { T entry = iterator.next(); subList.add(entry); } return subList; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = new ArrayList<String>() {{ addAll(Arrays.asList(""john"", ""joan"")); }}; userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = new ArrayList<String>() {{ addAll(Arrays.asList(""john"", ""joan"")); }}; userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = new ArrayList<String>() {{ addAll(Arrays.asList(""john"", ""joan"")); }}; userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = new ArrayList<String>() {{ addAll(Arrays.asList(""john"", ""joan"")); }}; userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = new ArrayList<String>() {{ addAll(Arrays.asList(""john"", ""joan"")); }}; userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = new ArrayList<String>() {{ addAll(Arrays.asList(""john"", ""joan"")); }}; userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = new ArrayList<String>() {{ addAll(Arrays.asList(""john"", ""joan"")); }}; userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = new ArrayList<String>() {{ addAll(Arrays.asList(""john"", ""joan"")); }}; userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }']","['public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan"", ""user3""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""user3"", ""user5""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""user3""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""user3""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan"", ""user3"", ""user5""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }']","['public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = new ArrayList<String>() {{ add(""john""); }}; userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = new ArrayList<String>() {{ add(""joan""); }}; userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = new ArrayList<String>() {{ add(""john""); add(""joan""); }}; userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = new ArrayList<String>() {{ }}; userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan"", ""john""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }']","['public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }', 'public void shouldDeleteUsers() { User john = new User(""john""); john.disable(); User joan = new User(""joan""); joan.disable(); List<String> userNames = Arrays.asList(""john"", ""joan""); userDao.saveOrUpdate(john); userDao.saveOrUpdate(joan); Boolean result = userDao.deleteUsers(userNames); assertThat(result, is(true)); Users users = userDao.allUsers(); assertThat(users, is(empty())); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }']","['private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }']","['private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> singlyIterator = values.iterator(); @Override public Boolean hasNext() { return singlyIterator.hasNext(); } @Override public String next() { return singlyIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> valuesIterator = values.iterator(); @Override public Boolean hasNext() { return valuesIterator.hasNext(); } @Override public String next() { return valuesIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> iterator = values.iterator(); @Override public Boolean hasNext() { return iterator.hasNext(); } @Override public String next() { return iterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> sequenceIterator = values.iterator(); @Override public Boolean hasNext() { return sequenceIterator.hasNext(); } @Override public String next() { return sequenceIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> it = values.iterator(); @Override public Boolean hasNext() { return it.hasNext(); } @Override public String next() { return it.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> singlyIterableIterator = values.iterator(); @Override public Boolean hasNext() { return singlyIterableIterator.hasNext(); } @Override public String next() { return singlyIterableIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> valuesIterable = values.iterator(); @Override public Boolean hasNext() { return valuesIterable.hasNext(); } @Override public String next() { return valuesIterable.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> iteratorInstance = values.iterator(); @Override public Boolean hasNext() { return iteratorInstance.hasNext(); } @Override public String next() { return iteratorInstance.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> list = values.iterator(); @Override public Boolean hasNext() { return list.hasNext(); } @Override public String next() { return list.next(); } }; } }; }']","['private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> valuesIterator = values.iterator(); @Override public Boolean hasNext() { return valuesIterator.hasNext(); } @Override public String next() { return valuesIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> sequenceIterator = values.iterator(); @Override public Boolean hasNext() { return sequenceIterator.hasNext(); } @Override public String next() { return sequenceIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> iterator = values.iterator(); @Override public Boolean hasNext() { return iterator.hasNext(); } @Override public String next() { return iterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> list = values.iterator(); @Override public Boolean hasNext() { return list.hasNext(); } @Override public String next() { return list.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> values = values.iterator(); @Override public Boolean hasNext() { return values.hasNext(); } @Override public String next() { return values.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> listIterator = values.iterator(); @Override public Boolean hasNext() { return listIterator.hasNext(); } @Override public String next() { return listIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> singlyIterator = values.iterator(); @Override public Boolean hasNext() { return singlyIterator.hasNext(); } @Override public String next() { return singlyIterator.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> sequence = values.iterator(); @Override public Boolean hasNext() { return sequence.hasNext(); } @Override public String next() { return sequence.next(); } }; } }; }', 'private Iterable<String> createSinglyIterable(final List<String> values) { return new Iterable<String>() { private Boolean isIteratorCreated = false; @Override public Iterator<String> iterator() { if (isIteratorCreated) throw new IllegalArgumentException(""Cannot create two iterators on a singly-iterable sequence""); isIteratorCreated = true; return new Iterator<String>() { private final Iterator<String> singly = values.iterator(); @Override public Boolean hasNext() { return singly.hasNext(); } @Override public String next() { return singly.next(); } }; } }; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), new Comparator<Pair<FileRef,Long>>() { @Override public long compare(Pair<FileRef,Long> o1, Pair<FileRef,Long> o2) { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; } }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), new Comparator<Pair<FileRef,Long>>() { @Override public int compare(Pair<FileRef,Long> o1, Pair<FileRef,Long> o2) { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; } }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> o1.getSecond().compareTo(o2.getSecond())); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); return o1.getSecond().compareTo(o2.getSecond()); }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> o1.getSecond() == o2.getSecond() ? o1.getFirst().compareTo(o2.getFirst()) : o1.getSecond().compareTo(o2.getSecond())); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> o1.getSecond() == o2.getSecond() ? o1.getFirst().compareTo(o2.getFirst()) : (o1.getSecond() < o2.getSecond() ? -1 : 1)); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> { if (o1.getSecond().compareTo(o2.getSecond()) == 0) return o1.getFirst().compareTo(o2.getFirst()); return o1.getSecond().compareTo(o2.getSecond()); }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> { if (o1.getSecond().compareTo(o2.getSecond()) == 0) return o1.getFirst().compareTo(o2.getFirst()); return o1.getSecond() < o2.getSecond() ? -1 : 1; }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> { if (o1.getSecond().compareTo(o2.getSecond()) == 0) return o1.getFirst().compareTo(o2.getFirst()); return o1.getSecond().compareTo(o2.getSecond()); }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }']","['private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), new Comparator<Pair<FileRef,Long>>() { @Override public long compare(Pair<FileRef,Long> o1, Pair<FileRef,Long> o2) { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; } }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), new Comparator<Pair<FileRef,Long>>() { @Override public int compare(Pair<FileRef,Long> o1, Pair<FileRef,Long> o2) { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; } }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> o1.getSecond().compareTo(o2.getSecond())); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> o1.getSecond() == o2.getSecond() ? o1.getFirst().compareTo(o2.getFirst()) : o1.getSecond().compareTo(o2.getSecond())); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); return o1.getSecond().compareTo(o2.getSecond()); }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); return o1.getSecond() < o2.getSecond() ? -1 : 1; }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> { if (o1.getSecond().compareTo(o2.getSecond()) == 0) return o1.getFirst().compareTo(o2.getFirst()); return o1.getSecond().compareTo(o2.getSecond()); }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> o1.getSecond() == o2.getSecond() ? o1.getFirst().compareTo(o2.getFirst()) : (o1.getSecond() < o2.getSecond() ? -1 : 1)); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), (o1, o2) -> { if (o1.getSecond() == o2.getSecond()) { return o1.getFirst().compareTo(o2.getFirst()); } return o1.getSecond() < o2.getSecond() ? -1 : 1; }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }']","['private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), new Comparator<Pair<FileRef,Long>>() { @Override public long compare(Pair<FileRef,Long> o1, Pair<FileRef,Long> o2) { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; } }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); for (FileRef fileRef: filesToCompact.keySet()) { smallestFiles.add(fileRef); } filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), new Comparator<Pair<FileRef,Long>>() { @Override public long compare(Pair<FileRef,Long> o1, Pair<FileRef,Long> o2) { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; } }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(); for (Iterator<FileRef> iterator = filesToCompact.keySet().iterator(); iterator.hasNext();) { smallestFiles.add(iterator.next()); iterator.remove(); } return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), new Comparator<Pair<FileRef,Long>>() { @Override public long compare(Pair<FileRef,Long> o1, Pair<FileRef,Long> o2) { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; } }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(); filesToCompact.keySet().forEach(fileRef -> smallestFiles.add(fileRef)); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), new Comparator<Pair<FileRef,Long>>() { @Override public long compare(Pair<FileRef,Long> o1, Pair<FileRef,Long> o2) { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; } }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(filesToCompact.keySet()); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), new Comparator<Pair<FileRef,Long>>() { @Override public long compare(Pair<FileRef,Long> o1, Pair<FileRef,Long> o2) { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; } }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(); for (FileRef fileRef: filesToCompact.keySet()) { smallestFiles.add(fileRef); filesToCompact.remove(fileRef); } return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), new Comparator<Pair<FileRef,Long>>() { @Override public long compare(Pair<FileRef,Long> o1, Pair<FileRef,Long> o2) { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; } }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(); filesToCompact.keySet().forEach(fileRef -> { smallestFiles.add(fileRef); filesToCompact.remove(fileRef); }); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), new Comparator<Pair<FileRef,Long>>() { @Override public long compare(Pair<FileRef,Long> o1, Pair<FileRef,Long> o2) { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; } }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(); for (Iterator<FileRef> iterator = filesToCompact.keySet().iterator(); iterator.hasNext();) { smallestFiles.add(iterator.next()); } filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), new Comparator<Pair<FileRef,Long>>() { @Override public long compare(Pair<FileRef,Long> o1, Pair<FileRef,Long> o2) { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; } }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }', 'private Set<FileRef> removeSmallest(Map<FileRef,DataFileValue> filesToCompact, int maxFilesToCompact) { if (filesToCompact.size() <= maxFilesToCompact) { Set<FileRef> smallestFiles = new HashSet<FileRef>(); filesToCompact.keySet().forEach(fileRef -> smallestFiles.add(fileRef)); filesToCompact.clear(); return smallestFiles; } PriorityQueue<Pair<FileRef,Long>> fileHeap = new PriorityQueue<Pair<FileRef,Long>>(filesToCompact.size(), new Comparator<Pair<FileRef,Long>>() { @Override public long compare(Pair<FileRef,Long> o1, Pair<FileRef,Long> o2) { if (o1.getSecond() == o2.getSecond()) return o1.getFirst().compareTo(o2.getFirst()); if (o1.getSecond() < o2.getSecond()) return -1; return 1; } }); for (Iterator<Entry<FileRef,DataFileValue>> iterator = filesToCompact.entrySet().iterator(); iterator.hasNext();) { Entry<FileRef,DataFileValue> entry = iterator.next(); fileHeap.add(new Pair<FileRef,Long>(entry.getKey(), entry.getValue().getSize())); } Set<FileRef> smallestFiles = new HashSet<FileRef>(); while (smallestFiles.size() < maxFilesToCompact && fileHeap.size() > 0) { Pair<FileRef,Long> pair = fileHeap.remove(); filesToCompact.remove(pair.getFirst()); smallestFiles.add(pair.getFirst()); } return smallestFiles; }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \nBrokerResponseNative brokerResponse = new BrokerResponseNative(); \nList<String> columnNames = new ArrayList<>(); \nList<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \nList<Object> row = new ArrayList<>(); \nfor (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n computeResultsForExpression(e, columnNames, columnTypes, row); \n} \nDataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \nList<Object[]> rows = new ArrayList<>(); \nrows.add(row.toArray()); \nResultTable resultTable = new ResultTable(dataSchema, rows); \nbrokerResponse.setResultTable(resultTable); \nLong totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \nbrokerResponse.setTimeUsedMs(totalTimeMs); \nrequestStatistics.setQueryProcessingTime(totalTimeMs); \nrequestStatistics.setStatistics(brokerResponse); \nreturn brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \nBrokerResponseNative brokerResponse = new BrokerResponseNative(); \nList<String> columnNames = new ArrayList<>(); \nList<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \nList<Object> row = new ArrayList<>(); \nfor (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n computeResultsForExpression(e, columnNames, columnTypes, row); \n} \nDataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \nList<Object[]> rows = new ArrayList<>(); \nrows.add(row.toArray()); \nResultTable resultTable = new ResultTable(dataSchema, rows); \nbrokerResponse.setResultTable(resultTable); \nLong totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \nbrokerResponse.setTimeUsedMs(totalTimeMs); \nrequestStatistics.setQueryProcessingTime(totalTimeMs); \nrequestStatistics.setStatistics(brokerResponse); \nreturn brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \nBrokerResponseNative brokerResponse = new BrokerResponseNative(); \nList<String> columnNames = new ArrayList<>(); \nList<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \nList<Object> row = new ArrayList<>(); \nfor (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n computeResultsForExpression(e, columnNames, columnTypes, row); \n} \nDataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \nList<Object[]> rows = new ArrayList<>(); \nrows.add(row.toArray()); \nResultTable resultTable = new ResultTable(dataSchema, rows); \nbrokerResponse.setResultTable(resultTable); \nLong totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \nbrokerResponse.setTimeUsedMs(totalTimeMs); \nrequestStatistics.setQueryProcessingTime(totalTimeMs); \nrequestStatistics.setStatistics(brokerResponse); \nreturn brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \nBrokerResponseNative brokerResponse = new BrokerResponseNative(); \nList<String> columnNames = new ArrayList<>(); \nList<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \nList<Object> row = new ArrayList<>(); \nfor (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n computeResultsForExpression(e, columnNames, columnTypes, row); \n} \nDataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \nList<Object[]> rows = new ArrayList<>(); \nrows.add(row.toArray()); \nResultTable resultTable = new ResultTable(dataSchema, rows); \nbrokerResponse.setResultTable(resultTable); \nLong totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \nbrokerResponse.setTimeUsedMs(totalTimeMs); \nrequestStatistics.setQueryProcessingTime(totalTimeMs); \nrequestStatistics.setStatistics(brokerResponse); \nreturn brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \nBrokerResponseNative brokerResponse = new BrokerResponseNative(); \nList<String> columnNames = new ArrayList<>(); \nList<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \nList<Object> row = new ArrayList<>(); \nfor (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n computeResultsForExpression(e, columnNames, columnTypes, row); \n} \nDataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \nList<Object[]> rows = new ArrayList<>(); \nrows.add(row.toArray()); \nResultTable resultTable = new ResultTable(dataSchema, rows); \nbrokerResponse.setResultTable(resultTable); \nLong totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \nbrokerResponse.setTimeUsedMs(totalTimeMs); \nrequestStatistics.setQueryProcessingTime(totalTimeMs); \nrequestStatistics.setStatistics(brokerResponse); \nreturn brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \nBrokerResponseNative brokerResponse = new BrokerResponseNative(); \nList<String> columnNames = new ArrayList<>(); \nList<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \nList<Object> row = new ArrayList<>(); \nfor (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n computeResultsForExpression(e, columnNames, columnTypes, row); \n} \nDataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \nList<Object[]> rows = new ArrayList<>(); \nrows.add(row.toArray()); \nResultTable resultTable = new ResultTable(dataSchema, rows); \nbrokerResponse.setResultTable(resultTable); \nLong totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \nbrokerResponse.setTimeUsedMs(totalTimeMs); \nrequestStatistics.setQueryProcessingTime(totalTimeMs); \nrequestStatistics.setStatistics(brokerResponse); \nreturn brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \nBrokerResponseNative brokerResponse = new BrokerResponseNative(); \nList<String> columnNames = new ArrayList<>(); \nList<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \nList<Object> row = new ArrayList<>(); \nfor (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n computeResultsForExpression(e, columnNames, columnTypes, row); \n} \nDataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \nList<Object[]> rows = new ArrayList<>(); \nrows.add(row.toArray()); \nResultTable resultTable = new ResultTable(dataSchema, rows); \nbrokerResponse.setResultTable(resultTable); \nLong totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \nbrokerResponse.setTimeUsedMs(totalTimeMs); \nrequestStatistics.setQueryProcessingTime(totalTimeMs); \nrequestStatistics.setStatistics(brokerResponse); \nreturn brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \nBrokerResponseNative brokerResponse = new BrokerResponseNative(); \nList<String> columnNames = new ArrayList<>(); \nList<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \nList<Object> row = new ArrayList<>(); \nfor (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n computeResultsForExpression(e, columnNames, columnTypes, row); \n} \nDataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \nList<Object[]> rows = new ArrayList<>(); \nrows.add(row.toArray()); \nResultTable resultTable = new ResultTable(dataSchema, rows); \nbrokerResponse.setResultTable(resultTable); \nLong totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \nbrokerResponse.setTimeUsedMs(totalTimeMs); \nrequestStatistics.setQueryProcessingTime(totalTimeMs); \nrequestStatistics.setStatistics(brokerResponse); \nreturn brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \nBrokerResponseNative brokerResponse = new BrokerResponseNative(); \nList<String> columnNames = new ArrayList<>(); \nList<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \nList<Object> row = new ArrayList<>(); \nfor (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n computeResultsForExpression(e, columnNames, columnTypes, row); \n} \nDataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \nList<Object[]> rows = new ArrayList<>(); \nrows.add(row.toArray()); \nResultTable resultTable = new ResultTable(dataSchema, rows); \nbrokerResponse.setResultTable(resultTable); \nLong totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \nbrokerResponse.setTimeUsedMs(totalTimeMs); \nrequestStatistics.setQueryProcessingTime(totalTimeMs); \nrequestStatistics.setStatistics(brokerResponse); \nreturn brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \nBrokerResponseNative brokerResponse = new BrokerResponseNative(); \nList<String> columnNames = new ArrayList<>(); \nList<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \nList<Object> row = new ArrayList<>(); \nfor (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n computeResultsForExpression(e, columnNames, columnTypes, row); \n} \nDataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \nList<Object[]> rows = new ArrayList<>(); \nrows.add(row.toArray()); \nResultTable resultTable = new ResultTable(dataSchema, rows); \nbrokerResponse.setResultTable(resultTable); \nLong totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \nbrokerResponse.setTimeUsedMs(totalTimeMs); \nrequestStatistics.setQueryProcessingTime(totalTimeMs); \nrequestStatistics.setStatistics(brokerResponse); \nreturn brokerResponse; \n}']","['private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \nBrokerResponseNative brokerResponse = new BrokerResponseNative(); \nList<String> columnNames = new ArrayList<>(); \nList<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \nList<Object> row = new ArrayList<>(); \nfor (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n computeResultsForExpression(e, columnNames, columnTypes, row); \n } \n DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n List<Object[]> rows = new ArrayList<>(); \n rows.add(row.toArray()); \n ResultTable resultTable = new ResultTable(dataSchema, rows); \n brokerResponse.setResultTable(resultTable); \n Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n brokerResponse.setTimeUsedMs(totalTimeMs); \n requestStatistics.setQueryProcessingTime(totalTimeMs); \n requestStatistics.setStatistics(brokerResponse); \n return brokerResponse; \n }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n List<String> columnNames = new ArrayList<>(); \n List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n List<Object> row = new ArrayList<>(); \n for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n  computeResultsForExpression(e, columnNames, columnTypes, row); \n } \n DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n List<Object[]> rows = new ArrayList<>(); \n rows.add(row.toArray()); \n ResultTable resultTable = new ResultTable(dataSchema, rows); \n brokerResponse.setResultTable(resultTable); \n Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n brokerResponse.setTimeUsedMs(totalTimeMs); \n requestStatistics.setQueryProcessingTime(totalTimeMs); \n requestStatistics.setStatistics(brokerResponse); \n return brokerResponse; \n }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n List<String> columnNames = new ArrayList<>(); \n List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n List<Object> row = new ArrayList<>(); \n for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n  computeResultsForExpression(e, columnNames, columnTypes, row); \n } \n DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n List<Object[]> rows = new ArrayList<>(); \n rows.add(row.toArray()); \n ResultTable resultTable = new ResultTable(dataSchema, rows); \n brokerResponse.setResultTable(resultTable); \n Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n brokerResponse.setTimeUsedMs(totalTimeMs); \n requestStatistics.setQueryProcessingTime(totalTimeMs); \n requestStatistics.setStatistics(brokerResponse); \n return brokerResponse; \n }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n List<String> columnNames = new ArrayList<>(); \n List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n List<Object> row = new ArrayList<>(); \n for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n  computeResultsForExpression(e, columnNames, columnTypes, row); \n } \n DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n List<Object[]> rows = new ArrayList<>(); \n rows.add(row.toArray()); \n ResultTable resultTable = new ResultTable(dataSchema, rows); \n brokerResponse.setResultTable(resultTable); \n Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n brokerResponse.setTimeUsedMs(totalTimeMs); \n requestStatistics.setQueryProcessingTime(totalTimeMs); \n requestStatistics.setStatistics(brokerResponse); \n return brokerResponse; \n }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n List<String> columnNames = new ArrayList<>(); \n List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n List<Object> row = new ArrayList<>(); \n for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n  computeResultsForExpression(e, columnNames, columnTypes, row); \n } \n DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n List<Object[]> rows = new ArrayList<>(); \n rows.add(row.toArray()); \n ResultTable resultTable = new ResultTable(dataSchema, rows); \n brokerResponse.setResultTable(resultTable); \n Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n brokerResponse.setTimeUsedMs(totalTimeMs); \n requestStatistics.setQueryProcessingTime(totalTimeMs); \n requestStatistics.setStatistics(brokerResponse); \n return brokerResponse; \n }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n List<String> columnNames = new ArrayList<>(); \n List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n List<Object> row = new ArrayList<>(); \n for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n  computeResultsForExpression(e, columnNames, columnTypes, row); \n } \n DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n List<Object[]> rows = new ArrayList<>(); \n rows.add(row.toArray()); \n ResultTable resultTable = new ResultTable(dataSchema, rows); \n brokerResponse.setResultTable(resultTable); \n Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n brokerResponse.setTimeUsedMs(totalTimeMs); \n requestStatistics.setQueryProcessingTime(totalTimeMs); \n requestStatistics.setStatistics(brokerResponse); \n return brokerResponse; \n }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n List<String> columnNames = new ArrayList<>(); \n List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n List<Object> row = new ArrayList<>(); \n for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n  computeResultsForExpression(e, columnNames, columnTypes, row); \n } \n DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n List<Object[]> rows = new ArrayList<>(); \n rows.add(row.toArray()); \n ResultTable resultTable = new ResultTable(dataSchema, rows); \n brokerResponse.setResultTable(resultTable); \n Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n brokerResponse.setTimeUsedMs(totalTimeMs); \n requestStatistics.setQueryProcessingTime(totalTimeMs); \n requestStatistics.setStatistics(brokerResponse); \n return brokerResponse; \n }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n List<String> columnNames = new ArrayList<>(); \n List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n List<Object> row = new ArrayList<>(); \n for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n  computeResultsForExpression(e, columnNames, columnTypes, row); \n } \n DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n List<Object[]> rows = new ArrayList<>(); \n rows.add(row.toArray()); \n ResultTable resultTable = new ResultTable(dataSchema, rows); \n brokerResponse.setResultTable(resultTable); \n Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n brokerResponse.setTimeUsedMs(totalTimeMs); \n requestStatistics.setQueryProcessingTime(totalTimeMs); \n requestStatistics.setStatistics(brokerResponse); \n return brokerResponse; \n }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n List<String> columnNames = new ArrayList<>(); \n List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n List<Object> row = new ArrayList<>(); \n for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n  computeResultsForExpression(e, columnNames, columnTypes, row); \n } \n DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n List<Object[]> rows = new ArrayList<>(); \n rows.add(row.toArray()); \n ResultTable resultTable = new ResultTable(dataSchema, rows); \n brokerResponse.setResultTable(resultTable); \n Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n brokerResponse.setTimeUsedMs(totalTimeMs); \n requestStatistics.setQueryProcessingTime(totalTimeMs); \n requestStatistics.setStatistics(brokerResponse); \n return brokerResponse; \n }', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n List<String> columnNames = new ArrayList<>(); \n List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n List<Object> row = new ArrayList<>(); \n for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n  computeResultsForExpression(e, columnNames, columnTypes, row); \n } \n DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n List<Object[]> rows = new ArrayList<>(); \n rows.add(row.toArray()); \n ResultTable resultTable = new ResultTable(dataSchema, rows); \n brokerResponse.setResultTable(resultTable); \n Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n brokerResponse.setTimeUsedMs(totalTimeMs); \n requestStatistics.setQueryProcessingTime(totalTimeMs); \n requestStatistics.setStatistics(brokerResponse); \n return brokerResponse; \n }']","['private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    // System.out.println(""brokerRequest = "" + brokerRequest.toString()); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    if (brokerRequest.toString() != null) { \n        System.out.println(""brokerRequest = "" + brokerRequest.toString()); \n    } \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    System.out.println(""brokerRequest = "" + brokerRequest.toString() + "" (For Debug Only)""); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    if (brokerRequest != null) { \n        System.out.println(""brokerRequest = "" + brokerRequest.toString()); \n    } \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    System.out.println(""brokerRequest = "" + brokerRequest.toString() + "" (Only for Debug)""); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    if (brokerRequest.getPinotQuery() != null) { \n        System.out.println(""brokerRequest = "" + brokerRequest.toString()); \n    } \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    System.out.println(""brokerRequest = "" + brokerRequest.toString() + "" (Only for Debug)""); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    if (brokerRequest != null) { \n        if (brokerRequest.toString() != null) { \n            System.out.println(""brokerRequest = "" + brokerRequest.toString()); \n        } \n    } \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    System.out.println(""brokerRequest = "" + brokerRequest.toString() + "" (Only for Debug)""); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    if (brokerRequest.getPinotQuery() != null) { \n        if (brokerRequest.getPinotQuery().getSelectList() != null) { \n            System.out.println(""brokerRequest = "" + brokerRequest.toString()); \n        } \n    } \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    System.out.println(""brokerRequest = "" + brokerRequest.toString() + "" (Only for Debug)""); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    if (brokerRequest != null) { \n        System.out.println(""brokerRequest = "" + brokerRequest.toString()); \n    } \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    System.out.println(""brokerRequest = "" + brokerRequest.toString() + "" (Only for Debug)""); \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    if (brokerRequest.getPinotQuery() != null) { \n        System.out.println(""brokerRequest = "" + brokerRequest.toString()); \n    } \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String']","['private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs); \n    brokerResponse.setTimeUsedMs(totalTimeMs); \n    requestStatistics.setQueryProcessingTime(totalTimeMs); \n    requestStatistics.setStatistics(brokerResponse); \n    return brokerResponse; \n}', 'private BrokerResponse processLiteralOnlyBrokerRequest(BrokerRequest brokerRequest, Long compilationStartTimeNs, RequestStatistics requestStatistics) throws IllegalStateException { \n    BrokerResponseNative brokerResponse = new BrokerResponseNative(); \n    List<String> columnNames = new ArrayList<>(); \n    List<DataSchema.ColumnDataType> columnTypes = new ArrayList<>(); \n    List<Object> row = new ArrayList<>(); \n    for (Expression e : brokerRequest.getPinotQuery().getSelectList()) { \n        computeResultsForExpression(e, columnNames, columnTypes, row); \n    } \n    DataSchema dataSchema = new DataSchema(columnNames.toArray(new String[0]), columnTypes.toArray(new DataSchema.ColumnDataType[0])); \n    List<Object[]> rows = new ArrayList<>(); \n    rows.add(row.toArray()); \n    ResultTable resultTable = new ResultTable(dataSchema, rows); \n    brokerResponse.setResultTable(resultTable); \n    Long totalTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - compilationStartTimeNs);']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isReservedPoolEnabled()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isPoolEnabled()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isMemoryPoolEnabled()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isReservedMemoryEnabled()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isPoolReserved()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isMemoryReserved()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isReserved()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isPoolEnabled()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isMemoryPoolReserved()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isReservedPool()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }']","['private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isReservedPoolEnabled()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isPoolEnabled()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isReservedMemoryEnabled()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isMemoryPoolEnabled()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isReservedPoolEnabledForConfig()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isPoolReserved()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isReserved()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isMemoryReserved()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isPoolEnabledForReserved()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { validateHeapHeadroom(config, availableMemory); maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); checkArgument( config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", QUERY_MAX_MEMORY_PER_NODE_CONFIG, QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG); ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); Long generalPoolSize = maxMemory.toBytes(); if (config.isReservedPool()) { builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); } verify(generalPoolSize > 0, ""general memory pool size is 0""); builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); this.pools = builder.build(); }']","['private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); \n    } \n    verify(generalPoolSize > 0, ""general memory pool size is 0""); \n    builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); \n    this.pools = builder.build(); \n}', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); \n    } \n    verify(generalPoolSize > 0, ""general memory pool size is 0""); \n    builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); \n    this.pools = builder.build(); \n}', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); \n    } \n    verify(generalPoolSize > 0, ""general memory pool size is 0""); \n    builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); \n    this.pools = builder.build(); \n}', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); \n    } \n    verify(generalPoolSize > 0, ""general memory pool size is 0""); \n    builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); \n    this.pools = builder.build(); \n}', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); \n    } \n    verify(generalPoolSize > 0, ""general memory pool size is 0""); \n    builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); \n    this.pools = builder.build(); \n}', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); \n    } \n    verify(generalPoolSize > 0, ""general memory pool size is 0""); \n    builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); \n    this.pools = builder.build(); \n}', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); \n    } \n    verify(generalPoolSize > 0, ""general memory pool size is 0""); \n    builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); \n    this.pools = builder.build(); \n}', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); \n    } \n    verify(generalPoolSize > 0, ""general memory pool size is 0""); \n    builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); \n    this.pools = builder.build(); \n}', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); \n    } \n    verify(generalPoolSize > 0, ""general memory pool size is 0""); \n    builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); \n    this.pools = builder.build(); \n}', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); \n    } \n    verify(generalPoolSize > 0, ""general memory pool size is 0""); \n    builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); \n    this.pools = builder.build(); \n}', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); \n    } \n    verify(generalPoolSize > 0, ""general memory pool size is 0""); \n    builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); \n    this.pools = builder.build(); \n}', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); \n    } \n    verify(generalPoolSize > 0, ""general memory pool size is 0""); \n    builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); \n    this.pools = builder.build(); \n}', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); \n    } \n    verify(generalPoolSize > 0, ""general memory pool size is 0""); \n    builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); \n    this.pools = builder.build(); \n}', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes(); \n    } \n    verify(generalPoolSize > 0, ""general memory pool size is 0""); \n    builder.put(GENERAL_POOL, new MemoryPool(GENERAL_POOL, new DataSize(generalPoolSize, BYTE))); \n    this.pools = builder.build(); \n}', 'private void configureMemoryPools(NodeMemoryConfig config, Long availableMemory) { \n    validateHeapHeadroom(config, availableMemory); \n    maxMemory = new DataSize(availableMemory - config.getHeapHeadroom().toBytes(), BYTE); \n    checkArgument( \n        config.getMaxQueryMemoryPerNode().toBytes() <= config.getMaxQueryTotalMemoryPerNode().toBytes(), \n        ""Max query memory per node (%s) cannot be greater than the max query total memory per node (%s)."", \n        QUERY_MAX_MEMORY_PER_NODE_CONFIG, \n        QUERY_MAX_TOTAL_MEMORY_PER_NODE_CONFIG\n    ); \n    ImmutableMap.Builder<MemoryPoolId, MemoryPool> builder = ImmutableMap.builder(); \n    Long generalPoolSize = maxMemory.toBytes(); \n    if (config.isLegacyReservedPoolEnabled()) { \n        builder.put(RESERVED_POOL, new MemoryPool(RESERVED_POOL, config.getMaxQueryTotalMemoryPerNode())); \n        generalPoolSize -= config.getMaxQueryTotalMemoryPerNode().toBytes();']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.9551190479308641,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue());  testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.endWindow(); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); testMeta.timeBucketAssigner.teardown(); }']","['public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue());  Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue());  testMeta.timeBucketAssigner.endWindow(); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue());  Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue());  testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue());  Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue());  Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue());  Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue());  Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue());  Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purge']","['public void testTimeBucketKeyExpiry() { \n    final MutableLong purgeLessThanEqualTo = new MutableLong(-2); \n    testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { \n        @Override \n        public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { \n            purgeLessThanEqualTo.setValue(timeBucket); \n        } \n    }); \n    Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); \n    testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); \n    Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); \n    Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); \n    Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    testMeta.timeBucketAssigner.teardown(); \n}', 'public void testTimeBucketKeyExpiry() { \n    final MutableLong purgeLessThanEqualTo = new MutableLong(-2); \n    testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { \n        @Override \n        public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { \n            purgeLessThanEqualTo.setValue(timeBucket); \n        } \n    }); \n    Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); \n    testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); \n    Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); \n    Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); \n    Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    testMeta.timeBucketAssigner.teardown(); \n    purgeLessThanEqualTo.setValue(-2); \n}', 'public void testTimeBucketKeyExpiry() { \n    final MutableLong purgeLessThanEqualTo = new MutableLong(-2); \n    testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { \n        @Override \n        public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { \n            purgeLessThanEqualTo.setValue(timeBucket); \n        } \n    }); \n    Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); \n    testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); \n    Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); \n    Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); \n    Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    purgeLessThanEqualTo.setValue(-2); \n    testMeta.timeBucketAssigner.teardown(); \n}', 'public void testTimeBucketKeyExpiry() { \n    final MutableLong purgeLessThanEqualTo = new MutableLong(-2); \n    testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { \n        @Override \n        public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { \n            purgeLessThanEqualTo.setValue(timeBucket); \n        } \n    }); \n    Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); \n    testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); \n    Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); \n    Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); \n    Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    purgeLessThanEqualTo.setValue(-2); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    testMeta.timeBucketAssigner.teardown(); \n}', 'public void testTimeBucketKeyExpiry() { \n    final MutableLong purgeLessThanEqualTo = new MutableLong(-2); \n    testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { \n        @Override \n        public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { \n            purgeLessThanEqualTo.setValue(timeBucket); \n        } \n    }); \n    Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); \n    testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); \n    Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); \n    Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); \n    Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    purgeLessThanEqualTo.setValue(-2); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    testMeta.timeBucketAssigner.teardown(); \n}', 'public void testTimeBucketKeyExpiry() { \n    final MutableLong purgeLessThanEqualTo = new MutableLong(-2); \n    testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { \n        @Override \n        public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { \n            purgeLessThanEqualTo.setValue(timeBucket); \n        } \n    }); \n    Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); \n    testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); \n    Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); \n    Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); \n    Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    purgeLessThanEqualTo.setValue(-2); \n    Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    testMeta.timeBucketAssigner.teardown(); \n}', 'public void testTimeBucketKeyExpiry() { \n    final MutableLong purgeLessThanEqualTo = new MutableLong(-2); \n    testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { \n        @Override \n        public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { \n            purgeLessThanEqualTo.setValue(timeBucket); \n        } \n    }); \n    Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); \n    testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); \n    Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); \n    Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); \n    Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); \n    purgeLessThanEqualTo.setValue(-2); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    testMeta.timeBucketAssigner.teardown(); \n}', 'public void testTimeBucketKeyExpiry() { \n    final MutableLong purgeLessThanEqualTo = new MutableLong(-2); \n    testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { \n        @Override \n        public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { \n            purgeLessThanEqualTo.setValue(timeBucket); \n        } \n    }); \n    Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); \n    testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); \n    Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); \n    Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); \n    Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); \n    purgeLessThanEqualTo.setValue(-2); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); \n    testMeta.timeBucketAssigner.teardown(); \n}', 'public void testTimeBucketKeyExpiry() { \n    final MutableLong purgeLessThanEqualTo = new MutableLong(-2); \n    testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); \n    testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { \n        @Override \n        public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { \n            purgeLessThanEqualTo.setValue(timeBucket); \n        } \n    }); \n    Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); \n    testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); \n    Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; \n    Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); \n    testMeta.timeBucketAssigner.endWindow(); \n    Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); \n    Long']","['public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", 0L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 10, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }', 'public void testTimeBucketKeyExpiry() { final MutableLong purgeLessThanEqualTo = new MutableLong(-2); testMeta.timeBucketAssigner.setExpireBefore(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setBucketSpan(Duration.standardSeconds(1)); testMeta.timeBucketAssigner.setPurgeListener(new TimeBucketAssigner.PurgeListener() { @Override public void purgeTimeBucketsLessThanEqualTo(Long timeBucket) { purgeLessThanEqualTo.setValue(timeBucket); } }); Long referenceTime = testMeta.timeBucketAssigner.getReferenceInstant().getMillis(); testMeta.timeBucketAssigner.setup(testMeta.mockManagedStateContext); Assert.assertEquals(""purgeLessThanEqualTo"", -2L, purgeLessThanEqualTo.longValue()); Long time0 = Duration.standardSeconds(0).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 1, testMeta.timeBucketAssigner.getTimeBucket(time0) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", -1, purgeLessThanEqualTo.longValue()); Long time1 = Duration.standardSeconds(9).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 10, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 8, purgeLessThanEqualTo.longValue()); Long time2 = Duration.standardSeconds(10).getMillis() + referenceTime; Assert.assertEquals(""time bucket"", 11, testMeta.timeBucketAssigner.getTimeBucket(time2) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); Assert.assertEquals(""time bucket"", -1, testMeta.timeBucketAssigner.getTimeBucket(time1) ); testMeta.timeBucketAssigner.endWindow(); Assert.assertEquals(""purgeLessThanEqualTo"", 9, purgeLessThanEqualTo.longValue()); testMeta.timeBucketAssigner.teardown(); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  left = null; currentRightIterator = rightsForLeft(leftRS.next()); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(leftRS.next(), currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  left = leftRS.next(); left = leftRS.next(); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  currentRightIterator = rightsForLeft(leftRS.next()); left = leftRS.next(); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  left = leftRS.next(); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  left = null; currentRightIterator = rightsForLeft(leftRS.next()); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(leftRS.next(), currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(leftRS.next(), null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  currentRightIterator = rightsForLeft(leftRS.next()); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(leftRS.next(), currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(leftRS.next(), null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  left = leftRS.next(); currentRightIterator = rightsForLeft(leftRS.next()); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(leftRS.next(), currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(leftRS.next(), null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  currentRightIterator = rightsForLeft(leftRS.next()); left = leftRS.next(); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  left = leftRS.next(); currentRightIterator = rightsForLeft(left); left = leftRS.next(); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  left = null; currentRightIterator = rightsForLeft(leftRS.next()); left = leftRS.next(); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }']","['public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  left = null; currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  leftRS.next(); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  if(leftRS.hasNext()) left = leftRS.next(); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  if(leftRS.hasNext()) { left = leftRS.next(); } else { return false; } currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  left = leftRS.next(); left = leftRS.next(); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  left = left; currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  if(leftRS.hasNext()) left = leftRS.next(); else return false; currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next());  if(left == null) left = leftRS.next(); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }']","['public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); left = leftRS.next(); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); left = null; left = leftRS.next(); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); if(leftRS.hasNext()) left = leftRS.next(); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); left = leftRS.next(); if(left == null) return false; currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); if(leftRS.hasNext()) { left = leftRS.next(); } currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); left = leftRS.next(); currentRightIterator = rightsForLeft(left); if(currentRightIterator == null) return false; Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); left = leftRS.next(); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; if(currentRightIterator == null) return false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); if(leftRS.hasNext()) left = leftRS.next(); else return false; currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); left = leftRS.next(); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { if(leftRS.hasNext()) return true; currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); left = leftRS.next(); currentRightIterator = rightsForLeft(left); if(currentRightIterator.hasNext()) { Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } else return false; } return false; } catch (Exception e) { throw new RuntimeException(e); } }']","['public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); left = null; currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); left = leftRS.next(); left = leftRS.next(); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); left = left; currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); leftRS.next(); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); if(leftRS.hasNext()) left = leftRS.next(); currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); if(leftRS.hasNext()) { left = leftRS.next(); } currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); if(leftRS.hasNext()) { left = leftRS.next(); } else { left = null; } currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); if(leftRS.hasNext()) left = leftRS.next(); else return false; currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); if(leftRS.hasNext()) { left = leftRS.next(); } else { return false; } currentRightIterator = rightsForLeft(left); Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }', 'public Boolean internalHasNext() { try { while (leftRS.hasNext()) { if (left == null) left = leftRS.next().getClone(); else left.transfer(leftRS.next()); if(leftRS.hasNext()) left = leftRS.next(); currentRightIterator = rightsForLeft(left); if(currentRightIterator == null) return false; Boolean returnedRows = false; while (currentRightIterator.hasNext()) { currentExecRow = mergeRows(left, currentRightIterator.next()); if (mergeJoinOperation.getRestriction().apply(currentExecRow)) { returnedRows = true; break; } operationContext.recordFilter(); } if (!returnedRows) { currentExecRow = mergeRows(left, null); return true; } } return false; } catch (Exception e) { throw new RuntimeException(e); } }']",False,True,False,False,False,False,False,False,0.8266114125804572,0.0,0.8266114125804572,0.8942255541978509
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this) + this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this); columnXCoordinate = columnXCoordinate + this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this); final double columnXCoordinateOffset = this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate + columnXCoordinateOffset); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); double columnXCoordinate = rendererHelper.getColumnOffset(this); columnXCoordinate = columnXCoordinate + this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); double columnXCoordinate = rendererHelper.getColumnOffset(this); double columnXCoordinateOffset = this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate + columnXCoordinateOffset); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this); final double columnOffset = this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate + columnOffset); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); double columnXCoordinate = rendererHelper.getColumnOffset(this); double columnOffset = this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate + columnOffset); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this); final double columnXCoordinateOffset = this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate + columnXCoordinateOffset); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); double columnXCoordinate = rendererHelper.getColumnOffset(this); double columnXCoordinateOffset = this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate + columnXCoordinateOffset); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this); final double columnOffset = this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate + columnOffset); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }']","['public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this) + this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this); columnXCoordinate += this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); double columnXCoordinate = rendererHelper.getColumnOffset(this) + this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this); final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate + this.getWidth() / 2); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); double columnXCoordinate = rendererHelper.getColumnOffset(this); columnXCoordinate += this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this) + this.getWidth() / 2.0; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); double columnXCoordinate = rendererHelper.getColumnOffset(this) + this.getWidth() / 2.0; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this); final double columnXCoordinateOffset = this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate + columnXCoordinateOffset); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); double columnXCoordinate = rendererHelper.getColumnOffset(this); double columnXCoordinateOffset = this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate + columnXCoordinateOffset); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this); columnXCoordinate += this.getWidth() / 2.0; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }']","['public void startEditingHeaderCell(final long uiHeaderRowIndex) { \n    if (!EditableHeaderUtilities.hasEditableHeader(this)) { \n        return; \n    } \n    if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { \n        return; \n    } \n    final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); \n    final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); \n    final double columnXCoordinate = rendererHelper.getColumnOffset(this) + this.getWidth() / 2; \n    final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); \n    final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); \n    final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); \n    headerMetaData.edit(context); \n}', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { \n    if (!EditableHeaderUtilities.hasEditableHeader(this)) { \n        return; \n    } \n    if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { \n        return; \n    } \n    final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); \n    final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); \n    final double columnX = rendererHelper.getColumnOffset(this); \n    final double columnXCoordinate = columnX + this.getWidth() / 2; \n    final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); \n    final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); \n    final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); \n    headerMetaData.edit(context); \n}', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { \n    if (!EditableHeaderUtilities.hasEditableHeader(this)) { \n        return; \n    } \n    if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { \n        return; \n    } \n    final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); \n    final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); \n    final double columnOffset = rendererHelper.getColumnOffset(this); \n    final double columnXCoordinate = columnOffset + this.getWidth() / 2; \n    final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); \n    final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); \n    final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); \n    headerMetaData.edit(context); \n}', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { \n    if (!EditableHeaderUtilities.hasEditableHeader(this)) { \n        return; \n    } \n    if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { \n        return; \n    } \n    final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); \n    final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); \n    final double columnXCoordinate = \n        rendererHelper.getColumnOffset(this) + \n        this.getWidth() / 2; \n    final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); \n    final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); \n    final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); \n    headerMetaData.edit(context); \n}', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { \n    if (!EditableHeaderUtilities.hasEditableHeader(this)) { \n        return; \n    } \n    if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { \n        return; \n    } \n    final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); \n    final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); \n    final double columnXCoordinate = rendererHelper.getColumnOffset(this); \n    columnXCoordinate += this.getWidth() / 2; \n    final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); \n    final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); \n    final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); \n    headerMetaData.edit(context); \n}', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { \n    if (!EditableHeaderUtilities.hasEditableHeader(this)) { \n        return; \n    } \n    if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { \n        return; \n    } \n    final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); \n    final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); \n    double columnOffset = rendererHelper.getColumnOffset(this); \n    double columnXCoordinate = columnOffset + this.getWidth() / 2; \n    final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); \n    final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); \n    final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); \n    headerMetaData.edit(context); \n}', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { \n    if (!EditableHeaderUtilities.hasEditableHeader(this)) { \n        return; \n    } \n    if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { \n        return; \n    } \n    final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); \n    final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); \n    double columnX = rendererHelper.getColumnOffset(this); \n    double columnXCoordinate = columnX + this.getWidth() / 2; \n    final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); \n    final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); \n    final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); \n    headerMetaData.edit(context); \n}', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { \n    if (!EditableHeaderUtilities.hasEditableHeader(this)) { \n        return; \n    } \n    if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { \n        return; \n    } \n    final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); \n    final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); \n    double columnOffset = rendererHelper.getColumnOffset(this); \n    double columnXCoordinate = columnOffset + this.getWidth() / 2; \n    final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); \n    final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); \n    final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); \n    headerMetaData.edit(context); \n}', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { \n    if (!EditableHeaderUtilities.hasEditableHeader(this)) { \n        return; \n    } \n    if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { \n        return; \n    } \n    final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); \n    final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); \n    final double columnOffset = rendererHelper.getColumnOffset(this); \n    final double columnXCoordinate = columnOffset + this.getWidth() / 2; \n    final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); \n    final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); \n    final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); \n    headerMetaData.edit(context); \n}', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { \n    if (!EditableHeaderUtilities.hasEditableHeader(this)) { \n        return; \n    } \n    if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { \n        return; \n    } \n    final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); \n    final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); \n    final double columnXCoordinate = \n        rendererHelper.getColumnOffset(this) + this.getWidth() / 2; \n    final BaseGridRendererHelper.ColumnInformation ci = \n        rendererHelper.getColumnInformation(columnXCoordinate); \n    final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); \n    final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); \n    headerMetaData.edit(context); \n}']","['public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this) + this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this); columnXCoordinate = columnXCoordinate + this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); double columnXCoordinate = rendererHelper.getColumnOffset(this); columnXCoordinate = columnXCoordinate + this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); double columnXCoordinate = rendererHelper.getColumnOffset(this) + this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this) + this.getWidth() / 2.0; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this); final double columnXCoordinate2 = columnXCoordinate + this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate2); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); double columnXCoordinate = rendererHelper.getColumnOffset(this); double columnXCoordinate2 = columnXCoordinate + this.getWidth() / 2; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate2); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this); final double columnXCoordinate2 = columnXCoordinate + (this.getWidth() / 2); final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate2); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); double columnXCoordinate = rendererHelper.getColumnOffset(this); double columnXCoordinate2 = columnXCoordinate + (this.getWidth() / 2); final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate2); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }', 'public void startEditingHeaderCell(final long uiHeaderRowIndex) { if (!EditableHeaderUtilities.hasEditableHeader(this)) { return; } if (!EditableHeaderUtilities.isEditableHeader(this, uiHeaderRowIndex)) { return; } final BaseGridRendererHelper rendererHelper = gridWidget.getRendererHelper(); final BaseGridRendererHelper.RenderingInformation ri = rendererHelper.getRenderingInformation(); final double columnXCoordinate = rendererHelper.getColumnOffset(this); final double columnXCoordinate2 = columnXCoordinate + this.getWidth() / 2.0; final BaseGridRendererHelper.ColumnInformation ci = rendererHelper.getColumnInformation(columnXCoordinate2); final EditableHeaderMetaData headerMetaData = (EditableHeaderMetaData) this.getHeaderMetaData().get(uiHeaderRowIndex); final GridBodyCellEditContext context = EditableHeaderUtilities.makeRenderContext(gridWidget, ri, ci, uiHeaderRowIndex); headerMetaData.edit(context); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; return adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { Adapter adapter = null; if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; return adapter; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter == null ? null : adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter == null ? new Adapter() : adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { Adapter newAdapter = null; if (null == adapter) { newAdapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; adapter = newAdapter; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; return adapter; }']","['public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { Adapter adapter = this.adapter; if (null == adapter) { this.adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return this.adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { this.adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return this.adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { this.adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return this.adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }']","['public Adapter getContentAdapter() { if (adapter == null) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.ADD_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.REMOVE: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); if (type == Notification.ADD || type == Notification.ADD_MANY || type == Notification.REMOVE || type == Notification.REMOVE_MANY) { Display.getDefault().asyncExec(() -> refreshChildren()); } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); if (type == Notification.ADD) { Display.getDefault().asyncExec(() -> refreshChildren()); } else if (type == Notification.ADD_MANY) { Display.getDefault().asyncExec(() -> refreshChildren()); } else if (type == Notification.REMOVE) { Display.getDefault().asyncExec(() -> refreshChildren()); } else if (type == Notification.REMOVE_MANY) { Display.getDefault().asyncExec(() -> refreshChildren()); } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: return; default: return; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter == null ? null : adapter; }', 'public Adapter getContentAdapter() { if (adapter == null) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); if (type == Notification.ADD || type == Notification.ADD_MANY) { Display.getDefault().asyncExec(() -> refreshChildren()); } else if (type == Notification.REMOVE || type == Notification.REMOVE_MANY) { Display.getDefault().asyncExec(() -> refreshChildren()); } } }; } return adapter; }']","['public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; return adapter; }', 'public Adapter getContentAdapter() { Adapter adapter = null; if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter == null ? null : adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) { adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; } return adapter; }', 'public Adapter getContentAdapter() { if (null == adapter) adapter = new EContentAdapter() { @Override public void notifyChanged(final Notification notification) { Integer type = notification.getEventType(); switch (type) { case Notification.ADD: case Notification.ADD_MANY: case Notification.REMOVE: case Notification.REMOVE_MANY: Display.getDefault().asyncExec(() -> refreshChildren()); break; case Notification.SET: break; default: break; } } }; return adapter; }']",True,True,False,True,False,False,False,False,0.0,0.0,0.8512967198654875,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(""typedId must not be null"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId, ""typedId must not be null""); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId); assertNotEquals(null, typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId); assertNotEquals(typedId, null); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(""typedId must not be null"", typedId); assertNotEquals(typedId, null); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId); assertNotEquals(typedId, null); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId, ""typedId must not be null""); assertNotEquals(null, typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(""typedId must not be null"", typedId); assertNotNull(typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId); assertNotNull(typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }']","['public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull("" typedId is null"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull("" typedId must not be null"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull("" typedId is null and must not be"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull("" typedId must be not null"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull("" typedId is null and that is not the expected value"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull("" typedId must not be null, that is the expected value"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull("" typedId is null and that is not the expected value, must be not null"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull("" typedId must be not null, that is the expected value, not null"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }']","['public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotEquals(null, typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotEquals(null, typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotEquals(null, typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotEquals(null, typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotEquals(null, typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }']","['public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(""The typedId object is null"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(""The typedId object is null and must not be"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(""The typedId object must not be null"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(""The typedId object is null and that\'s not the intention"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(""The typedId object must be not null"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(""The typedId object is null and that is not the intention of the test"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(""The typedId object must not be null in the test"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(""The typedId object is null and that is not the intention of the test method"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }', 'public void testEquals() { String value = ""someValue""; String type = ""someType""; Float confidenceLevel = 0.9f; TypedId typedId = new TypedId(value, type, confidenceLevel); assertNotNull(""The typedId object must be not null in the test method"", typedId); assertNotEquals(""string"", typedId); assertNotEquals(typedId, new TypedId(""otherValue"", type, confidenceLevel)); assertNotEquals(typedId, new TypedId(value, ""otherType"", confidenceLevel)); assertNotEquals(typedId, new TypedId(value, type, 0.8f)); assertEquals(typedId, new TypedId(value, type, confidenceLevel)); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
