Llama3.3_70B_EqualAssertCF_response,Llama3.3_70B_EqualAssertCF_mitigation_response,Llama3.3_70B_EqualAssertCF_inline_response,Llama3.3_70B_EqualAssertCF_CoT_response,Llama3.3_70B_EqualAssertCF_EXM,Llama3.3_70B_EqualAssertCF_mitigation_EXM,Llama3.3_70B_EqualAssertCF_inline_EXM,Llama3.3_70B_EqualAssertCF_CoT_EXM,Llama3.3_70B_EqualAssertCF_retrieval,Llama3.3_70B_EqualAssertCF_mitigation_retrieval,Llama3.3_70B_EqualAssertCF_inline_retrieval,Llama3.3_70B_EqualAssertCF_CoT_retrieval,Llama3.3_70B_EqualAssertCF_bleu,Llama3.3_70B_EqualAssertCF_mitigation_bleu,Llama3.3_70B_EqualAssertCF_inline_bleu,Llama3.3_70B_EqualAssertCF_CoT_bleu
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = (this.redisTemplate).boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = (this.redisTemplate).boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }']","['public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }']","['public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); }BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }']","['public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }', 'public void put(String key,String value) { if (key == null) { Assert.notNull(key,""\'key\' must not be null.""); } if (value == null) { Assert.notNull(value,""\'value\' must not be null.""); } BoundValueOperations<String,String> ops = this.redisTemplate.boundValueOps(key); ops.set(value); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }']","['public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = signature == null ? null : signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null""); this.signature = this.signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } if (signature == null) { requireNonNull(signature, ""signature is null""); } this.signature = signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null""); this.signature = signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = signature == null ? requireNonNull(signature, ""signature is null"") : signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null""); this.signature = signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } if (signature == null) { signature = requireNonNull(signature, ""signature is null""); } this.signature = signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null""); this.signature = signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }']","['public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } if (signature == null) { requireNonNull(signature, ""signature is null""); } this.signature = signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = signature == null ? null : signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null""); this.signature = this.signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } if (signature == null) { requireNonNull(signature, ""signature is null""); } this.signature = signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature.clone())); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null""); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature.clone())); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = signature == null ? null : signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature == null ? null : signature.clone())); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } if (signature == null) { requireNonNull(signature, ""signature is null""); } this.signature = signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature.clone())); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature.clone())); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null""); this.signature = signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }']","['public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = signature == null ? null : signature.clone(); requireNonNull(signature, ""signature is null""); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } requireNonNull(signature, ""signature is null""); this.signature = signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null""); this.signature = this.signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null""); this.signature = signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } requireNonNull(signature, ""signature is null""); this.signature = signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature.clone())); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature.clone())); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } requireNonNull(signature, ""signature is null""); this.signature = signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature.clone())); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null""); this.signature = signature.clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature.clone())); }', 'public CertificationRequest(CertificationRequestInfo certificationRequestInfo,SignatureAlgorithmIdentifier signatureAlgorithmIdentifier,byte[] signature) { if (certificationRequestInfo == null) { requireNonNull(certificationRequestInfo,""certificationRequestInfo is null""); } if (signatureAlgorithmIdentifier == null) { requireNonNull(signatureAlgorithmIdentifier,""signatureAlgorithmIdentifier is null""); } this.signature = requireNonNull(signature, ""signature is null"").clone(); this.encoded = encodeSequence(certificationRequestInfo.getEncoded(),encodeSequence(signatureAlgorithmIdentifier.getEncoded()),encodeBitString(0,signature)); }']",False,False,False,False,False,False,False,False,0.07688419959265248,0.2566290206865396,0.2566290206865396,0.08267268776722199
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); }  return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }']","['static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }']","['static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return new Stream.Cons<>(head, tailSupplier); }', 'static <T> Stream<T> gen(T head,Supplier<Stream<T>> tailSupplier) { if (tailSupplier == null) { Objects.requireNonNull(tailSupplier,""tailSupplier is null""); } return Stream.Cons<>(head, tailSupplier); }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } else { this.dlqTopicName = connConfig.dlqTopicName().trim(); } }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } else if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } else { this.dlqTopicName = connConfig.dlqTopicName().trim(); if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } } }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } else if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } else { this.dlqTopicName = connConfig.dlqTopicName().trim(); } }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } else { this.dlqTopicName = connConfig.dlqTopicName().trim(); if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } else { this.dlqTopicName = connConfig.dlqTopicName().trim(); } } }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } else if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } else if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } else { this.dlqTopicName = connConfig.dlqTopicName().trim(); if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } else if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } } }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } else if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } else if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } else { this.dlqTopicName = connConfig.dlqTopicName().trim(); } }']","['DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = """"; } }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = """"; } }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = """"; } this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = """"; } this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = """"; } }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = """"; } if (connConfig.dlqTopicName().trim().isEmpty()) { this.dlqTopicName = null; } this.dlqTopicName = connConfig.dlqTopicName().trim(); }']","['DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; if(connConfig.dlqTopicName() == null) this.dlqTopicName = null; else this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName() == null? null: connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; if(connConfig.dlqTopicName() == null) this.dlqTopicName = null; else this.dlqTopicName = connConfig.dlqTopicName().trim(); this.kafkaProducer = kafkaProducer; }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName() == null? null: connConfig.dlqTopicName().trim(); this.kafkaProducer = kafkaProducer; }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; if(connConfig.dlqTopicName() == null) this.dlqTopicName = null; else this.dlqTopicName = connConfig.dlqTopicName().trim(); this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName() == null? null: connConfig.dlqTopicName().trim(); this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; if(connConfig.dlqTopicName() == null) this.dlqTopicName = null; else this.dlqTopicName = connConfig.dlqTopicName().trim(); this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; }']","['DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }', 'DeadLetterQueueReporter(KafkaProducer<byte[],byte[]> kafkaProducer,SinkConnectorConfig connConfig,ConnectorTaskId id,ErrorHandlingMetrics errorHandlingMetrics) { if (kafkaProducer == null) { Objects.requireNonNull(kafkaProducer); } if (connConfig == null) { Objects.requireNonNull(connConfig); } if (id == null) { Objects.requireNonNull(id); } if (errorHandlingMetrics == null) { Objects.requireNonNull(errorHandlingMetrics); } this.kafkaProducer = kafkaProducer; this.connConfig = connConfig; this.connectorTaskId = id; this.errorHandlingMetrics = errorHandlingMetrics; this.dlqTopicName = connConfig.dlqTopicName().trim(); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    if(id == null) { \n        Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    if(id == null) { \n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    if(id == null) { \n        return null;\n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    if(id == null) { \n        id = """";\n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    if(id == null) { \n        id = id;\n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    if(id == null) { \n        label = """";\n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    if(id == null) { \n        address = """";\n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    if(id == null) { \n        iconKey = """";\n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    if(id == null) { \n        return new OnmsTopologyVertex(id,label,address,iconKey); \n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}']","['public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    if(id == null) { \n        Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    if(id == null) { \n        id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    if(id == null) { \n        return new OnmsTopologyVertex(id,label,address,iconKey); \n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    if(id == null) { \n        return new OnmsTopologyVertex(id,label,address,iconKey); \n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    if(id == null) { \n        id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    id = id;\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    if(id == null) { \n        id = Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    }\n    id = id;\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    if(id == null) { \n        id = id;\n    }\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}']","['public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    if(id == null) { \n        throw new NullPointerException(""id is null,cannot create vertex"");\n    } \n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    if(id == null) { \n        throw new NullPointerException(""id is null, cannot create vertex"");\n    } \n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null, cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    if(id == null) { \n        throw new NullPointerException(""id is null, cannot create vertex"");\n    } \n    OnmsTopologyVertex vertex = new OnmsTopologyVertex(id,label,address,iconKey); \n    return vertex; \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null, cannot create vertex"");\n    OnmsTopologyVertex vertex = new OnmsTopologyVertex(id,label,address,iconKey); \n    return vertex; \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    if(id == null) { \n        throw new NullPointerException(""id is null,cannot create vertex"");\n    } \n    OnmsTopologyVertex vertex = new OnmsTopologyVertex(id,label,address,iconKey); \n    return vertex; \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex"");\n    OnmsTopologyVertex vertex = new OnmsTopologyVertex(id,label,address,iconKey); \n    return vertex; \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    if(id == null) { \n        throw new NullPointerException(""id is null, cannot create vertex"");\n    } \n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null, cannot create vertex"");\n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}']","['public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex""); \n    if (id.equals(id)) { \n    } \n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex""); \n    if (id.equals(id)) { \n    } \n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex""); \n    if (id.equals(id)) { \n    } \n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex""); \n    if (id.equals(id)) { \n    } \n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex""); \n    if (id.equals(id)) { \n    } \n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex""); \n    if (id.equals(id)) { \n    } \n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex""); \n    if (id.equals(id)) { \n    } \n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex""); \n    if (id.equals(id)) { \n    } \n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex""); \n    if (id.equals(id)) { \n    } \n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}', 'public static OnmsTopologyVertex create(String id,String label,String address,String iconKey) { \n    Objects.requireNonNull(id,""id is null,cannot create vertex""); \n    if (id.equals(id)) { \n    } \n    return new OnmsTopologyVertex(id,label,address,iconKey); \n}']",False,False,False,False,True,True,True,False,0.0,0.0,0.0,0.10010151457754103
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""overnightIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""overnightIndexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexArgument""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""overnightIndexArgument""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexCurveArgument""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""overnightIndexCurveArgument""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }']","['public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""overnightIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""overnightIndexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""overnight""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexArg""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""overnightIndexArg""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexCurveArg""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""overnightCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexOvernight""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }']","['public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""OvernightIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""OvernightIndexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexArg""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""OvernightIndexArg""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexCurveArg""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""OvernightIndexCurveArg""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexOvernight""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""OvernightIndexArgName""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }']","['public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""OvernightIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexArgument""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""OvernightIndexArgument""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexCurveArgument""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexArg""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexOvernight""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""OvernightIndexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }', 'public ImmutableRatesProviderBuilder overnightIndexCurve(OvernightIndex index,Curve forwardCurve,LocalDateDoubleTimeSeries timeSeries) { if (index == null) { ArgChecker.notNull(index,""indexCurveOvernight""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } if (timeSeries == null) { ArgChecker.notNull(timeSeries,""timeSeries""); } this.indexCurves.put(index,forwardCurve); this.timeSeries.put(index,timeSeries); return this; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQL.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitized = SQLUtil.sanitizeCondition(s); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, sanitized); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitized = SQL.sanitizeCondition(s); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, sanitized); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitized = SQLUtil.sanitizeCondition(s); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, sanitized); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQL.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitized = SQL.sanitizeCondition(s); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, sanitized); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitized = SQLUtil.sanitizeCondition(s); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, sanitized); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitized = SQLUtil.sanitizeCondition(s); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, sanitized); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String sanitized = SQL.sanitizeCondition(s); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, sanitized); }']","['public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String s2 = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s2); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); final String s2 = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s2); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String s2 = SQLUtil.sanitizeCondition(query); if (s2 == null) { assertNotNull(s2); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, SQLUtil.sanitizeParameter(query)); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, SQLUtil.sanitizeCondition(query)); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, SQLUtil.sanitizeParameter(s)); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, SQLUtil.sanitizeCondition(s)); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String s2 = SQLUtil.sanitizeCondition(s); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s2); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeCondition(query); final String s2 = SQLUtil.sanitizeParameter(s); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s2); }']","['public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, SQLUtil.sanitizeCondition(s)); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, SQLUtil.sanitizeParameter(s)); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, s); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, SQLUtil.sanitizeParameter(s)); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, SQLUtil.sanitizeCondition(s)); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, SQLUtil.sanitizeCondition(s)); }']","['public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String condition = SQL.sanitizeCondition(s); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, condition); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQL.sanitizeCondition(query); final String condition = SQLUtil.sanitizeParameter(s); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, condition); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); final String condition = SQL.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, condition); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQL.sanitizeCondition(query); final String condition = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, condition); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } final String condition = SQL.sanitizeCondition(s); assertEquals(StringPool.BLANK, condition); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQL.sanitizeCondition(query); if (s == null) { assertNotNull(s); } final String condition = SQLUtil.sanitizeParameter(s); assertEquals(StringPool.BLANK, condition); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, SQL.sanitizeCondition(s)); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQL.sanitizeCondition(query); if (s == null) { assertNotNull(s); } assertEquals(StringPool.BLANK, SQLUtil.sanitizeParameter(s)); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQLUtil.sanitizeParameter(query); if (s == null) { assertNotNull(s); } final String condition = SQL.sanitizeCondition(query); assertEquals(StringPool.BLANK, condition); }', 'public void testInvalidCondition() throws Exception { final String query = ""and if(length(user())>0,sleep(10),2)""; final String s = SQL.sanitizeCondition(query); if (s == null) { assertNotNull(s); } final String condition = SQLUtil.sanitizeParameter(query); assertEquals(StringPool.BLANK, condition); }']",True,True,False,False,False,False,False,False,0.0,0.0,0.8153551038173115,0.7670387248467656
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public List<Element> previousElementSiblings() { if (parentNode == null) { return Collections.emptyList(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return List.of(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new ArrayList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new LinkedList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new Vector<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new CopyOnWriteArrayList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new ArrayList<Element>(0); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new LinkedList<Element>(0); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new Vector<Element>(0); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return Collections.emptyList(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return Collections.emptyList(); }']","['public List<Element> previousElementSiblings() { if (parentNode == null) { return Collections.emptyList(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return List.of(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new ArrayList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new LinkedList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new Vector<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new CopyOnWriteArrayList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new ArrayList<Element>(0); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new LinkedList<Element>(0); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new Vector<Element>(0); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new CopyOnWriteArrayList<Element>(0); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }']","['public List<Element> previousElementSiblings() { if (parentNode == null) { return Collections.emptyList(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return List.of(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new ArrayList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new LinkedList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new Vector<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new CopyOnWriteArrayList<>(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new ArrayList<>(0); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new LinkedList<>(0); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return new Vector<>(0); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return null; }', 'public List<Element> previousElementSiblings() { if (parentNode == null) { return Collections.emptyList(); } List<Element> siblings = parent().childElementsList(); int index = indexInList(this,siblings); if (index == null) { Validate.notNull(index); } if (index > 0 && index < siblings.size()) { return siblings.subList(0,index); } return Collections.emptyList(); }']",[],True,False,True,False,False,False,False,False,0.0,0.7066780042145641,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId == null; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId.equals(otherId); } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId == otherId; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false == false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return true == false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return true; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId.equals(externalIds); } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId == null ? false : true; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId == null ? true : false; } }']","['public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId == null; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId.equals(externalIds); } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return ImmutableSet.of(otherId).containsAll(externalIds); } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return ImmutableSet.of(otherId).equals(externalIds); } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return contains(otherId) == false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return contains(otherId); } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId == this; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return this.equals(otherId); } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId.equals(otherId); } }']","['public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; } return false; }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; } return otherId == null; }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; } return otherId.equals(externalIds); }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; } return otherId == otherId; }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; } return otherId.equals(otherId); }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; } return ImmutableSet.of(otherId).equals(externalIds); }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; } return ImmutableSet.of(otherId).containsAll(externalIds); }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; } return contains(otherId); }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; } return contains(otherId) == false; }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; } return otherId == null ? false : false; }']","['public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return contains(otherId) == false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return ImmutableSet.of(otherId).equals(externalIds); } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return ImmutableSet.of(otherId).containsAll(externalIds); } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return contains(otherId); } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId == null; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId == otherId; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId == null ? false : contains(otherId); } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId == null ? contains(otherId) : false; } }', 'public boolean matches(ExternalId otherId) { if (otherId == null) { ArgChecker.notNull(otherId,""otherId""); } switch(searchType) { case EXACT: return ImmutableSet.of(otherId).equals(externalIds); case ALL: return ImmutableSet.of(otherId).containsAll(externalIds); case ANY: return contains(otherId); case NONE: return contains(otherId) == false; default: return otherId == null ? false : contains(otherId) == false; } }']",True,True,False,True,False,False,False,False,0.0,0.0,0.6771164277807228,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", showMigrationEvents); } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", showMigrationEvents); } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", Boolean.valueOf(showMigrationEvents)); } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", Boolean.valueOf(showMigrationEvents)); } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) {  } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", Boolean.valueOf(showMigrationEvents)); } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", Boolean.valueOf(showMigrationEvents)); } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", Boolean.valueOf(showMigrationEvents)); } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) {  } return this; }']","['public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", showMigrationEvents); } if (showMigrationEvents == showMigrationEvents) { return this; } }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (showMigrationEvents == showMigrationEvents) { notNull(""showMigrationEvents"", showMigrationEvents); } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (showMigrationEvents) { notNull(""showMigrationEvents"", showMigrationEvents); } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (showMigrationEvents) { } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (showMigrationEvents == showMigrationEvents) { } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (showMigrationEvents) { } if (showMigrationEvents) { return this; } }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (showMigrationEvents) { notNull(""showMigrationEvents"", showMigrationEvents); } if (showMigrationEvents) { return this; } }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (showMigrationEvents == showMigrationEvents) { } if (showMigrationEvents) { return this; } }']","['public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", showMigrationEvents); } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", showMigrationEvents); }  this.showMigrationEvents = showMigrationEvents; return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", showMigrationEvents); }  return showMigrationEvents ? this : null; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", showMigrationEvents); }  return showMigrationEvents ? this : this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", showMigrationEvents); } this.showMigrationEvents = showMigrationEvents; return showMigrationEvents ? this : null; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", showMigrationEvents); } this.showMigrationEvents = showMigrationEvents; return showMigrationEvents ? this : this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", showMigrationEvents); } return showMigrationEvents ? this : this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", showMigrationEvents); } return showMigrationEvents ? this : null; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", showMigrationEvents); } this.showMigrationEvents = showMigrationEvents; return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (""showMigrationEvents"" == null) { notNull(""showMigrationEvents"", showMigrationEvents); } return this; }']","['public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (showMigrationEvents) { notNull(""showMigrationEvents"", showMigrationEvents); } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { notNull(""showMigrationEvents"", showMigrationEvents); return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (showMigrationEvents == true) { notNull(""showMigrationEvents"", showMigrationEvents); } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (showMigrationEvents == false) { notNull(""showMigrationEvents"", showMigrationEvents); } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { notNull(""showMigrationEvents"", Boolean.valueOf(showMigrationEvents)); return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (showMigrationEvents) { } return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (showMigrationEvents) notNull(""showMigrationEvents"", showMigrationEvents); return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { if (showMigrationEvents) { } notNull(""showMigrationEvents"", showMigrationEvents); return this; }', 'public ChangeStreamIterable<TResult> showMigrationEvents(final boolean showMigrationEvents) { notNull(""showMigrationEvents"", Boolean.valueOf(showMigrationEvents)); if (showMigrationEvents) { } return this; }']",False,False,False,False,False,False,False,False,0.3655552228545123,0.38498150077635496,0.33932513407933634,0.38498150077635496
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', 'public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }']","['@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override\npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }']","['public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { \n    if (key == null) { \n        A.notNull(key,""key""); \n    } \n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); \n    // copy-paste implementation\n    // mapKeyToPrimaryAndBackupsList\n    // @Override \n    // public reason\n}', '@Override \npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { \n    if (key == null) { \n        A.notNull(key,""key""); \n    } \n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); \n}', 'public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { \n    // @Override public reason copy-paste implementation mapKeyToPrimaryAndBackupsList\n    if (key == null) { \n        A.notNull(key,""key""); \n    } \n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); \n}', '@Override \npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { \n    // public reason copy-paste implementation mapKeyToPrimaryAndBackupsList\n    if (key == null) { \n        A.notNull(key,""key""); \n    } \n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); \n}', 'public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { \n    if (key == null) { \n        A.notNull(key,""key""); \n    } \n    // @Override public reason copy-paste implementation\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); \n}', '@Override \npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { \n    if (key == null) { \n        A.notNull(key,""key""); \n    } \n    // copy-paste implementation mapKeyToPrimaryAndBackupsList\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); \n}', 'public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { \n    // @Override \n    if (key == null) { \n        A.notNull(key,""key""); \n    } \n    // public reason copy-paste implementation mapKeyToPrimaryAndBackupsList\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); \n}', '@Override \npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { \n    if (key == null) { \n        A.notNull(key,""key""); \n    } \n    // public reason\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); \n}', 'public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { \n    if (key == null) { \n        A.notNull(key,""key""); \n    } \n    // copy-paste implementation\n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); \n}', '@Override \npublic List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { \n    // public reason copy-paste implementation\n    if (key == null) { \n        A.notNull(key,""key""); \n    } \n    return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); \n}']","['public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return cctx.affinity().nodesByPartition(partition(key),topologyVersion()); }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } List<ClusterNode> copyList = new ArrayList<>(cctx.affinity().nodesByPartition(partition(key),topologyVersion())); return copyList; }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } return new ArrayList<>(cctx.affinity().nodesByPartition(partition(key),topologyVersion())); }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } List<ClusterNode> reasonList = cctx.affinity().nodesByPartition(partition(key),topologyVersion()); return reasonList; }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } List<ClusterNode> reasonList = new ArrayList<>(cctx.affinity().nodesByPartition(partition(key),topologyVersion())); return reasonList; }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } List<ClusterNode> copyList = cctx.affinity().nodesByPartition(partition(key),topologyVersion()); return copyList; }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } List<ClusterNode> reasonList = cctx.affinity().nodesByPartition(partition(key),topologyVersion()); List<ClusterNode> copyList = new ArrayList<>(reasonList); return copyList; }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } List<ClusterNode> reasonList = cctx.affinity().nodesByPartition(partition(key),topologyVersion()); List<ClusterNode> copyList = new ArrayList<>(reasonList); return reasonList; }', '@Override public List<ClusterNode> mapKeyToPrimaryAndBackupsList(K key) { if (key == null) { A.notNull(key,""key""); } List<ClusterNode> reasonList = new ArrayList<>(cctx.affinity().nodesByPartition(partition(key),topologyVersion())); List<ClusterNode> copyList = new ArrayList<>(reasonList); return copyList; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); if (cacheConfig == null) { } }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); } }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } }']","['public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } requireNonNull(cacheConfig, ""cacheConfig is null""); this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } requireNonNull(cacheManager, ""CacheManager is null""); if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } requireNonNull(cacheConfig, ""cacheConfig is null""); this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); requireNonNull(cacheManager, ""CacheManager is null""); if (cacheConfig == null) { requireNonNull(cacheConfig, ""cacheConfig is null""); } this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } requireNonNull(cacheManager, ""CacheManager is null""); requireNonNull(cacheConfig, ""cacheConfig is null""); this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } requireNonNull(cacheConfig, ""cacheConfig is null""); this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); requireNonNull(cacheManager, ""CacheManager is null""); requireNonNull(cacheConfig, ""cacheConfig is null""); this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { if (hiveHdfsConfiguration == null) { requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""CacheManager is null""); } requireNonNull(cacheConfig, ""cacheConfig is null""); this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); }']","['public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig, ""cacheConfig is null""); \n    } \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = requireNonNull(cacheConfig, ""cacheConfig is null"").isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    if (cacheConfig.isValidationEnabled()) this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n    this.cacheValidationEnabled = cacheConfig.isValidationEnabled(); \n}', 'public RaptorCachingHdfsConfiguration(@ForCachingFileSystem RaptorHdfsConfiguration hiveHdfsConfiguration, CacheConfig cacheConfig, CacheManager cacheManager) { \n    if (hiveHdfsConfiguration == null) { \n        requireNonNull(hiveHdfsConfiguration, ""hiveHdfsConfiguration is null""); \n    } \n    if (cacheManager == null) { \n        requireNonNull(cacheManager, ""CacheManager is null""); \n    } \n    if (cacheConfig == null) { \n        requireNonNull(cacheConfig,']",[],False,False,False,False,False,False,False,False,0.7732323369196639,0.7731212403166648,0.8720290467146479,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    } \n    if (viewConnector.getDefinition() == null) { \n        throw new Exception(); \n    }']","['public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } throws new Exception(); }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } try { } catch (Exception e) { } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } try { } catch (Exception e) { throws e; } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } try { } catch (Exception e) { throws new Exception(); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } try { } catch (Exception e) { throws new Exception(e); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } try { } catch (Exception e) { throws new Exception(e); } }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } try { } catch (Exception e) { } throws new Exception(); }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } try { } catch (Exception e) { } throws new Exception(e); }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } try { } catch (Exception e) { } throws e; }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } try { } catch (Exception e) { } throws new Exception(); }']","['public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == null) { \n        assertNotNull(viewConnector.getGraphIndex()); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 5) { \n        assertNotNull(viewConnector.getGraphIndex()); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 10) { \n        assertNotNull(viewConnector.getGraphIndex()); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 3) { \n        assertNotNull(viewConnector.getGraphIndex()); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 22) { \n        assertNotNull(viewConnector.getGraphIndex()); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 5) { \n        assertNotNull(viewConnector.getGraphIndex()); \n        assertNotNull(viewConnector.getGraphIndex() == 5); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 10) { \n        assertNotNull(viewConnector.getGraphIndex()); \n        assertNotNull(viewConnector.getGraphIndex() == 10); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 3) { \n        assertNotNull(viewConnector.getGraphIndex()); \n        assertNotNull(viewConnector.getGraphIndex() == 3); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 22) { \n        assertNotNull(viewConnector.getGraphIndex()); \n        assertNotNull(viewConnector.getGraphIndex() == 22); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 5) { \n        assertNotNull(viewConnector.getGraphIndex() == 5); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 10) { \n        assertNotNull(viewConnector.getGraphIndex() == 10); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 3) { \n        assertNotNull(viewConnector.getGraphIndex() == 3); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 22) { \n        assertNotNull(viewConnector.getGraphIndex() == 22); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 5) { \n        assertNotNull(viewConnector.getGraphIndex()); \n        assertNotNull(viewConnector.getGraphIndex()); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 10) { \n        assertNotNull(viewConnector.getGraphIndex()); \n        assertNotNull(viewConnector.getGraphIndex()); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 3) { \n        assertNotNull(viewConnector.getGraphIndex()); \n        assertNotNull(viewConnector.getGraphIndex()); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 22) { \n        assertNotNull(viewConnector.getGraphIndex()); \n        assertNotNull(viewConnector.getGraphIndex()); \n    } \n}', 'public void testSequenceFlowSupplier() throws Exception { \n    final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); \n    final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); \n    final ViewConnector<SequenceFlow> viewConnector = supplier.get(); \n    if (viewConnector == null) { \n        assertNotNull(viewConnector); \n    } \n    if (viewConnector.getSourceConnection() == null) { \n        assertNotNull(viewConnector.getSourceConnection()); \n    } \n    if (viewConnector.getTargetConnection() == null) { \n        assertNotNull(viewConnector.getTargetConnection()); \n    } \n    if (viewConnector.getBounds() == null) { \n        assertNotNull(viewConnector.getBounds()); \n    } \n    if (viewConnector.getDefinition() == null) { \n        assertNotNull(viewConnector.getDefinition()); \n    } \n    if (viewConnector.getGraphIndex() == 5) { \n        assertNotNull(viewConnector.getGraphIndex()); \n        assertNotNull(viewConnector.getGraphIndex() == 5); \n        assertNotNull(viewConnector.getGraphIndex()); \n    } \n}', 'public void testSequenceFlowSupplier']","['public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } } catch (Exception e) { }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } } catch (Exception e) { e.printStackTrace(); }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } } catch (Exception e) { System.out.println(e); }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } } catch (Exception e) { System.out.println(e.getStackTrace()); }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } } catch (Exception e) { System.out.println(e.getStackTrace()); e.printStackTrace(); }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } } catch (Exception e) { System.out.println(e.getStackTrace()); e.printStackTrace(); System.out.println(e); }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } } catch (Exception e) { System.out.println(e.getStackTrace()); e.printStackTrace(); System.out.println(e); System.out.println(e.getStackTrace()); }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } } catch (Exception e) { System.out.println(e.getStackTrace()); e.printStackTrace(); System.out.println(e); System.out.println(e.getStackTrace()); System.out.println(e); }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } } catch (Exception e) { System.out.println(e.getStackTrace()); e.printStackTrace(); System.out.println(e); System.out.println(e.getStackTrace()); System.out.println(e); System.out.println(e.getStackTrace()); }', 'public void testSequenceFlowSupplier() throws Exception { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand(parent,candidate,index,originalParent,originalIndex); final Supplier<ViewConnector<SequenceFlow>> supplier = command.sequenceFlowSupplier(); final ViewConnector<SequenceFlow> viewConnector = supplier.get(); if (viewConnector == null) { assertNotNull(viewConnector); } if (viewConnector.getSourceConnection() == null) { assertNotNull(viewConnector.getSourceConnection()); } if (viewConnector.getTargetConnection() == null) { assertNotNull(viewConnector.getTargetConnection()); } if (viewConnector.getBounds() == null) { assertNotNull(viewConnector.getBounds()); } if (viewConnector.getDefinition() == null) { assertNotNull(viewConnector.getDefinition()); } } catch (Exception e) { System.out.println(e.getStackTrace()); e.printStackTrace(); System.out.println(e); System.out.println(e.getStackTrace()); System.out.println(e); System.out.println(e.getStackTrace()); System.out.println(e); }']",False,False,False,False,False,False,False,False,0.5910240916407257,0.5911748299543911,0.5911748299543911,0.5911748299543911
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) {  } this.client = requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { requireNonNull(client, ""client is null""); this.client = client; } }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); return; } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { } this.client = requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } else this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = requireNonNull(client, ""client is null""); }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); this.client = client; } }']","['public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { java this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { this.client = requireNonNull(client, ""client is null""); } this.client = client; }']","['public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { <START>requireNonNull(client,""client is null"");<END> // java this.client = requireNonNull(client, ""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { requireNonNull(client,""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { requireNonNull(client,""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { requireNonNull(client,""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { requireNonNull(client,""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { requireNonNull(client,""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { requireNonNull(client,""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { requireNonNull(client,""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { requireNonNull(client,""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { requireNonNull(client,""client is null""); } this.client = client; }', 'public AlluxioHiveMetastore(TableMasterClient client) { if (client == null) { requireNonNull(client,""client is null""); } this.client = client; }']",[],False,False,False,False,False,False,False,False,0.6389431042462724,0.37991784282579627,0.3155984539112945,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }']","['private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }']","['private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    Assert.assertEquals(1,array.size()); \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    if (""Did not find value Renamed Insertion Feature"" == null) { \n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    } \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    Assert.assertEquals(1,array.size()); \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    if (""Did not find value Renamed Insertion Feature"" == null) { \n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    } \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    Assert.assertEquals(1,array.size()); \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    if (""Did not find value Renamed Insertion Feature"" == null) { \n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    } \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    Assert.assertEquals(1,array.size()); \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    if (""Did not find value Renamed Insertion Feature"" == null) { \n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    } \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    Assert.assertEquals(1,array.size()); \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    if (""Did not find value Renamed Insertion Feature"" == null) { \n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    } \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    Assert.assertEquals(1,array.size()); \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    if (""Did not find value Renamed Insertion Feature"" == null) { \n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    } \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    Assert.assertEquals(1,array.size()); \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    if (""Did not find value Renamed Insertion Feature"" == null) { \n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    } \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    Assert.assertEquals(1,array.size()); \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    if (""Did not find value Renamed Insertion Feature"" == null) { \n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    } \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    Assert.assertEquals(1,array.size()); \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    if (""Did not find value Renamed Insertion Feature"" == null) { \n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    } \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}', 'private void testUpdateInsertionFeature(String insertion) throws Exception { \n    String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; \n    JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); \n    Assert.assertEquals(1,array.size()); \n    JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); \n    if (""Did not find value Renamed Insertion Feature"" == null) { \n        Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    } \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n    Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); \n}']","['private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }', 'private void testUpdateInsertionFeature(String insertion) throws Exception { String url = ""/ats/program/"" + getSawProgram().getUuid() + ""/insertion/1234567800/feature""; JsonArray array = putAndCheck(url,Entity.entity(insertion,MediaType.APPLICATION_JSON_TYPE)); Assert.assertEquals(1,array.size()); JsonObject obj = getObjectNamed(""Renamed Insertion Feature"",array); if (""Did not find value Renamed Insertion Feature"" == null) { Assert.assertNotNull(""Did not find value Renamed Insertion Feature"",obj); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); }  sendTimeoutExpression = this.sendTimeoutExpression; }', 'public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }']","['public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }']","['public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); }  sendTimeoutExpression = this.sendTimeoutExpression; }', 'public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public final void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }']","['public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }', 'public void setSendTimeoutExpression(Expression sendTimeoutExpression) { if (sendTimeoutExpression == null) { Assert.notNull(sendTimeoutExpression,""\'sendTimeoutExpression\' must not be null""); } this.sendTimeoutExpression = sendTimeoutExpression; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"",principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"",principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }']","['public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"",principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", (PrincipalDecoder) principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"",principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", (PrincipalDecoder) principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"",principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", (PrincipalDecoder) principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) { Assert.checkNotNullParam(""principalDecoder"", principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }']","['public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) {Assert.checkNotNullParam(""principalDecoder"",principalDecoder); assertNotBuilt(); this.principalDecoder = principalDecoder; return this; } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) {Assert.checkNotNullParam(""principalDecoder"",principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) {Assert.checkNotNullParam(""principalDecoder"",principalDecoder); assertNotBuilt(); } this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) {Assert.checkNotNullParam(""principalDecoder"",principalDecoder); assertNotBuilt(); this.principalDecoder = principalDecoder; } return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) {Assert.checkNotNullParam(""principalDecoder"",principalDecoder); } assertNotBuilt(); this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) {Assert.checkNotNullParam(""principalDecoder"",principalDecoder); assertNotBuilt(); this.principalDecoder = principalDecoder; return this; } }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) {Assert.checkNotNullParam(""principalDecoder"",principalDecoder); assertNotBuilt(); this.principalDecoder = principalDecoder; } return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) {Assert.checkNotNullParam(""principalDecoder"",principalDecoder); } this.principalDecoder = principalDecoder; assertNotBuilt(); return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) {Assert.checkNotNullParam(""principalDecoder"",principalDecoder); assertNotBuilt(); } this.principalDecoder = principalDecoder; return this; }', 'public Builder setPrincipalDecoder(PrincipalDecoder principalDecoder) { if (roleMapper == null) {Assert.checkNotNullParam(""principalDecoder"",principalDecoder); assertNotBuilt(); this.principalDecoder = principalDecoder; } assertNotBuilt(); return this; }']",[],False,False,False,False,False,False,False,False,0.6580370064762462,0.6580370064762462,0.2260035337078766,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }']","['public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); if (parentMemoryContext == null) { } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } else { } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } requireNonNull(parentMemoryContext); }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); if (parentMemoryContext == null) { requireNonNull(parentMemoryContext); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } else if (parentMemoryContext == null) { } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); if (parentMemoryContext == null) { } else { } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } else { requireNonNull(parentMemoryContext); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); if (parentMemoryContext == null) { } else { requireNonNull(parentMemoryContext); } }']","['public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { \n    if (parentMemoryContext == null) { \n        requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); \n    } \n    requireNonNull(parentMemoryContext); \n}', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { \n    requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); \n}', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { \n    if (parentMemoryContext == null) { \n        requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); \n    } \n}', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { \n    if (parentMemoryContext == null) { \n        requireNonNull(parentMemoryContext); \n    } \n    requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); \n}', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { \n    requireNonNull(parentMemoryContext); \n    if (parentMemoryContext == null) { \n        requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); \n    } \n}', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { \n    requireNonNull(parentMemoryContext); \n}', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { \n    if (parentMemoryContext == null) { \n        requireNonNull(parentMemoryContext); \n    } \n    requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); \n}', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { \n    if (parentMemoryContext == null) { \n        requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); \n    } \n    requireNonNull(parentMemoryContext); \n}', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { \n    requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); \n    if (parentMemoryContext == null) { \n        requireNonNull(parentMemoryContext); \n    } \n}', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { \n    if (parentMemoryContext == null) { \n        requireNonNull(parentMemoryContext); \n    } \n    requireNonNull(parentMemoryContext); \n}']","['public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }', 'public SimpleLocalMemoryContext(AggregatedMemoryContext parentMemoryContext) { if (parentMemoryContext == null) { requireNonNull(parentMemoryContext, ""parentMemoryContext is null""); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p); } }', 'public void addVesselCrew(Person p) { Objects.requireNonNull(p); }', 'public void addVesselCrew(Person p) { if (p == null) { throw new NullPointerException(); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new NullPointerException(""p must not be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new NullPointerException(""p is null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new NullPointerException(""p must not be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new NullPointerException(); } }', 'public void addVesselCrew(Person p) { if (p == null) { throw new NullPointerException(""p is null""); } }', 'public void addVesselCrew(Person p) { Objects.requireNonNull(p); }', 'public void addVesselCrew(Person p) { if (p == null) { throw new NullPointerException(""p must not be null""); } }']","['public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""p is null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""Crew member is null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""Null crew member""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""Null crew provided""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""Crew is null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""Null crew member provided""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""p must not be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""Crew must not be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""Null crew is not allowed""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""Crew member must not be null""); } }']","['public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""p is null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""p must not be null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""p is null and must not be""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""p is null and not allowed""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""Null p is not allowed""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""p must be a non null value""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""p is null and not a non null value""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""p is null and must be non null""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""Null value of p is not allowed""); } }', 'public void addVesselCrew(Person p) { if (p == null) { Objects.requireNonNull(p, ""p is null and a non null value is required""); } }']",[],False,False,False,False,False,False,False,False,0.33602782883534926,0.1444977144915524,0.1444977144915524,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testListAccessCredentials() throws Exception { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() throws Throwable { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() throws RuntimeException { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() throws Error { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() throws Exception { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() throws Throwable { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() throws RuntimeException { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() throws Error { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }']","['public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }']","['public void testListAccessCredentials() { \n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    if (access == null) { \n        assertNotNull(access); \n    } \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() throws Exception { \n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    if (access == null) { \n        assertNotNull(access); \n    } \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() throws RuntimeException { \n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    if (access == null) { \n        assertNotNull(access); \n    } \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() throws Error { \n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    if (access == null) { \n        assertNotNull(access); \n    } \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() throws Throwable { \n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    if (access == null) { \n        assertNotNull(access); \n    } \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() throws Exception, Error { \n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    if (access == null) { \n        assertNotNull(access); \n    } \n    assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() { \n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    if (access == null) { \n        assertNotNull(access); \n    } \n    if(access.size() > 0) assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() throws Exception { \n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    if (access == null) { \n        assertNotNull(access); \n    } \n    if(access.size() > 0) assertTrue(access.size() > 0); \n}', 'public void testListAccessCredentials() { \n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    if (access == null) { \n        assertNotNull(access); \n    } \n    if(access.size() > 0) assertTrue(access.size() > 0); \n    if(access == null) { \n        assertTrue(access.size() > 0); \n    } \n}', 'public void testListAccessCredentials() throws Exception { \n    List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); \n    if (access == null) { \n        assertNotNull(access); \n    } \n    if(access.size() > 0) assertTrue(access.size() > 0); \n    if(access == null) { \n        assertTrue(access.size() > 0); \n    } \n}']","['public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() throws Exception { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() throws RuntimeException { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() throws Error { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() throws Throwable { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() throws Exception { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() throws RuntimeException { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }', 'public void testListAccessCredentials() throws Throwable { List<SharedStorageAccess> access = sharedStorageApi().getAccessCredentials(); if (access == null) { assertNotNull(access); } assertTrue(access.size() > 0); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty() == true; }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && !normalized.toString().isEmpty() == false; }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && (normalized.toString().isEmpty() == true); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty() && true; }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return (normalized.getNameCount() == 1) && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && (normalized.toString().isEmpty() && true); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return (normalized.getNameCount() == 1) && (normalized.toString().isEmpty() == true); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && !normalized.toString().isEmpty() == false && true; }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return (normalized.getNameCount() == 1) && normalized.toString().isEmpty() && (true == true); }']","['public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty() == true; }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && ! normalized.toString().isEmpty() == false; }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && ( normalized.toString().isEmpty() ); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return ( normalized.getNameCount() == 1 ) && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && ( normalized.toString().isEmpty() == true ); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return ( normalized.getNameCount() == 1 ) && ( normalized.toString().isEmpty() ); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && ! ( normalized.toString().isEmpty() == false ); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return ( normalized.getNameCount() == 1 ) && ! ( normalized.toString().isEmpty() == false ); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && ( ! normalized.toString().isEmpty() ) == false; }']","['public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.toString().isEmpty() && normalized.getNameCount() == 1; }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().equals(""""); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty() && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty() && normalized.getNameCount() == 1; }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty() && normalized.toString().isEmpty() && normalized.getNameCount() == 1; }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.toString().isEmpty() && normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty() && normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.toString().isEmpty() && normalized.getNameCount() == 1; }']","['public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty(); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty() && normalized.toString().equals(""""); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && (normalized.toString().isEmpty() && normalized.toString().equals("""")); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty() && normalized.toString().equals("" "") == false; }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty() && normalized.toString().equals("" "") == false && normalized.toString().equals(""""); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && (normalized.toString().isEmpty() && normalized.toString().equals("" "") == false && normalized.toString().equals("""")); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty() && normalized.toString().equals("" "") == false && normalized.toString().equals("" "") == false; }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && (normalized.toString().isEmpty() && normalized.toString().equals("" "") == false && normalized.toString().equals("" "") == false && normalized.toString().equals("""")); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && normalized.toString().isEmpty() && normalized.toString().equals("" "") == false && normalized.toString().equals("" "") == false && normalized.toString().equals(""""); }', 'public static boolean isEmpty(Path path) { if (path == null) { Objects.requireNonNull(path,""The given path must not be null""); } Path normalized = path.normalize(); return normalized.getNameCount() == 1 && (normalized.toString().isEmpty() && normalized.toString().equals("" "") == false && normalized.toString().equals("" "") == false && normalized.toString().equals("" "") == false && normalized.toString().equals("""")); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }']","['public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }']","['public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } requireNonNull(cacheManager, ""cacheManager is null""); if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } requireNonNull(path, ""path is null""); this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); requireNonNull(inputStream, ""inputStream is null""); requireNonNull(cacheManager, ""cacheManager is null""); if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } requireNonNull(cacheManager, ""cacheManager is null""); requireNonNull(path, ""path is null""); this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); requireNonNull(inputStream, ""inputStream is null""); if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); requireNonNull(inputStream, ""inputStream is null""); requireNonNull(cacheManager, ""cacheManager is null""); if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); requireNonNull(inputStream, ""inputStream is null""); if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } requireNonNull(path, ""path is null""); this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } requireNonNull(cacheManager, ""cacheManager is null""); requireNonNull(path, ""path is null""); this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); requireNonNull(inputStream, ""inputStream is null""); requireNonNull(cacheManager, ""cacheManager is null""); requireNonNull(path, ""path is null""); this.cacheValidationEnabled = cacheValidationEnabled; }']","['public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }', 'public CachingInputStream(FSDataInputStream inputStream, CacheManager cacheManager, Path path, boolean cacheValidationEnabled) { super(inputStream); if (inputStream == null) { requireNonNull(inputStream, ""inputStream is null""); } if (cacheManager == null) { requireNonNull(cacheManager, ""cacheManager is null""); } if (path == null) { requireNonNull(path, ""path is null""); } this.cacheValidationEnabled = cacheValidationEnabled; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }']","['public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }']","['public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty()); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.size() == 0); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } if(result.isEmpty()) { assertTrue,true); } }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } if(result.size() == 0) { assertTrue(result.isEmpty()); } }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } if(result.isEmpty()) { assertTrue(result.isEmpty()); } }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } if(result.size() == 0) { assertTrue(result.size() == 0); } }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } if(result.isEmpty()) { assertTrue(result.size() == 0); } }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } assertTrue(result.isEmpty() == true); }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } if(result.isEmpty()) { assertTrue(result.isEmpty() == true); } }', 'public void testGetAllInterfacesForVdsWithPermissionsForUnpriviligedUser() { List<VdsNetworkInterface> result = dao.getAllInterfacesForVds(VDS_ID,UNPRIVILEGED_USER_ID,true); if (result == null) { assertNotNull(result); } if(result.size() == 0) { assertTrue(result.isEmpty() == true); } }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }']","['public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }', 'public Mutex getMutexForHttpSession(final String sessionId) { Assert.requireNonBlank(sessionId,""sessionId""); final WeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); if (mutexReference == null) { Assert.requireNonNull(mutexReference,""mutexReference""); } return mutexReference.get(); }']","['public Mutex getMutexForHttpSession(final String sessionId) { \n    Assert.requireNonBlank(sessionId,""sessionId""); \n    finalWeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); \n    if (mutexReference == null) { \n        Assert.requireNonNull(mutexReference,""mutexReference""); \n    } \n    return mutexReference.get(); \n}', 'public Mutex getMutexForHttpSession(final String sessionId) { \n    Assert.requireNonBlank(sessionId,""sessionId""); \n    finalWeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); \n    if (mutexReference == null) { \n        Assert.requireNonNull(mutexReference,""mutexReference""); \n    } \n    return mutexReference.get(); \n}', 'public Mutex getMutexForHttpSession(final String sessionId) { \n    Assert.requireNonBlank(sessionId,""sessionId""); \n    finalWeakReference<Mutex> mutexReference = (WeakReference<Mutex>) sessionMutexMap.get(sessionId); \n    if (mutexReference == null) { \n        Assert.requireNonNull(mutexReference,""mutexReference""); \n    } \n    return mutexReference.get(); \n}', 'public Mutex getMutexForHttpSession(final String sessionId) { \n    Assert.requireNonBlank(sessionId,""sessionId""); \n    finalWeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId) == null ? null : (WeakReference<Mutex>) sessionMutexMap.get(sessionId); \n    if (mutexReference == null) { \n        Assert.requireNonNull(mutexReference,""mutexReference""); \n    } \n    return mutexReference.get(); \n}', 'public Mutex getMutexForHttpSession(final String sessionId) { \n    Assert.requireNonBlank(sessionId,""sessionId""); \n    finalWeakReference<Mutex> mutexReference = (WeakReference<Mutex>) sessionMutexMap.get(sessionId); \n    if (mutexReference == null) { \n        Assert.requireNonNull(mutexReference,""mutexReference""); \n    } \n    return mutexReference.get(); \n}', 'public Mutex getMutexForHttpSession(final String sessionId) { \n    Assert.requireNonBlank(sessionId,""sessionId""); \n    finalWeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId) == null ? null : (WeakReference<Mutex>) sessionMutexMap.get(sessionId); \n    if (mutexReference == null) { \n        Assert.requireNonNull(mutexReference,""mutexReference""); \n    } \n    return mutexReference.get(); \n}', 'public Mutex getMutexForHttpSession(final String sessionId) { \n    Assert.requireNonBlank(sessionId,""sessionId""); \n    finalWeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); \n    if (mutexReference == null) { \n        Assert.requireNonNull(mutexReference,""mutexReference""); \n    } \n    return mutexReference.get(); \n}', 'public Mutex getMutexForHttpSession(final String sessionId) { \n    Assert.requireNonBlank(sessionId,""sessionId""); \n    finalWeakReference<Mutex> mutexReference = (WeakReference<Mutex>) sessionMutexMap.get(sessionId); \n    if (mutexReference == null) { \n        Assert.requireNonNull(mutexReference,""mutexReference""); \n    } \n    return mutexReference.get(); \n}', 'public Mutex getMutexForHttpSession(final String sessionId) { \n    Assert.requireNonBlank(sessionId,""sessionId""); \n    finalWeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId) == null ? null : (WeakReference<Mutex>) sessionMutexMap.get(sessionId); \n    if (mutexReference == null) { \n        Assert.requireNonNull(mutexReference,""mutexReference""); \n    } \n    return mutexReference.get(); \n}', 'public Mutex getMutexForHttpSession(final String sessionId) { \n    Assert.requireNonBlank(sessionId,""sessionId""); \n    finalWeakReference<Mutex> mutexReference = sessionMutexMap.get(sessionId); \n    if (mutexReference == null) { \n        Assert.requireNonNull(mutexReference,""mutexReference""); \n    } \n    return mutexReference.get(); \n}']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.3679134727458049,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""ibor""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexArgument""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndexArgument""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexValue""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborValue""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexParam""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndexParam""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }']","['public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""ibor""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexArg""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborArg""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexName""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndexName""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""inputIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }']","['public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""ibor""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexArg""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""currencyIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexName""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexCode""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndexName""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }']","['public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""index""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndex""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexArgument""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndexArgument""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexParam""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexCurveArgument""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndexParam""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""indexArgumentParam""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }', 'public ImmutableRatesProviderBuilder iborIndexCurve(IborIndex index,Curve forwardCurve) { if (index == null) { ArgChecker.notNull(index,""iborIndexCurve""); } if (forwardCurve == null) { ArgChecker.notNull(forwardCurve,""forwardCurve""); } this.indexCurves.put(index,forwardCurve); return this; }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }']","['SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }']","['JWSAlgorithm expectedJwsAlgorithm = null; SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'JWSAlgorithm expectedJwsAlgorithm; SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }', 'SingleKeyJWSKeySelector(JWSAlgorithm expectedJwsAlgorithm,Key key) { if (expectedJwsAlgorithm == null) { Assert.notNull(expectedJwsAlgorithm,""expectedJwsAlgorithm cannot be null""); } if (key == null) { Assert.notNull(key,""key cannot be null""); } this.keySet = Arrays.asList(key); this.expectedJwsAlgorithm = expectedJwsAlgorithm; }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method,""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method,""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method,""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method,""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method,""method"").toUpperCase(Locale.ROOT));}']","['public static Method normalizedValueOf(final String method) { return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT)); }', 'public static Method normalizedValueOf(final String method) { if(method != null) return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT)); }', 'public static Method normalizedValueOf(final String method) { if(method != null) return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT)); return null; }', 'public static Method normalizedValueOf(final String method) { if(method != null) { return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT)); } }', 'public static Method normalizedValueOf(final String method) { if(method != null) { return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT)); } return null; }', 'public static Method normalizedValueOf(final String method) { if(method != null) { return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT)); } else { return null; } }', 'public static Method normalizedValueOf(final String method) { if(method != null) { return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT)); } else { return null; } }', 'public static Method normalizedValueOf(final String method) { if(method != null) return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT)); else return null; }', 'public static Method normalizedValueOf(final String method) { if(method != null) { return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT)); } else return null; }', 'public static Method normalizedValueOf(final String method) { if(method != null) { return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT)); } else return null; }']","['public static Method normalizedValueOf(final String method) {return valueOf(Objects.requireNonNull(method,""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}']","['public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}', 'public static Method normalizedValueOf(final String method) {return valueOf(Args.notNull(method, ""method"").toUpperCase(Locale.ROOT));}']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } return valueOf(CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName).replaceAll(""I_S_D_A$"", ""ORIGINAL_ISDA"")) }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); str = str.endsWith(""I_S_D_A"") ? ""ORIGINAL_ISDA"" : str; return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) str = ""ORIGINAL_ISDA""; return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); str = str.replace(""I_S_D_A"", ""ORIGINAL_ISDA""); return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if(str.endsWith(""I_S_D_A""))str = ""ORIGINAL_ISDA""; return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); str = str.endsWith(""I_S_D_A"") ? ""ORIGINAL_ISDA"" : str; return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if(str.endsWith(""I_S_D_A"")) {str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); str = str.endsWith(""I_S_D_A"") ? ""ORIGINAL_ISDA"" : str; return valueOf(str); }']","['public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH)); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH)); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }']","['public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } return valueOf(uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH)); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH); return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } return valueOf(CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH))); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } str = str.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH); return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH)); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } return valueOf(CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH))); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, str)); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); str = str.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = uniqueName.replace(\'-\',\'_\').toUpperCase(Locale.ENGLISH); return valueOf(CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, str)); }']","['public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { return valueOf(""ORIGINAL_ISDA""); } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { return valueOf(""ORIGINAL_ISDA""); } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { return valueOf(""ORIGINAL_ISDA""); } return valueOf(str); }', 'public static AccrualOnDefaultFormula of(String uniqueName) { if (uniqueName == null) { ArgChecker.notNull(uniqueName,""uniqueName""); } String str = CaseFormat.UPPER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, uniqueName); if (str.endsWith(""I_S_D_A"")) { str = ""ORIGINAL_ISDA""; } return valueOf(str); }']",True,True,False,True,False,False,False,False,0.0,0.0,0.5423782837718303,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = (ArrayType) t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { ArrayType array = t; s[0] = array; } ); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { s[0] = (ArrayType) t; } ); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t == null) { s[0] = null; } else { s[0] = (ArrayType) t; } } ); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t == null) { s[0] = null; } else { s[0] = t; } } ); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t == null) { s[0] = null; } else { ArrayType array = t; s[0] = array; } } ); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t == null) { s[0] = null; } else { ArrayType array = (ArrayType) t; s[0] = array; } } ); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t == null) { s[0] = null; } else { s[0] = t; } } ); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t == null) { s[0] = null; } else { s[0] = (ArrayType) t; } } ); if (s[0] == null) { assertNotNull(s[0]); } }']","['public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = (ArrayType) t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { s[0] = t; }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { s[0] = (ArrayType) t; }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { ArrayType array = t; s[0] = array; }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { ArrayType array = (ArrayType) t; s[0] = array; }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t instanceof ArrayType) { s[0] = t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { ArrayType array = t; if (array instanceof ArrayType) { s[0] = array; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { ArrayType array = (ArrayType) t; if (array instanceof ArrayType) { s[0] = array; } }); if (s[0] == null) { assertNotNull(s[0]); } }']","['public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = (ArrayType) t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { s[0] = t; }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { s[0] = (ArrayType) t; }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t == null) { s[0] = null; } else { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t == null) { s[0] = null; } else { s[0] = t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t == null) { s[0] = null; } else { s[0] = t; } }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> s[0] = t); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { s[0] = t; }); if (s[0] == null) { assertNotNull(s[0]); } }', 'public void arrayType() { Type type = parseType(""int[]""); assertTrue(type.isArrayType()); ArrayType arrayType = type.asArrayType(); final ArrayType[] s = new ArrayType[1]; type.ifArrayType(t -> { if (t == null) { s[0] = null; } else { s[0] = (ArrayType) t; } }); if (s[0] == null) { assertNotNull(s[0]); } }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } this.expression = expression; }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { requireNonNull(expression,""expression can\'t be null""); this.expression = expression; } }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { requireNonNull(expression,""expression can\'t be null""); this.expression = expression; } }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { requireNonNull(expression,""expression can\'t be null""); this.expression = expression; } }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { requireNonNull(expression,""expression can\'t be null""); this.expression = expression; } }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { requireNonNull(expression,""expression can\'t be null""); this.expression = expression; } }']","['public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } this.expression = expression; }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { requireNonNull(expression,""expression can\'t be null""); this.expression = expression; } }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } else { this.expression = expression; } }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } else this.expression = expression; }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } this.expression = this.expression; }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } this.expression = (expression == null) ? this.expression : expression; }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } this.expression = expression == null ? this.expression : expression; }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } this.expression = (expression != null) ? expression : this.expression; }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } this.expression = expression != null ? expression : this.expression; }']","['public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } this.expression = expression; }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { requireNonNull(expression,""expression can\'t be null""); this.expression = expression; } }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { requireNonNull(expression,""expression can\'t be null""); this.expression = expression; } this.expression = expression; }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } this.expression = this.expression; }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { requireNonNull(expression,""expression can\'t be null""); } this.expression = expression; }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } this.expression = this.expression; }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { requireNonNull(expression,""expression can\'t be null""); this.expression = expression; } this.expression = this.expression; }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { this.expression = requireNonNull(expression,""expression can\'t be null""); } this.expression = this.expression; }', 'public ProcessorExpressionRoute(String expression,Processor processor) { super(processor); if (expression == null) { requireNonNull(expression,""expression can\'t be null""); this.expression = expression; } this.expression = this.expression; }']",[],False,False,False,False,False,False,False,False,0.17063407610369333,0.17063407610369333,0.17063407610369333,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } else { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } else for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes == true) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } else { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } else { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); for (WorkspaceImpl workspace : workspaces) { if (includeRuntimes) normalizeState(workspace, includeRuntimes); else normalizeState(workspace, includeRuntimes); } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } else for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } else { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } return workspaces; }']","['public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } else { for (WorkspaceImpl workspace : workspaces) { workspace.setStatus(runtimes.getStatus(workspace.getId())); } } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } else { return workspaces; } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } else { for (WorkspaceImpl workspace : workspaces) { workspace.setStatus(runtimes.getStatus(workspace.getId())); } return workspaces; } }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } return workspaces; } else { for (WorkspaceImpl workspace : workspaces) { workspace.setStatus(runtimes.getStatus(workspace.getId())); } } }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } else { for (WorkspaceImpl workspace : workspaces) { workspace.setStatus(runtimes.getStatus(workspace.getId())); } } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } else { for (WorkspaceImpl workspace : workspaces) { workspace.setStatus(runtimes.getStatus(workspace.getId())); } return workspaces; } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } return workspaces; } else { for (WorkspaceImpl workspace : workspaces) { workspace.setStatus(runtimes.getStatus(workspace.getId())); } return workspaces; } }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } return workspaces; } else { for (WorkspaceImpl workspace : workspaces) { workspace.setStatus(runtimes.getStatus(workspace.getId())); } } return workspaces; }', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { if (namespace == null) { requireNonNull(namespace,""Required non-null namespace""); } final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); if (includeRuntimes) { for (WorkspaceImpl workspace : workspaces) { normalizeState(workspace, includeRuntimes); } } else { for (WorkspaceImpl workspace : workspaces) { workspace.setStatus(runtimes.getStatus(workspace.getId())); } } return workspaces; }']","['public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { \n    if (namespace == null) { \n        requireNonNull(namespace,""Required non-null namespace""); \n    } \n    final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); \n    if (includeRuntimes) { \n        for (WorkspaceImpl workspace : workspaces) { \n            normalizeState(workspace, includeRuntimes); \n        } \n    } else { \n        for (WorkspaceImpl workspace : workspaces) { \n            workspace.setStatus(runtimes.getStatus(workspace.getId())); \n        } \n    } \n    return workspaces; \n}', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { \n    if (namespace == null) { \n        requireNonNull(namespace,""Required non-null namespace""); \n    } \n    final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); \n    if (includeRuntimes) { \n        workspaces.forEach(workspace -> normalizeState(workspace, includeRuntimes)); \n    } else { \n        for (WorkspaceImpl workspace : workspaces) { \n            workspace.setStatus(runtimes.getStatus(workspace.getId())); \n        } \n    } \n    return workspaces; \n}', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { \n    if (namespace == null) { \n        requireNonNull(namespace,""Required non-null namespace""); \n    } \n    final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); \n    if (includeRuntimes) { \n        for (WorkspaceImpl workspace : workspaces) { \n            normalizeState(workspace, includeRuntimes); \n        } \n        return workspaces; \n    } else { \n        for (WorkspaceImpl workspace : workspaces) { \n            workspace.setStatus(runtimes.getStatus(workspace.getId())); \n        } \n        return workspaces; \n    } \n}', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { \n    if (namespace == null) { \n        requireNonNull(namespace,""Required non-null namespace""); \n    } \n    final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); \n    if (includeRuntimes) { \n        workspaces.forEach(workspace -> normalizeState(workspace, includeRuntimes)); \n        workspaces.forEach(workspace -> normalizeState(workspace)); \n    } else { \n        for (WorkspaceImpl workspace : workspaces) { \n            workspace.setStatus(runtimes.getStatus(workspace.getId())); \n        } \n    } \n    return workspaces; \n}', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { \n    if (namespace == null) { \n        requireNonNull(namespace,""Required non-null namespace""); \n    } \n    final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); \n    if (includeRuntimes) { \n        for (WorkspaceImpl workspace : workspaces) { \n            normalizeState(workspace, includeRuntimes); \n            normalizeState(workspace); \n        } \n    } else { \n        for (WorkspaceImpl workspace : workspaces) { \n            workspace.setStatus(runtimes.getStatus(workspace.getId())); \n        } \n    } \n    return workspaces; \n}', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { \n    if (namespace == null) { \n        requireNonNull(namespace,""Required non-null namespace""); \n    } \n    final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); \n    if (includeRuntimes) { \n        workspaces.forEach(workspace -> { \n            normalizeState(workspace, includeRuntimes); \n            normalizeState(workspace); \n        }); \n    } else { \n        for (WorkspaceImpl workspace : workspaces) { \n            workspace.setStatus(runtimes.getStatus(workspace.getId())); \n        } \n    } \n    return workspaces; \n}', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { \n    if (namespace == null) { \n        requireNonNull(namespace,""Required non-null namespace""); \n    } \n    final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); \n    if (includeRuntimes) { \n        workspaces.forEach(workspace -> normalizeState(workspace, includeRuntimes)); \n    } \n    if (!includeRuntimes) { \n        for (WorkspaceImpl workspace : workspaces) { \n            workspace.setStatus(runtimes.getStatus(workspace.getId())); \n        } \n    } \n    return workspaces; \n}', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { \n    if (namespace == null) { \n        requireNonNull(namespace,""Required non-null namespace""); \n    } \n    final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); \n    if (includeRuntimes) { \n        for (WorkspaceImpl workspace : workspaces) { \n            normalizeState(workspace, includeRuntimes); \n        } \n    } \n    if (!includeRuntimes) { \n        for (WorkspaceImpl workspace : workspaces) { \n            workspace.setStatus(runtimes.getStatus(workspace.getId())); \n        } \n    } \n    return workspaces; \n}', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { \n    if (namespace == null) { \n        requireNonNull(namespace,""Required non-null namespace""); \n    } \n    final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); \n    if (includeRuntimes) { \n        workspaces.forEach(workspace -> normalizeState(workspace, includeRuntimes)); \n    } else { \n        workspaces.forEach(workspace -> workspace.setStatus(runtimes.getStatus(workspace.getId()))); \n    } \n    return workspaces; \n}', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { \n    if (namespace == null) { \n        requireNonNull(namespace,""Required non-null namespace""); \n    } \n    final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); \n    if (includeRuntimes) { \n        for (WorkspaceImpl workspace : workspaces) { \n            normalizeState(workspace, includeRuntimes); \n        } \n    } else { \n        workspaces.forEach(workspace -> workspace.setStatus(runtimes.getStatus(workspace.getId()))); \n    } \n    return workspaces; \n}', 'public List<WorkspaceImpl> getByNamespace(String namespace,boolean includeRuntimes) throws ServerException { \n    if (namespace == null) { \n        requireNonNull(namespace,""Required non-null namespace""); \n    } \n    final List<WorkspaceImpl> workspaces = workspaceDao.getByNamespace(namespace); \n    workspaces.forEach(workspace -> { \n        if (includeRuntimes) { \n            normalizeState(workspace, includeRuntimes); \n        } else { \n            workspace.setStatus(runtimes.getStatus(workspace.getId())); \n        } \n    }); \n    return workspaces; \n}']",[],True,False,False,False,False,False,False,False,0.0,0.3748171177217685,0.3573352482107136,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { this.sslContext = sslContext; requireNonNull(socksProxy,""socksProxy is null""); this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { this.sslContext = sslContext; requireNonNull(socksProxy,""socksProxy is null""); this.timeoutMillis = toIntExact(timeout.toMillis()); requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { this.sslContext = sslContext; requireNonNull(socksProxy,""socksProxy is null""); this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { this.sslContext = sslContext; requireNonNull(socksProxy,""socksProxy is null""); this.timeoutMillis = toIntExact(timeout.toMillis()); requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } requireNonNull(socksProxy,""socksProxy is null""); }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { this.sslContext = sslContext; requireNonNull(socksProxy,""socksProxy is null""); this.timeoutMillis = toIntExact(timeout.toMillis()); requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); requireNonNull(socksProxy,""socksProxy is null""); }']","['public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { requireNonNull(sslContext,""sslContext is null""); this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { if(sslContext == null) { requireNonNull(sslContext,""sslContext is null""); } this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { if (sslContext == null) requireNonNull(sslContext,""sslContext is null""); this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { requireNonNull(sslContext,""sslContext is null""); this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { if (sslContext == null) { requireNonNull(sslContext,""sslContext is null""); } this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { if (sslContext == null) requireNonNull(sslContext,""sslContext is null""); this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { requireNonNull(sslContext,""sslContext is null""); this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { if (sslContext == null) requireNonNull(sslContext,""sslContext is null""); this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { if (sslContext == null) { requireNonNull(sslContext,""sslContext is null""); } this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { requireNonNull(sslContext,""sslContext is null""); this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }']","['public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { requireNonNull sslContext; this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { if ( sslContext == null) { requireNonNull( sslContext,"" sslContext is null""); } this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { if ( sslContext == null) { requireNonNull( sslContext,"" sslContext is null""); } this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { if ( sslContext == null) { requireNonNull( sslContext,"" sslContext is null""); } this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { if ( sslContext == null) { requireNonNull( sslContext,"" sslContext is null""); } this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { if ( sslContext == null) { requireNonNull( sslContext,"" sslContext is null""); } this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { if ( sslContext == null) { requireNonNull( sslContext,"" sslContext is null""); } this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { if ( sslContext == null) { requireNonNull( sslContext,"" sslContext is null""); } this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }', 'public HiveMetastoreClientFactory(Optional<SSLContext> sslContext,Optional<HostAndPort> socksProxy,Duration timeout,HiveMetastoreAuthentication metastoreAuthentication) { if ( sslContext == null) { requireNonNull( sslContext,"" sslContext is null""); } this.sslContext = sslContext; if (socksProxy == null) { requireNonNull(socksProxy,""socksProxy is null""); } this.timeoutMillis = toIntExact(timeout.toMillis()); if (metastoreAuthentication == null) { requireNonNull(metastoreAuthentication,""metastoreAuthentication is null""); } }']",[],False,False,False,False,False,False,False,False,0.21875692271162991,0.19689248240396137,0.19760644381235015,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Test Schema type promotion""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Test Schema type promotion""); LOG.debug(""########## testSchemaTypePromotion ##############""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Test Schema type promotion start""); LOG.debug(""########## testSchemaTypePromotion ##############""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Schema type promotion test""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Test Schema type promotion""); LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Test Schema type promotion""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Test Schema type promotion""); LOG.debug(""Test Schema type promotion""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Test Schema type promotion start""); LOG.debug(""Test Schema type promotion""); LOG.debug(""########## testSchemaTypePromotion ##############""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Schema type promotion test start""); LOG.debug(""Schema type promotion test""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Test Schema type promotion""); LOG.debug(""Schema type promotion test""); LOG.debug(""########## testSchemaTypePromotion ##############""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Test Schema type promotion start""); LOG.debug(""Schema type promotion test""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }']","['public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""########## testSchemaTypePromotion ##############""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Test Schema type promotion""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Schema type promotion test""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Promotion test for schema type""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Test for schema type promotion""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Schema promotion test""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Type promotion for schema""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Promotion of schema type""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Schema type promotion""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Type promotion test for schema""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }']","['public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Test schema type promotion""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); LOG.debug(""Test schema type promotion complete""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Schema type promotion test""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); LOG.debug(""Schema type promotion test complete""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Type promotion test""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); LOG.debug(""Type promotion test complete""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Schema promotion test""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); LOG.debug(""Schema promotion test complete""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Type promotion schema test""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); LOG.debug(""Type promotion schema test complete""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Schema type promotion test start""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); LOG.debug(""Schema type promotion test end""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Test for schema type promotion""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); LOG.debug(""Test for schema type promotion complete""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Schema type promotion test in progress""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); LOG.debug(""Schema type promotion test complete""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Type promotion test for schema""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); LOG.debug(""Type promotion test for schema complete""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""########## testSchemaTypePromotion ##############""); LOG.debug(""Schema type promotion test is in progress""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); LOG.debug(""Schema type promotion test is complete""); }']","['public void testSchemaTypePromotion() throws Exception { InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Test SchemaTypePromotion""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Test SchemaTypePromotion Start""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""SchemaTypePromotion""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Test SchemaTypePromotion Start and END""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""SchemaTypePromotion Start and END""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Test SchemaTypePromotion""); LOG.debug(""Test SchemaTypePromotion END""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""SchemaTypePromotion Start""); LOG.debug(""SchemaTypePromotion END""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }', 'public void testSchemaTypePromotion() throws Exception { LOG.debug(""Test SchemaTypePromotion Start and END""); LOG.debug(""Test SchemaTypePromotion""); InputStream stream = new ByteArrayInputStream(csvLines2.getBytes(""utf8"")); Schema schema = CSVUtil.inferSchema(""TestRecord"",stream,new CSVProperties.Builder().hasHeader().build()); if (schema.getField(""long"") == null) { Assert.assertNotNull(schema.getField(""long"")); } if (schema.getField(""nullable_double"") == null) { Assert.assertNotNull(schema.getField(""nullable_double"")); } if (schema.getField(""nullable_double2"") == null) { Assert.assertNotNull(schema.getField(""nullable_double2"")); } if (schema.getField(""string"") == null) { Assert.assertNotNull(schema.getField(""string"")); } Assert.assertEquals(""Should infer a long"",schema(Schema.Type.LONG),schema.getField(""long"").schema()); Assert.assertEquals(""Should infer a double (third row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double"").schema()); Assert.assertEquals(""Should infer a double (second row is decimal)"",nullable(Schema.Type.DOUBLE),schema.getField(""nullable_double2"").schema()); Assert.assertEquals(""Should infer a nullable string (third row is string)"",schema(Schema.Type.STRING),schema.getField(""string"").schema()); LOG.debug(""########## END typePromotion ############""); }']",False,False,False,False,False,False,False,False,0.47284097181023194,0.47284097181023194,0.47259919682057566,0.5310033082047186
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member memberToAdd = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), memberToAdd); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member communityMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), communityMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member memberToAddCommunity = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), memberToAddCommunity); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newCommunityMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newCommunityMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member member = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), member); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member memberList : members) { if (memberList.getUserid() == null) { assertNotNull(memberList.getUserid()); } if (memberList.getName() == null) { assertNotNull(memberList.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member toAdd = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), toAdd); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member communityToAdd = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), communityToAdd); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMemberToAdd = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMemberToAdd); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member memberToAddCommunityList = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), memberToAddCommunityList); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }']","['public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }']","['public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }']","['public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }', 'public final void testAddRemoveMember() throws Exception { CommunityService communityService = new CommunityService(); authenticateEndpoint(communityService.getEndpoint(), properties.getProperty(""user1""), properties.getProperty(""passwordUser1"")); CommunityList communities = communityService.getMyCommunities(); Community community = communities.iterator().next(); Member newMember = new Member(communityService, properties.getProperty(""email2"")); communityService.addMember(community.getCommunityUuid(), newMember); MemberList members = communityService.getMembers(community.getCommunityUuid()); for (Member member : members) { if (member.getUserid() == null) { assertNotNull(member.getUserid()); } if (member.getName() == null) { assertNotNull(member.getName()); } } communityService.removeMember(community.getCommunityUuid(), properties.getProperty(""email2"")); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkConverterAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkConverterAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkConverterAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkConverterAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkConverterAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkConverterAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }']","['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }']","['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.getProperty(""line.separator""); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = ""\\n""; assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = ""\\n""; assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = ""\\n""; assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = ""\\n""; assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = ""\\n""; assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = ""\\n""; assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = ""\\n""; assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }']","['public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); assertEquals(""Hello from a PDF Document!"" + System.lineSeparator() + System.lineSeparator() + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + System.lineSeparator() + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + System.lineSeparator() + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); assertEquals(""Hello from a PDF Document!"" + System.lineSeparator() + System.lineSeparator() + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + newline + newline + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + System.lineSeparator() + System.lineSeparator() + System.lineSeparator() + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); assertEquals(""Hello from a PDF Document!"" + System.lineSeparator() + System.lineSeparator() + System.lineSeparator() + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + newline + System.lineSeparator() + System.lineSeparator() + ""\\f"",blob.getString()); }', 'public void testConverter() throws Exception { String converterName = cs.getConverterName(""application/pdf"",""text/plain""); assertEquals(""pdf2text"",converterName); checkConverterAvailability(converterName); checkCommandAvailability(""pdftotext""); BlobHolder pdfBH = getBlobFromPath(""test-docs/hello.pdf""); BlobHolder result = cs.convert(converterName,pdfBH,null); if (result == null) { assertNotNull(result); } List<Blob> blobs = result.getBlobs(); if (blobs == null) { assertNotNull(blobs); } assertEquals(1,blobs.size()); Blob blob = result.getBlob(); if (blob == null) { assertNotNull(blob); } assertEquals(""text/plain"",blob.getMimeType()); assertTrue(blob.getLength() > 0); String newline = System.lineSeparator(); assertEquals(""Hello from a PDF Document!"" + System.lineSeparator() + newline + System.lineSeparator() + ""\\f"",blob.getString()); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream ObjectOutputStream = new ObjectOutputStream(byteArrayOutputStream); ObjectOutputStream.writeObject(result); ObjectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream outputStream = new ObjectOutputStream(byteArrayOutputStream); outputStream.writeObject(result); outputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }']","['private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream outputStream = new ObjectOutputStream(byteArrayOutputStream); outputStream.writeObject(result); outputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream output = new ObjectOutputStream(byteArrayOutputStream); output.writeObject(result); output.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectStream = new ObjectOutputStream(byteArrayOutputStream); objectStream.writeObject(result); objectStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream outputStreamObject = new ObjectOutputStream(byteArrayOutputStream); outputStreamObject.writeObject(result); outputStreamObject.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }']","['private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }']","['private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }', 'private void assertResultSerializable(Result result) throws IOException,ClassNotFoundException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream); objectOutputStream.writeObject(result); objectOutputStream.flush(); byte[] bytes = byteArrayOutputStream.toByteArray(); ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)); Result fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(result,fromStream); InputStream resource = getClass().getResourceAsStream(getName()); if (""Could not read resource "" + getName() == null) { assertNotNull(""Could not read resource "" + getName(),resource); } objectInputStream = new ObjectInputStream(resource); fromStream = (Result) objectInputStream.readObject(); assertSerializedCorrectly(new ResultWithFixedRunTime(result),fromStream); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",!((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == false); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); if (analysis.eResource() == null) { fail(""Resource should not be null.""); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } if (analysis.eResource() == null) { fail(""Resource should not be null.""); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); if (RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))) { assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); } try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); if (RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))) { assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); } checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); if (doesAnErrorOccurs() == false) { assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); } }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); if (doesAnErrorOccurs() == true) { assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); } }']","['public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() == 0); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",!((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } if (((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true) { assertTrue(""Check the migration logic."", true); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } if (((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true) { assertTrue(""Check the migration logic."", true); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } if (((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true) { assertTrue(""Check the migration logic."", true); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } if (((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true) { assertTrue(""Check the migration logic."", true); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }']","['public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() == 0); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() < 1); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() == 0); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() < 1); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() == 0); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() < 1); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().size() == 0); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }']","['public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",!((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } if (((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { assertTrue(""Check the migration logic."", true); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } if (((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { } else { fail(""Check the migration logic.""); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } if (((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { assertTrue(""Check the migration logic."", true); } else { fail(""Check the migration logic.""); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty() == true); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } if (((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()) { } else { fail(""Check the migration logic.""); } String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }', 'public void testDRepresentationContainerRemovalMigrationDone() { ResourceSet set = new ResourceSetImpl(); DAnalysis analysis = null; try { analysis = (DAnalysis) ModelUtils.load(URI.createPlatformResourceURI(TEMPORARY_PROJECT_NAME + ""/"" + SESSION_RESOURCE_NAME,true),set); } catch (IOException e) { failCheckData(); } if (""Check the representation file test data."" == null) { assertNotNull(""Check the representation file test data."",analysis); } assertTrue(""Check the migration logic."",((XMLResource) analysis.eResource()).getEObjectToExtensionMap().isEmpty()); String version = analysis.getVersion(); assertTrue(""Before save,the migration framework will return true even if the migration has"" + "" been done during load."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); try { analysis.eResource().save(Collections.emptyMap()); } catch (IOException e) { failCheckData(); } version = analysis.getVersion(); assertFalse(""The version tag should now be set telling that the migration was done."",RepresentationsFileMigrationService.getInstance().isMigrationNeeded(Version.parseVersion(version))); checkFileContainsDRepresentationContainer(analysis.eResource().getURI(),false,""After migration,the resource should not contains any DRepresentationContainer.""); assertFalse(getErrorLoggersMessage(),doesAnErrorOccurs()); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']","['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']","['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; default: if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else { if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""ARCHIVE"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']","['public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); Map<String, Long> storageTypeMap = new HashMap<>(); storageTypeMap.put(""ARCHIVE"", 3L); storageTypeMap.put(""DISK"", 3L); storageTypeMap.put(""RAM_DISK"", 7L); storageTypeMap.put(""NVDIMM"", 1L); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageTypeMap.containsKey(storageType)) { assertEquals(storageTypeMap.get(storageType), storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageType.equals(""ARCHIVE"") || storageType.equals(""DISK"")) { assertEquals(3L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""RAM_DISK"")) { assertEquals(7L,storageTypeStats.get(""nodesInService"")); } else if (storageType.equals(""NVDIMM"")) { assertEquals(1L,storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); Map<String, Long> storageTypeMap = new HashMap<>(); storageTypeMap.put(""ARCHIVE"", 3L); storageTypeMap.put(""DISK"", 3L); storageTypeMap.put(""RAM_DISK"", 7L); storageTypeMap.put(""NVDIMM"", 1L); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageTypeMap.containsKey(storageType)) { assertEquals(storageTypeMap.get(storageType), storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); Map<String, Long> storageTypeMap = new HashMap<>(); storageTypeMap.put(""ARCHIVE"", 3L); storageTypeMap.put(""DISK"", 3L); storageTypeMap.put(""RAM_DISK"", 7L); storageTypeMap.put(""NVDIMM"", 1L); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageTypeMap.containsKey(storageType)) { assertEquals(storageTypeMap.get(storageType), storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); Map<String, Long> storageTypeMap = new HashMap<>(); storageTypeMap.put(""ARCHIVE"", 3L); storageTypeMap.put(""DISK"", 3L); storageTypeMap.put(""RAM_DISK"", 7L); storageTypeMap.put(""NVDIMM"", 1L); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); if (storageTypeMap.containsKey(storageType)) { assertEquals(storageTypeMap.get(storageType), storageTypeStats.get(""nodesInService"")); } else { fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }', 'public void testStorageTypeStatsJMX() throws Exception { URL baseUrl = new URL(cluster.getHttpUri(0)); String result = readOutput(new URL(baseUrl,""/jmx"")); Map<String,Object> stat = (Map<String,Object>) JSON.parse(result); Object[] beans = (Object[]) stat.get(""beans""); Map<String,Object> blockStats = null; for (Object bean : beans) { Map<String,Object> map = (Map<String,Object>) bean; if (map.get(""name"").equals(""Hadoop:service=NameNode,name=BlockStats"")) { blockStats = map; } } if (blockStats == null) { assertNotNull(blockStats); } Object[] storageTypeStatsList = (Object[]) blockStats.get(""StorageTypeStats""); if (storageTypeStatsList == null) { assertNotNull(storageTypeStatsList); } assertEquals(4,storageTypeStatsList.length); Set<String> typesPresent = new HashSet<>(); for (Object obj : storageTypeStatsList) { Map<String,Object> entry = (Map<String,Object>) obj; String storageType = (String) entry.get(""key""); Map<String,Object> storageTypeStats = (Map<String,Object>) entry.get(""value""); typesPresent.add(storageType); switch (storageType) { case ""ARCHIVE"": case ""DISK"": assertEquals(3L,storageTypeStats.get(""nodesInService"")); break; case ""RAM_DISK"": assertEquals(7L,storageTypeStats.get(""nodesInService"")); break; case ""NVDIMM"": assertEquals(1L,storageTypeStats.get(""nodesInService"")); break; default: fail(); } } assertTrue(typesPresent.contains(""ARCHIVE"")); assertTrue(typesPresent.contains(""DISK"")); assertTrue(typesPresent.contains(""RAM_DISK"")); assertTrue(typesPresent.contains(""NVDIMM"")); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration() / 1000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000, (ct.getDuration() / 1000)); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000, (ct.getDuration() / 1000)); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration() / 1000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }']","['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000/1000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }']","['public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration() / 1000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000, (ct.getDuration() / 1000) / 1000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration() / 1000000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000, (ct.getDuration() / 1000)); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration() / 1000); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }', 'public void testProcessSingle() { Trace trace = new Trace(); trace.setId(""btxnId""); trace.setBusinessTransaction(""btxnName""); trace.setStartTime(100); Consumer c = new Consumer(); c.setUri(""uri""); c.setBaseTime(1); c.setDuration(200000); c.getProperties().add(new Property(Constants.PROP_FAULT,""myFault"")); c.setEndpointType(""HTTP""); trace.getNodes().add(c); FragmentCompletionTimeDeriver deriver = new FragmentCompletionTimeDeriver(); CompletionTime ct = null; try { ct = deriver.processOneToOne(null,trace); } catch (Exception e) { fail(""Failed: "" + e); } if (ct == null) { assertNotNull(ct); } assertEquals(trace.getId(),ct.getId()); assertEquals(trace.getBusinessTransaction(),ct.getBusinessTransaction()); assertEquals(c.getEndpointType(),ct.getEndpointType()); assertFalse(ct.isInternal()); assertEquals(trace.getStartTime(),ct.getTimestamp()); assertEquals(c.getUri(),ct.getUri()); assertEquals(200000,ct.getDuration()); assertEquals(c.getProperties(Constants.PROP_FAULT),ct.getProperties(Constants.PROP_FAULT)); }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }']","['public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertEquals null,BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertTrue(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) == null); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertFalse(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertTrue(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) == null); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertEquals(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1), null); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertTrue(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertFalse(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) == null); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertTrue(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) == null); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertEquals( null,BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }']","['public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(0, feedbackEditPage.getTextsForAllStatusMessagesToUser().size()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if (feedbackEditPage.getTextsForAllStatusMessagesToUser().isEmpty() != true) { assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); } if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if (feedbackEditPage.getTextsForAllStatusMessagesToUser().size() != 0) { assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); } if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if (feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); } if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if (feedbackEditPage.getTextsForAllStatusMessagesToUser().size() != 0) { assertEquals(0, feedbackEditPage.getTextsForAllStatusMessagesToUser().size()); } if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if (feedbackEditPage.getTextsForAllStatusMessagesToUser().isEmpty() != true) { assertEquals(0, feedbackEditPage.getTextsForAllStatusMessagesToUser().size()); } if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if (feedbackEditPage.getTextsForAllStatusMessagesToUser() != null) { assertEquals(0, feedbackEditPage.getTextsForAllStatusMessagesToUser().size()); } if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if (feedbackEditPage.getTextsForAllStatusMessagesToUser().isEmpty() != true) { assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); } if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); if (feedbackEditPage.getTextsForAllStatusMessagesToUser().size() != 0) { assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); } if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }']","['public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }', 'public void testInputValidation() { ______TS(""CONST SUM:input validation""); feedbackEditPage.fillQuestionTextBoxForNewQuestion(""ConstSum-recipient qn""); feedbackEditPage.fillQuestionDescriptionForNewQuestion(""more details""); feedbackEditPage.fillConstSumPointsBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsBoxForNewQuestion()); feedbackEditPage.fillConstSumPointsForEachRecipientBoxForNewQuestion(""""); assertEquals(""1"",feedbackEditPage.getConstSumPointsForEachRecipientBoxForNewQuestion()); assertFalse(feedbackEditPage.isElementVisible(""constSumOptionTable--1"")); feedbackEditPage.clickDiscardChangesLinkForNewQuestion(); feedbackEditPage.waitForConfirmationModalAndClickOk(); assertEquals(Collections.emptyList(), feedbackEditPage.getTextsForAllStatusMessagesToUser()); if (BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1) != null) { assertNull(BackDoor.getFeedbackQuestion(courseId,feedbackSessionName,1)); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }']","['public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }']","['public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { \n    helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); \n    helper.server.start(); \n    helper.setEndpointNameFromX509(helper.clientX509Cert); \n    helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); \n    helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); \n    helper.assertClientNotRegisterered(); \n    helper.client.start(); \n    helper.waitForRegistrationAtServerSide(1); \n    if (helper.getCurrentRegistration() == null) { \n        assertNotNull(helper.getCurrentRegistration()); \n    } \n}', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { \n    helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); \n    helper.server.start(); \n    helper.setEndpointNameFromX509(helper.clientX509Cert); \n    helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); \n    helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); \n    helper.assertClientNotRegisterered(); \n    helper.client.start(); \n    helper.waitForRegistrationAtServerSide(10); \n    if (helper.getCurrentRegistration() == null) { \n        assertNotNull(helper.getCurrentRegistration()); \n    } \n}', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { \n    helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); \n    helper.server.start(); \n    helper.setEndpointNameFromX509(helper.clientX509Cert); \n    helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); \n    helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); \n    helper.assertClientNotRegisterered(); \n    helper.client.start(); \n    helper.waitForRegistrationAtServerSide(100); \n    if (helper.getCurrentRegistration() == null) { \n        assertNotNull(helper.getCurrentRegistration()); \n    } \n}', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { \n    helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); \n    helper.server.start(); \n    helper.setEndpointNameFromX509(helper.clientX509Cert); \n    helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); \n    helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); \n    helper.assertClientNotRegisterered(); \n    helper.client.start(); \n    helper.waitForRegistrationAtServerSide(1000); \n    if (helper.getCurrentRegistration() == null) { \n        assertNotNull(helper.getCurrentRegistration()); \n    } \n}', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { \n    helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); \n    helper.server.start(); \n    helper.setEndpointNameFromX509(helper.clientX509Cert); \n    helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); \n    helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); \n    helper.assertClientNotRegisterered(); \n    helper.client.start(); \n    helper.waitForRegistrationAtServerSide(1000); \n    if (helper.getCurrentRegistration() == null) { \n        assertNotNull(helper.getCurrentRegistration()); \n    } \n}', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { \n    helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); \n    helper.server.start(); \n    helper.setEndpointNameFromX509(helper.clientX509Cert); \n    helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); \n    helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); \n    helper.assertClientNotRegisterered(); \n    helper.client.start(); \n    helper.waitForRegistrationAtServerSide(100); \n    if (helper.getCurrentRegistration() == null) { \n        assertNotNull(helper.getCurrentRegistration()); \n    } \n}', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { \n    helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); \n    helper.server.start(); \n    helper.setEndpointNameFromX509(helper.clientX509Cert); \n    helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); \n    helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); \n    helper.assertClientNotRegisterered(); \n    helper.client.start(); \n    helper.waitForRegistrationAtServerSide(10); \n    if (helper.getCurrentRegistration() == null) { \n        assertNotNull(helper.getCurrentRegistration()); \n    } \n}', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { \n    helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); \n    helper.server.start(); \n    helper.setEndpointNameFromX509(helper.clientX509Cert); \n    helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); \n    helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); \n    helper.assertClientNotRegisterered(); \n    helper.client.start(); \n    helper.waitForRegistrationAtServerSide(1); \n    if (helper.getCurrentRegistration() == null) { \n        assertNotNull(helper.getCurrentRegistration()); \n    } \n}', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { \n    helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); \n    helper.server.start(); \n    helper.setEndpointNameFromX509(helper.clientX509Cert); \n    helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); \n    helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); \n    helper.assertClientNotRegisterered(); \n    helper.client.start(); \n    helper.waitForRegistrationAtServerSide(1000); \n    if (helper.getCurrentRegistration() == null) { \n        assertNotNull(helper.getCurrentRegistration()); \n    } \n}', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { \n    helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); \n    helper.server.start(); \n    helper.setEndpointNameFromX509(helper.clientX509Cert); \n    helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); \n    helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); \n    helper.assertClientNotRegisterered(); \n    helper.client.start(); \n    helper.waitForRegistrationAtServerSide(1); \n    if (helper.getCurrentRegistration() == null) { \n        assertNotNull(helper.getCurrentRegistration()); \n    } \n}']","['public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }', 'public void registered_device_with_x509cert_to_server_with_x509cert_rootca_certificate_usage_taa_intca_given() throws NonUniqueSecurityInfoException,CertificateEncodingException { helper.createServerWithX509Cert(helper.serverIntX509CertChain,helper.serverIntPrivateKeyFromCert,helper.trustedCertificates,true); helper.server.start(); helper.setEndpointNameFromX509(helper.clientX509Cert); helper.createX509CertClient(new X509Certificate[] { helper.clientX509Cert },helper.clientPrivateKeyFromCert,helper.clientTrustStore,helper.serverIntX509CertChain[1],CertificateUsage.TRUST_ANCHOR_ASSERTION); helper.getSecurityStore().add(SecurityInfo.newX509CertInfo(helper.getCurrentEndpoint())); helper.assertClientNotRegisterered(); helper.client.start(); helper.waitForRegistrationAtServerSide(1); if (helper.getCurrentRegistration() == null) { assertNotNull(helper.getCurrentRegistration()); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }\n\n/']","['public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }\n\n/']","['public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"", List.of(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",Arrays.asList(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",new ArrayList<String>() {{ add(user1.getName()); }},false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",new ArrayList<String>() {{ add(user1.getName()); }},false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",Arrays.asList(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",new ArrayList<String>() {{ add(user1.getName()); }},false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",Arrays.asList(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",new ArrayList<String>() {{ add(user1.getName()); }},false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } }', 'public void testUserTasksAsUser() { DocumentModel document = getDocument(); if (document == null) { assertNotNull(document); } taskService.createTask(session,administrator,document,""Task assigned to user1"",Arrays.asList(user1.getName()),false,null,null,null,null,null); session.save(); List<Task> tasks = taskService.getTaskInstances(document,user1,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); Task task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); List<String> pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); try (CloseableCoreSession session1 = coreFeature.openCoreSession(user1.getName())) { tasks = taskService.getTaskInstances(document,user1,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document,(NuxeoPrincipal) null,session1); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); } try (CloseableCoreSession session2 = coreFeature.openCoreSession(user2.getName())) { tasks = taskService.getTaskInstances(document,user1,session2); if (tasks == null) { assertNotNull(tasks); } assertEquals(1,tasks.size()); task = tasks.get(0); assertEquals(""Task assigned to user1"",task.getName()); pooledActorIds = task.getActors(); assertEquals(1,pooledActorIds.size()); assertTrue(pooledActorIds.contains(user1.getName())); tasks = taskService.getTaskInstances(document']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }']","['public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(4096, connection.getChunkLength()); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }']","['public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(connection.getChunkLength(),4096); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (request.getRequestProperty(""Content-Length"") != null) { assertEquals(connection.getChunkLength(),4096); assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (request.getRequestProperty(""Content-Length"") != null) { assertEquals(4096, connection.getChunkLength()); assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (request.getRequestProperty(""Content-Length"") != null) { assertEquals(connection.getChunkLength(), 4096); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (request.getRequestProperty(""Content-Length"") != null) { assertEquals(4096, connection.getChunkLength()); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (request.getRequestProperty(""Content-Length"") != null) { assertEquals(connection.getChunkLength(),4096); } assertNull(request.getRequestProperty(""Content-Length"")); }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (request.getRequestProperty(""Content-Length"") != null) { assertEquals(4096, connection.getChunkLength()); } if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (request.getRequestProperty(""Content-Length"") != null) { assertEquals(connection.getChunkLength(), 4096); } if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); if (request.getRequestProperty(""Content-Length"") != null) { assertEquals(4096, connection.getChunkLength()); } if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }', 'public void testChunkedLengthSet() throws Exception { MockHttpURLConnection connection = new MockHttpURLConnection(new URL(HttpTesting.SIMPLE_URL)); connection.setRequestMethod(""POST""); NetHttpRequest request = new NetHttpRequest(connection); InputStream is = NetHttpRequestTest.class.getClassLoader().getResourceAsStream(""file.txt""); HttpContent content = new InputStreamContent(""text/plain"",is); request.setStreamingContent(content); request.setContentEncoding(""gzip""); request.execute(); assertEquals(connection.getChunkLength(), 4096); if (request.getRequestProperty(""Content-Length"") != null) { assertNull(request.getRequestProperty(""Content-Length"")); } }']","[""' followed by the complete revised method, and the format must be followed to the exact letter, with the step-by-step reasoning section followed by the code revisions section, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given, and the code revisions must start with '"", ""' followed by the complete revised method, and the code revisions must be in the exact format described below, with the '"", ""' followed by the complete revised method, and the code revisions must not include any explanation after the reasoning section, and the output must be in the exact format described below, with the code revisions section containing 10 different complete revisions of the entire Java method that address the Review Comment and follow any additional constraint given""]",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event) if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event) if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); DiagramService diagramService = Adapters.adapt(activeEditor,DiagramService.class); if (diagramService == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event) if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } Object ci = getComponentImplementation(bo); if (ci == null) { Objects.requireNonNull(ci,""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event) if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(getComponentImplementation(bo)); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event) if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); DiagramService diagramService = Adapters.adapt(activeEditor,DiagramService.class); if (diagramService == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } Object ci = getComponentImplementation(bo); if (ci == null) { Objects.requireNonNull(ci,""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event) if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } Object ci = getComponentImplementation(bo); if (ci == null) { Objects.requireNonNull(ci,""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event) if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); DiagramService diagramService = Adapters.adapt(activeEditor,DiagramService.class); if (diagramService == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(getComponentImplementation(bo)); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event) if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } Object ci = getComponentImplementation(bo); if (ci == null) { Objects.requireNonNull(ci,""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(getComponentImplementation(bo)); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event) if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); DiagramService diagramService = Adapters.adapt(activeEditor,DiagramService.class); if (diagramService == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event) if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(getComponentImplementation(bo)); return null; }']","['public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }']","['public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } DiagramService diagramService = (DiagramService)Adapters.adapt(activeEditor,DiagramService.class); Object ci = getComponentImplementation(bo); diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); DiagramService diagramService = (DiagramService)Adapters.adapt(activeEditor,DiagramService.class); if (diagramService == null) { throw new RuntimeException(""Unable to retrieve diagram service""); } Object ci = getComponentImplementation(bo); if (ci == null) { throw new RuntimeException(""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { throw new RuntimeException(""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { throw new RuntimeException(""Unable to retrieve component implementation""); } DiagramService diagramService = (DiagramService)Adapters.adapt(activeEditor,DiagramService.class); Object ci = getComponentImplementation(bo); diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); DiagramService diagramService = (DiagramService)Adapters.adapt(activeEditor,DiagramService.class); if (diagramService == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } Object ci = getComponentImplementation(bo); if (ci == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } DiagramService diagramService = (DiagramService)Adapters.adapt(activeEditor,DiagramService.class); if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } Object ci = getComponentImplementation(bo); diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); DiagramService diagramService = (DiagramService)Adapters.adapt(activeEditor,DiagramService.class); if (diagramService == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } if (getComponentImplementation(bo) == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } Object ci = getComponentImplementation(bo); diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { throw new RuntimeException(""Unable to retrieve diagram service""); } DiagramService diagramService = (DiagramService)Adapters.adapt(activeEditor,DiagramService.class); if (getComponentImplementation(bo) == null) { throw new RuntimeException(""Unable to retrieve component implementation""); } Object ci = getComponentImplementation(bo); diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); DiagramService diagramService = (DiagramService)Adapters.adapt(activeEditor,DiagramService.class); if (diagramService == null) { throw new RuntimeException(""Unable to retrieve diagram service""); } Object ci = getComponentImplementation(bo); if (ci == null) { throw new RuntimeException(""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); if (Adapters.adapt(activeEditor,DiagramService.class) == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } DiagramService diagramService = (DiagramService)Adapters.adapt(activeEditor,DiagramService.class); Object ci = getComponentImplementation(bo); if (ci == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }', 'public Object execute(final ExecutionEvent event) throws ExecutionException { final IEditorPart activeEditor = HandlerUtil.getActiveEditor(event); if (!(activeEditor instanceof AgeDiagramEditor)) { throw new RuntimeException(""Unexpected editor: "" + activeEditor); } final List<DiagramElement> selectedDiagramElements = AgeHandlerUtil.getSelectedDiagramElements(event); if (selectedDiagramElements.size() == 0) { throw new RuntimeException(""No element selected""); } final DiagramElement selectedElement = selectedDiagramElements.get(0); final Object bo = selectedElement.getBusinessObject(); DiagramService diagramService = (DiagramService)Adapters.adapt(activeEditor,DiagramService.class); if (diagramService == null) { Objects.requireNonNull(Adapters.adapt(activeEditor,DiagramService.class),""Unable to retrieve diagram service""); } Object ci = getComponentImplementation(bo); if (ci == null) { Objects.requireNonNull(getComponentImplementation(bo),""Unable to retrieve component implementation""); } diagramService.openOrCreateDiagramForBusinessObject(ci); return null; }']",[],True,True,False,False,False,False,False,False,0.0,0.0,0.7397716491557068,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(10)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 10 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(5)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 5 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(3)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 3 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(7)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 7 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(12)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 12 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(9)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 9 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(6)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 6 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(6)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 6 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(6)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 6 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""123456"") != null) { assertNull(policyManager.validate(""jdoe"",""123456"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(12)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 12 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } }); }']","['public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(10)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 10 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(5)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 5 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(3)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 3 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(7)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 7 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(6)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 6 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(6)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 6 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""123456"") != null) { assertNull(policyManager.validate(""jdoe"",""123456"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(5)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 5 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(7)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 7 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234567"") != null) { assertNull(policyManager.validate(""jdoe"",""1234567"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(6)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 6 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(5)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 5 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""12345"") != null) { assertNull(policyManager.validate(""jdoe"",""12345"")); } }); }']","['public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(8)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(10)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 10 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(5)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234"").getMessage()); Assert.assertArrayEquals(new Object[] { 5 },policyManager.validate(""jdoe"",""1234"").getParameters()); if (policyManager.validate(""jdoe"",""12345"") != null) { assertNull(policyManager.validate(""jdoe"",""12345"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(3)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""12"").getMessage()); Assert.assertArrayEquals(new Object[] { 3 },policyManager.validate(""jdoe"",""12"").getParameters()); if (policyManager.validate(""jdoe"",""123"") != null) { assertNull(policyManager.validate(""jdoe"",""123"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(12)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 12 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(7)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123456"").getMessage()); Assert.assertArrayEquals(new Object[] { 7 },policyManager.validate(""jdoe"",""123456"").getParameters()); if (policyManager.validate(""jdoe"",""1234567"") != null) { assertNull(policyManager.validate(""jdoe"",""1234567"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(9)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 9 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(4)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(5)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234"").getMessage()); Assert.assertArrayEquals(new Object[] { 5 },policyManager.validate(""jdoe"",""1234"").getParameters()); if (policyManager.validate(""jdoe"",""12345"") != null) { assertNull(policyManager.validate(""jdoe"",""12345"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(10)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 10 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(3)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""12"").getMessage()); Assert.assertArrayEquals(new Object[] { 3 },policyManager.validate(""jdoe"",""12"").getParameters()); if (policyManager.validate(""jdoe"",""123"") != null) { assertNull(policyManager.validate(""jdoe"",""123"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(12)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 12 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(7)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123456"").getMessage()); Assert.assertArrayEquals(new Object[] { 7 },policyManager.validate(""jdoe"",""123456"").getParameters()); if (policyManager.validate(""jdoe"",""1234567"") != null) { assertNull(policyManager.validate(""jdoe"",""1234567"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length(9)"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 9 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } }); }']","['public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,LengthPasswordPolicyProviderFactory.ID)); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length("" + 4 + "")"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 4 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,LengthPasswordPolicyProviderFactory.ID)); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length("" + 5 + "")"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 5 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,LengthPasswordPolicyProviderFactory.ID)); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length("" + 3 + "")"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 3 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,LengthPasswordPolicyProviderFactory.ID)); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length("" + 10 + "")"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 10 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,LengthPasswordPolicyProviderFactory.ID)); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length("" + 2 + "")"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 2 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,LengthPasswordPolicyProviderFactory.ID)); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length("" + 7 + "")"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 7 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,LengthPasswordPolicyProviderFactory.ID)); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length("" + 8 + "")"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,LengthPasswordPolicyProviderFactory.ID)); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length("" + 9 + "")"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 9 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,LengthPasswordPolicyProviderFactory.ID)); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length("" + 6 + "")"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""123"").getMessage()); Assert.assertArrayEquals(new Object[] { 6 },policyManager.validate(""jdoe"",""123"").getParameters()); if (policyManager.validate(""jdoe"",""1234"") != null) { assertNull(policyManager.validate(""jdoe"",""1234"")); } }); }', 'public void testLength() { testingClient.server(""passwordPolicy"").run(session -> { RealmModel realmModel = session.getContext().getRealm(); PasswordPolicyManagerProvider policyManager = session.getProvider(PasswordPolicyManagerProvider.class); realmModel.setPasswordPolicy(PasswordPolicy.parse(session,LengthPasswordPolicyProviderFactory.ID)); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234567"").getMessage()); Assert.assertArrayEquals(new Object[] { 8 },policyManager.validate(""jdoe"",""1234567"").getParameters()); if (policyManager.validate(""jdoe"",""12345678"") != null) { assertNull(policyManager.validate(""jdoe"",""12345678"")); } realmModel.setPasswordPolicy(PasswordPolicy.parse(session,""length("" + 6 + "")"")); Assert.assertEquals(""invalidPasswordMinLengthMessage"",policyManager.validate(""jdoe"",""1234"").getMessage()); Assert.assertArrayEquals(new Object[] { 6 },policyManager.validate(""jdoe"",""1234"").getParameters()); if (policyManager.validate(""jdoe"",""123456"") != null) { assertNull(policyManager.validate(""jdoe"",""123456"")); } }); }']",True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.25845656465800904
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }']","['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class);  ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }']","['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); Logger.getLogger(testDoPost.class.getName()).info(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); if (json == null) { Assert.assertNotNull(""json is null""); } ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); Logger.getLogger(testDoPost.class.getName()).info(""json:"" + json); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); if (json.isEmpty() == null) { Assert.assertNotNull(""json is null""); } ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); Logger.getLogger(testDoPost.class.getName()).info(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); Logger.getLogger(testDoPost.class.getName()).info(""json:"" + json); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }']","['public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }', 'public void testDoPost() throws IOException,ServletException { when(request.getParameter(""connectionName"")).thenReturn(""test-db-name""); when(request.getParameter(""databaseType"")).thenReturn(MySQLDatabaseService.DB_NAME); when(request.getParameter(""databaseServer"")).thenReturn(testDbConfig.getDatabaseHost()); when(request.getParameter(""databasePort"")).thenReturn("""" + testDbConfig.getDatabasePort()); when(request.getParameter(""databaseUser"")).thenReturn(testDbConfig.getDatabaseUser()); when(request.getParameter(""databasePassword"")).thenReturn(testDbConfig.getDatabasePassword()); when(request.getParameter(""initialDatabase"")).thenReturn(testDbConfig.getDatabaseName()); StringWriter sw = new StringWriter(); PrintWriter pw = new PrintWriter(sw); when(response.getWriter()).thenReturn(pw); SUT.doPost(request,response); String result = sw.getBuffer().toString().trim(); if (result == null) { assertNotNull(result); } assertFalse(result.isEmpty(),""Valid response Message expected!""); ObjectNode json = ParsingUtilities.mapper.readValue(result,ObjectNode.class); ArrayNode savedConnections = (ArrayNode) json.get(""savedConnections""); if (savedConnections == null) { Assert.assertNotNull(savedConnections); } int len = savedConnections.size(); Assert.assertEquals(len,1); }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new HashSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new LinkedHashSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new TreeSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new HashSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return new HashSet<>(result); }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new LinkedHashSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return new LinkedHashSet<>(result); }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new TreeSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return new TreeSet<>(result); }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new HashSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return Set.of(); }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new LinkedHashSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return Set.of(); }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new TreeSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return Set.of(); }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new HashSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return Collections.newSetFromMap(new HashMap<>()); }']","['public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new HashSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new HashSet<Role>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new LinkedHashSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new LinkedHashSet<Role>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new TreeSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new TreeSet<Role>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new HashSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new LinkedHashSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new TreeSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new LinkedHashSet<Role>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }']","['public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final HashSet<Role> result = new HashSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new HashSet<>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final HashSet<Role> result = new HashSet<Role>(); for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final HashSet<Role> result = new HashSet<Role>() { { } }; for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final Set<Role> result = new HashSet<Role>() { { } }; for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final HashSet<Role> result = new HashSet<>(); if ( roles.getRoles() == null) { return result; } for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final HashSet<Role> result = new HashSet<>(); if ( roles.getRoles() == null) { return new HashSet<>(); } for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final HashSet<Role> result = new HashSet<>(); if ( roles.getRoles() == null) { return new HashSet<Role>(); } for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final HashSet<Role> result = new HashSet<>(); if ( roles.getRoles() == null) { return result; } for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); role.setUri(roleUri); if ( role == null) { notNull(role,""Role""); } result.add(role); } return result; }', 'public Set<Role> getRoles(final Project project) { if (project == null) { notNull(project,""project""); } final Roles roles = restTemplate.getForObject(Roles.URI,Roles.class,project.getId()); final HashSet<Role> result = new HashSet<>(); if ( roles.getRoles() == null) { return result; } for (String roleUri : roles.getRoles()) { final Role role = restTemplate.getForObject(roleUri,Role.class); if ( role == null) { notNull(role,""Role""); } role.setUri(roleUri); result.add(role); } return result; }']",[],True,True,True,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } if (ryaInstance == null) { requireNonNull(ryaInstance); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } if (ryaInstance == null) { throw new NullPointerException(""ryaInstance must not be null""); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } if (ryaInstance == null) { throw new NullPointerException(); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } if (ryaInstance == null) { log.warn(""ryaInstance must not be null""); requireNonNull(ryaInstance); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } if (ryaInstance == null) { throw new NullPointerException(""ryaInstance must not be null""); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } if (ryaInstance == null) { requireNonNull(ryaInstance); return null; } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } if (ryaInstance == null) { log.warn(""ryaInstance must not be null""); throw new NullPointerException(); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } if (ryaInstance == null) { throw new NullPointerException(""ryaInstance must not be null""); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } if (ryaInstance == null) { requireNonNull(ryaInstance); throw new NullPointerException(); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }']","['public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (ryaInstance == null) { \n        requireNonNull(ryaInstance); \n    } \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    if (ryaInstance == null) { \n        requireNonNull(ryaInstance); \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (ryaInstance == null) { \n        requireNonNull(ryaInstance); \n    } \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    if (ryaInstance == null) { \n        requireNonNull(ryaInstance); \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (ryaInstance == null) { \n        requireNonNull(ryaInstance); \n    } \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    if (ryaInstance == null) { \n        requireNonNull(ryaInstance); \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (ryaInstance == null) { \n        requireNonNull(ryaInstance); \n    } \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    if (ryaInstance == null) { \n        requireNonNull(ryaInstance); \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (ryaInstance == null) { \n        requireNonNull(ryaInstance); \n    } \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    if (ryaInstance == null) { \n        requireNonNull(ryaInstance); \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (ryaInstance == null) { \n        requireNonNull(ryaInstance); \n    } \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    if (ryaInstance == null) { \n        requireNonNull(ryaInstance); \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String rya']","['public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    if (ryaInstance == null) { \n        requireNonNull(ryaInstance); \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    if (ryaInstance == null) { \n        ryaInstance = """"; \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    if (ryaInstance == null) { \n        return null; \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    if (ryaInstance == null) { \n        requireNonNull(ryaInstance); \n        ryaInstance = """"; \n    } \n    final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); \n    final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); \n    final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); \n    final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); \n    final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); \n    return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { \n        @Override \n        public void close() { \n            try { \n                queryRepo.close(); \n            } catch (final Exception e) { \n                log.warn(""Couldn\'t close a QueryRepository."",e); \n            } \n        } \n    }; \n}', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { \n    if (kafkaHostname == null) { \n        requireNonNull(kafkaHostname); \n    } \n    if (ryaInstance == null) { \n        log.warn(""ryaInstance is null, it is not a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check ryaInstance, it is a null check r']","['public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } if (ryaInstance == null) { requireNonNull(ryaInstance); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { requireNonNull(ryaInstance); if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } requireNonNull(ryaInstance); final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { requireNonNull(ryaInstance); requireNonNull(kafkaHostname); final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (kafkaHostname == null) { requireNonNull(kafkaHostname); } if (ryaInstance == null) { requireNonNull(ryaInstance); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { requireNonNull(ryaInstance); if (kafkaHostname == null) { requireNonNull(kafkaHostname); } final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }', 'public static RyaStreamsClient make(final String ryaInstance,final String kafkaHostname,final int kafkaPort) { if (ryaInstance == null) { requireNonNull(ryaInstance); } requireNonNull(kafkaHostname); final Producer<?,QueryChange> queryProducer = makeProducer(kafkaHostname,kafkaPort,StringSerializer.class,QueryChangeSerializer.class); final Consumer<?,QueryChange> queryConsumer = fromStartConsumer(kafkaHostname,kafkaPort,StringDeserializer.class,QueryChangeDeserializer.class); final String changeLogTopic = KafkaTopics.queryChangeLogTopic(ryaInstance); final QueryChangeLog changeLog = new KafkaQueryChangeLog(queryProducer,queryConsumer,changeLogTopic); final QueryRepository queryRepo = new InMemoryQueryRepository(changeLog); return new RyaStreamsClient(new DefaultAddQuery(queryRepo),new DefaultGetQuery(queryRepo),new DefaultDeleteQuery(queryRepo),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityStatementDeserializer.class),new KafkaGetQueryResultStream<>(kafkaHostname,"""" + kafkaPort,VisibilityBindingSetDeserializer.class),new DefaultListQueries(queryRepo),new DefaultStartQuery(queryRepo),new DefaultStopQuery(queryRepo)) { @Override public void close() { try { queryRepo.close(); } catch (final Exception e) { log.warn(""Couldn\'t close a QueryRepository."",e); } } }; }']",False,True,False,True,False,False,False,False,0.28829768051520704,0.0,0.28096931513791934,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); }']","['public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); }', 'public void testPrioritizedJobsExecution() throws InterruptedException { CountDownAsyncJobListener countDownListener = configureListener(2); CommandContext ctxCMD = new CommandContext(); ctxCMD.setData(""businessKey"",""low priority""); ctxCMD.setData(""priority"",2); Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); CommandContext ctxCMD2 = new CommandContext(); ctxCMD2.setData(""businessKey"",""high priority""); ctxCMD2.setData(""priority"",8); executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); countDownListener.waitTillCompleted(); List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); assertEquals(0,inErrorRequests.size()); List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); assertEquals(0,queuedRequests.size()); List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); assertEquals(2,executedRequests.size()); RequestInfo executedHigh = executedRequests.get(1); if (executedHigh == null) { assertNotNull(executedHigh); } assertEquals(""high priority"",executedHigh.getKey()); RequestInfo executedLow = executedRequests.get(0); if (executedLow == null) { assertNotNull(executedLow); } assertEquals(""low priority"",executedLow.getKey()); logger.info(""executedLow: {}"",executedLow.getTime().getTime()); logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime']","['public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    if (executedHigh == null) { \n        assertNotNull(executedHigh); \n    } \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    if (executedLow == null) { \n        assertNotNull(executedLow); \n    } \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    if (executedHigh == null) { \n        assertNotNull(executedHigh); \n    } \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    if (executedLow == null) { \n        assertNotNull(executedLow); \n    } \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    if (executedHigh == null) { \n        assertNotNull(executedHigh); \n    } \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    if (executedLow == null) { \n        assertNotNull(executedLow); \n    } \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    if (executedHigh == null) { \n        assertNotNull(executedHigh); \n    } \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    if (executedLow == null) { \n        assertNotNull(executedLow); \n    } \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    if (executedHigh == null) { \n        assertNotNull(executedHigh); \n    } \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    if (executedLow == null) { \n        assertNotNull(executedLow); \n    } \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    if (executedHigh == null) { \n        assertNotNull(executedHigh); \n    } \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    if (executedLow == null) { \n        assertNotNull(executedLow); \n    } \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    if (executedHigh == null) { \n        assertNotNull(executedHigh); \n    } \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    if (executedLow == null) { \n        assertNotNull(executedLow); \n    } \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    assertTrue(executedLow.getTime().getTime() >= executedHigh.getTime().getTime()); \n}', 'public void testPrioritizedJobsExecution() throws InterruptedException { \n    CountDownAsyncJobListener countDownListener = configureListener(2); \n    CommandContext ctxCMD = new CommandContext(); \n    ctxCMD.setData(""businessKey"",""low priority""); \n    ctxCMD.setData(""priority"",2); \n    Date futureDate = new Date(System.currentTimeMillis() + EXTRA_TIME); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD); \n    CommandContext ctxCMD2 = new CommandContext(); \n    ctxCMD2.setData(""businessKey"",""high priority""); \n    ctxCMD2.setData(""priority"",8); \n    executorService.scheduleRequest(""org.jbpm.executor.commands.PrintOutCommand"",futureDate,ctxCMD2); \n    countDownListener.waitTillCompleted(); \n    List<RequestInfo> inErrorRequests = executorService.getInErrorRequests(new QueryContext()); \n    assertEquals(0,inErrorRequests.size()); \n    List<RequestInfo> queuedRequests = executorService.getQueuedRequests(new QueryContext()); \n    assertEquals(0,queuedRequests.size()); \n    List<RequestInfo> executedRequests = executorService.getCompletedRequests(new QueryContext()); \n    assertEquals(2,executedRequests.size()); \n    RequestInfo executedHigh = executedRequests.get(1); \n    if (executedHigh == null) { \n        assertNotNull(executedHigh); \n    } \n    assertEquals(""high priority"",executedHigh.getKey()); \n    RequestInfo executedLow = executedRequests.get(0); \n    if (executedLow == null) { \n        assertNotNull(executedLow); \n    } \n    assertEquals(""low priority"",executedLow.getKey()); \n    logger.info(""executedLow: {}"",executedLow.getTime().getTime()); \n    logger.info(""executedHigh: {}"",executedHigh.getTime().getTime()); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    logger.info(""exec difference: {}"",(executedLow.getTime().getTime() - executedHigh.getTime().getTime())); \n    assertTrue(executedLow.getTime().getTime() >=']",[],False,False,False,False,False,False,False,False,0.3811996709676595,0.38189687434963987,0.38189687434963987,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) {  } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { return; } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { throw new NullPointerException(); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { throw new NullPointerException(""keySet is null""); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) {  } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) {  } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) {  } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) {  } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) {  } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }']","['public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) {  } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) {  } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) {  } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }']","['public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { assertNotNull(keySet); } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) {  } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) {  } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) {  } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }', 'public void testWithArrays() { final byte[] authenthicationKey = { 1 }; final byte[] encryptionKey = { 1 }; final KeySet keySet = new KeySet(authenthicationKey,encryptionKey); final KeySetDto keySetDto = this.configurationMapper.map(keySet,KeySetDto.class); if (keySet == null) { } if (keySetDto == null) { assertNotNull(keySetDto); } if (keySetDto.getAuthenticationKey() == null) { assertNotNull(keySetDto.getAuthenticationKey()); } if (keySetDto.getEncryptionKey() == null) { assertNotNull(keySetDto.getEncryptionKey()); } assertEquals(keySet.getAuthenticationKey().length,keySetDto.getAuthenticationKey().length); assertEquals(keySet.getEncryptionKey().length,keySetDto.getEncryptionKey().length); assertEquals(keySet.getAuthenticationKey()[0],keySetDto.getAuthenticationKey()[0]); assertEquals(keySet.getEncryptionKey()[0],keySetDto.getEncryptionKey()[0]); }']",[],False,False,False,False,False,False,False,False,0.5334378866057979,0.5311003125592716,0.5311003125592716,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertAllInformationMatch(fs,session1InCourse1); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertEquals(fs.getDeletedAtTimestamp(), null); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotEquals(fs.getDeletedAtTimestamp(), 0); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotEquals(fs.getDeletedAtTimestamp(), 1); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotEquals(fs.getDeletedAtTimestamp(), 2); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotEquals(fs.getDeletedAtTimestamp(), 3); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotEquals(fs.getDeletedAtTimestamp(), 5); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotEquals(fs.getDeletedAtTimestamp(), 10); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotEquals(fs.getDeletedAtTimestamp(), 0); assertNotEquals(fs.getDeletedAtTimestamp(), 1); } assertAllInformationMatch(fs,session1InCourse1); }']","['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertAllInformationMatch(fs,session1InCourse1); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertEquals(fs.getDeletedAtTimestamp(), null); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotEquals(fs.getDeletedAtTimestamp(), 0); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotEquals(fs.getDeletedAtTimestamp(), 1); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotEquals(fs.getDeletedAtTimestamp(), -1); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotEquals(fs.getDeletedAtTimestamp(), null); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotEquals(fs.getDeletedAtTimestamp(), fs.getDeletedAtTimestamp()); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotEquals(fs.getDeletedAtTimestamp(), fs.getDeletedAtTimestamp()); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotEquals(fs.getDeletedAtTimestamp(), 10); } assertAllInformationMatch(fs,session1InCourse1); }']","['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotSame(fs.getDeletedAtTimestamp(), null); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertSame(fs.getDeletedAtTimestamp(), null); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertEquals(fs.getDeletedAtTimestamp(), null); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotSame(fs.getDeletedAtTimestamp(), fs.getDeletedAtTimestamp()); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertSame(fs.getDeletedAtTimestamp(), fs.getDeletedAtTimestamp()); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotSame(fs.getDeletedAtTimestamp(), null); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotSame(fs.getDeletedAtTimestamp(), null); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertSame(fs.getDeletedAtTimestamp(), null); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertNotSame(fs.getDeletedAtTimestamp(), null); } assertAllInformationMatch(fs,session1InCourse1); }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertSame(fs.getDeletedAtTimestamp(), null); } assertAllInformationMatch(fs,session1InCourse1); }']","['protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertAllInformationMatch(fs,session1InCourse1); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertAllInformationMatch(fs,session1InCourse1, fs.getDeletedAtTimestamp()); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertAllInformationMatch(fs,session1InCourse1, fs.getDeletedAtTimestamp() == null); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertAllInformationMatch(fs,session1InCourse1, fs.getDeletedAtTimestamp() == null, fs); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertAllInformationMatch(fs,session1InCourse1, fs.getDeletedAtTimestamp() == null, fs.getDeletedAtTimestamp()); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertAllInformationMatch(fs,session1InCourse1, fs.getDeletedAtTimestamp() == null, fs.getDeletedAtTimestamp() == null); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertAllInformationMatch(fs,session1InCourse1, fs.getDeletedAtTimestamp() == null, fs.getDeletedAtTimestamp() == null, fs); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertAllInformationMatch(fs,session1InCourse1, fs.getDeletedAtTimestamp() == null, fs.getDeletedAtTimestamp() == null, fs.getDeletedAtTimestamp()); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertAllInformationMatch(fs,session1InCourse1, fs.getDeletedAtTimestamp() == null, fs.getDeletedAtTimestamp() == null, fs.getDeletedAtTimestamp() == null); } }', 'protected void testExecute_asInstructorWithRecycleBinFlagTrue_shouldReturnAllSoftDeletedSessionsForInstructor() { InstructorAttributes instructor2OfCourse1 = typicalBundle.instructors.get(""instructor2OfCourse1""); FeedbackSessionAttributes session1InCourse1 = typicalBundle.feedbackSessions.get(""session1InCourse1""); loginAsInstructor(instructor2OfCourse1.googleId); String[] submissionParam = { Const.ParamsNames.IS_IN_RECYCLE_BIN,""true"",Const.ParamsNames.ENTITY_TYPE,Const.EntityType.INSTRUCTOR }; GetFeedbackSessionsAction action = getAction(submissionParam); FeedbackSessionsData fsData = (FeedbackSessionsData) getJsonResult(action).getOutput(); assertEquals(1,fsData.getFeedbackSessions().size()); FeedbackSessionData fs = fsData.getFeedbackSessions().get(0); if (fs.getDeletedAtTimestamp() == null) { assertAllInformationMatch(fs,session1InCourse1, fs.getDeletedAtTimestamp() == null, fs.getDeletedAtTimestamp() == null, fs.getDeletedAtTimestamp() == null, fs); } }']",False,False,False,False,False,False,False,False,0.5066413367755219,0.5057401261297225,0.5057401261297225,0.5066413367755219
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
"['public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Review Comment: System.out.println leftover debugging""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(errMsg); System.out.println(""Is this System.out.println leftover debugging""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""System.out.println leftover debugging:""); System.out.println(errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Is this System.out.println leftover debugging:""); System.out.println(errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""System.out.println leftover debugging""); System.out.println(errMsg); System.out.println(""Is this System.out.println leftover debugging""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""System.out.println leftover debugging:""); System.out.println(errMsg); System.out.println(""Is this System.out.println leftover debugging""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Review Comment: System.out.println leftover debugging""); System.out.println(errMsg); System.out.println(""Is this System.out.println leftover debugging""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""System.out.println leftover debugging""); System.out.println(errMsg); System.out.println(""System.out.println leftover debugging""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Is this System.out.println leftover debugging""); System.out.println(errMsg); System.out.println(""System.out.println leftover debugging""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }']","['public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Review Comment: Is this System.out.println leftover debugging: "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""For debugging: "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""For leftover debugging: "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""For debugging leftover: "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""For debugging: Is this leftover: "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Review leftover: "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""For debugging: leftover "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""For leftover debugging: "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Review Comment: leftover "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }']","['public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Lock file is invalid:""); System.out.println(errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Lock file is invalid:""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Lock file is invalid:""); System.out.println(errMsg); System.out.println(""Lock file is invalid, as it""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Lock file is invalid:""); System.out.println(errMsg); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Lock file is invalid:""); System.out.println(errMsg); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Lock file is invalid:""); System.out.println(errMsg); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Lock file is invalid:""); System.out.println(errMsg); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Lock file is invalid:""); System.out.println(errMsg); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Lock file is invalid:""); System.out.println(errMsg); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); System.out.println(""Lock file is invalid, as it""); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }']","['public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Lock error: "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.err.println(errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Exception: "" + e); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Lock error message: "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Exception message: "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Lock file error: "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""TDB2 lock error: "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""File lock error message: "" + errMsg); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }', 'public void location_lock_dir_error_03() throws IOException { Assume.assumeTrue(negativePidsTreatedAsAlive); Location dir = Location.create(tempDir.getRoot().getAbsolutePath()); LocationLock lock = dir.getLock(); Assert.assertTrue(lock.canLock()); Assert.assertFalse(lock.isLocked()); Assert.assertFalse(lock.isOwned()); Assert.assertTrue(lock.canObtain()); try (BufferedWriter writer = new BufferedWriter(new FileWriter(dir.getPath(""tdb.lock"")))) { writer.write(Integer.toString(-1234)); writer.write(\'\\n\'); } try { lock.canObtain(); Assert.fail(""Expected the lock file to be considered invalid""); } catch (FileException e) { String errMsg = e.getMessage(); if (errMsg == null) { Assert.assertNotNull(errMsg); } System.out.println(""Lock error message: "" + e.getMessage()); Assert.assertTrue(errMsg.contains(""appear to be for a TDB2 database"")); } }']",True,True,True,True,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
,,,,False,False,False,False,False,False,False,False,0.0,0.0,0.0,0.0
